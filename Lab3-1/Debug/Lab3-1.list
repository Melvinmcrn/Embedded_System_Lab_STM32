
Lab3-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800836c  0800836c  0001836c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008388  08008388  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008388  08008388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008390  08008390  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  08008428  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08008428  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba7c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039d8  00000000  00000000  0003bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  0003f518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001490  00000000  00000000  00040b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025188  00000000  00000000  00041fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013843  00000000  00000000  00067148  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1588  00000000  00000000  0007a98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bf13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed8  00000000  00000000  0014bf90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008354 	.word	0x08008354

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008354 	.word	0x08008354

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f007 f8de 	bl	80076bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	200000c0 	.word	0x200000c0

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000c0 	.word	0x200000c0

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x4a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d123      	bne.n	80008a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4013      	ands	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0203 	and.w	r2, r3, #3
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00b      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d007      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	2b11      	cmp	r3, #17
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d130      	bne.n	800095c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5e      	ldr	r2, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	619a      	str	r2, [r3, #24]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d104      	bne.n	8000b9e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	041a      	lsls	r2, r3, #16
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b9c:	e002      	b.n	8000ba4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 fa7a 	bl	80070c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013c00 	.word	0x40013c00

08000be0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b08f      	sub	sp, #60	; 0x3c
 8000be4:	af0a      	add	r7, sp, #40	; 0x28
 8000be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e054      	b.n	8000c9c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d106      	bne.n	8000c12 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f006 ffd1 	bl	8007bb4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2203      	movs	r2, #3
 8000c16:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fda5 	bl	8004780 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	687e      	ldr	r6, [r7, #4]
 8000c3e:	466d      	mov	r5, sp
 8000c40:	f106 0410 	add.w	r4, r6, #16
 8000c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c54:	1d33      	adds	r3, r6, #4
 8000c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f003 fd1f 	bl	800469c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2101      	movs	r1, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fd9c 	bl	80047a2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	687e      	ldr	r6, [r7, #4]
 8000c72:	466d      	mov	r5, sp
 8000c74:	f106 0410 	add.w	r4, r6, #16
 8000c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c84:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c88:	1d33      	adds	r3, r6, #4
 8000c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8c:	6838      	ldr	r0, [r7, #0]
 8000c8e:	f003 feaf 	bl	80049f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ca4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af04      	add	r7, sp, #16
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	70fb      	strb	r3, [r7, #3]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	70bb      	strb	r3, [r7, #2]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <HAL_HCD_HC_Init+0x28>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e07f      	b.n	8000dcc <HAL_HCD_HC_Init+0x128>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	333d      	adds	r3, #61	; 0x3d
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000ce8:	78fa      	ldrb	r2, [r7, #3]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3338      	adds	r3, #56	; 0x38
 8000cf8:	787a      	ldrb	r2, [r7, #1]
 8000cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000cfc:	78fa      	ldrb	r2, [r7, #3]
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	440b      	add	r3, r1
 8000d0a:	3340      	adds	r3, #64	; 0x40
 8000d0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d0e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d10:	78fa      	ldrb	r2, [r7, #3]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	3339      	adds	r3, #57	; 0x39
 8000d20:	78fa      	ldrb	r2, [r7, #3]
 8000d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	440b      	add	r3, r1
 8000d32:	333f      	adds	r3, #63	; 0x3f
 8000d34:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d3a:	78fa      	ldrb	r2, [r7, #3]
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d42:	b2d8      	uxtb	r0, r3
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	440b      	add	r3, r1
 8000d50:	333a      	adds	r3, #58	; 0x3a
 8000d52:	4602      	mov	r2, r0
 8000d54:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	da0a      	bge.n	8000d74 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d5e:	78fa      	ldrb	r2, [r7, #3]
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	333b      	adds	r3, #59	; 0x3b
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e009      	b.n	8000d88 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	333b      	adds	r3, #59	; 0x3b
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	333c      	adds	r3, #60	; 0x3c
 8000d98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d9c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	787c      	ldrb	r4, [r7, #1]
 8000da4:	78ba      	ldrb	r2, [r7, #2]
 8000da6:	78f9      	ldrb	r1, [r7, #3]
 8000da8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4623      	mov	r3, r4
 8000dba:	f003 ff9b 	bl	8004cf4 <USB_HC_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd90      	pop	{r4, r7, pc}

08000dd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d101      	bne.n	8000df2 <HAL_HCD_HC_Halt+0x1e>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e00f      	b.n	8000e12 <HAL_HCD_HC_Halt+0x3e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 f9d5 	bl	80051b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	70fb      	strb	r3, [r7, #3]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70bb      	strb	r3, [r7, #2]
 8000e32:	4613      	mov	r3, r2
 8000e34:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	333b      	adds	r3, #59	; 0x3b
 8000e46:	78ba      	ldrb	r2, [r7, #2]
 8000e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	333f      	adds	r3, #63	; 0x3f
 8000e5a:	787a      	ldrb	r2, [r7, #1]
 8000e5c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e5e:	7c3b      	ldrb	r3, [r7, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e64:	78fa      	ldrb	r2, [r7, #3]
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3342      	adds	r3, #66	; 0x42
 8000e74:	2203      	movs	r2, #3
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e009      	b.n	8000e8e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e7a:	78fa      	ldrb	r2, [r7, #3]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	440b      	add	r3, r1
 8000e88:	3342      	adds	r3, #66	; 0x42
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e8e:	787b      	ldrb	r3, [r7, #1]
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	f200 80d6 	bhi.w	8001042 <HAL_HCD_HC_SubmitRequest+0x226>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000ead 	.word	0x08000ead
 8000ea0:	0800102d 	.word	0x0800102d
 8000ea4:	08000f19 	.word	0x08000f19
 8000ea8:	08000fa3 	.word	0x08000fa3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000eac:	7c3b      	ldrb	r3, [r7, #16]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	f040 80c9 	bne.w	8001046 <HAL_HCD_HC_SubmitRequest+0x22a>
 8000eb4:	78bb      	ldrb	r3, [r7, #2]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 80c5 	bne.w	8001046 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000ebc:	8b3b      	ldrh	r3, [r7, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	3351      	adds	r3, #81	; 0x51
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ed6:	78fa      	ldrb	r2, [r7, #3]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3351      	adds	r3, #81	; 0x51
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10a      	bne.n	8000f02 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eec:	78fa      	ldrb	r2, [r7, #3]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	440b      	add	r3, r1
 8000efa:	3342      	adds	r3, #66	; 0x42
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f00:	e0a1      	b.n	8001046 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3342      	adds	r3, #66	; 0x42
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
      break;
 8000f16:	e096      	b.n	8001046 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d120      	bne.n	8000f60 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3351      	adds	r3, #81	; 0x51
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10a      	bne.n	8000f4a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f34:	78fa      	ldrb	r2, [r7, #3]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	3342      	adds	r3, #66	; 0x42
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f48:	e07e      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f4a:	78fa      	ldrb	r2, [r7, #3]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3342      	adds	r3, #66	; 0x42
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
      break;
 8000f5e:	e073      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f60:	78fa      	ldrb	r2, [r7, #3]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3350      	adds	r3, #80	; 0x50
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10a      	bne.n	8000f8c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	3342      	adds	r3, #66	; 0x42
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
      break;
 8000f8a:	e05d      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f8c:	78fa      	ldrb	r2, [r7, #3]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3342      	adds	r3, #66	; 0x42
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	701a      	strb	r2, [r3, #0]
      break;
 8000fa0:	e052      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000fa2:	78bb      	ldrb	r3, [r7, #2]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d120      	bne.n	8000fea <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fa8:	78fa      	ldrb	r2, [r7, #3]
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3351      	adds	r3, #81	; 0x51
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10a      	bne.n	8000fd4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fbe:	78fa      	ldrb	r2, [r7, #3]
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	3342      	adds	r3, #66	; 0x42
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000fd2:	e039      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fd4:	78fa      	ldrb	r2, [r7, #3]
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3342      	adds	r3, #66	; 0x42
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	701a      	strb	r2, [r3, #0]
      break;
 8000fe8:	e02e      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3350      	adds	r3, #80	; 0x50
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10a      	bne.n	8001016 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	3342      	adds	r3, #66	; 0x42
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
      break;
 8001014:	e018      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3342      	adds	r3, #66	; 0x42
 8001026:	2202      	movs	r2, #2
 8001028:	701a      	strb	r2, [r3, #0]
      break;
 800102a:	e00d      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	3342      	adds	r3, #66	; 0x42
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
      break;
 8001040:	e002      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001042:	bf00      	nop
 8001044:	e000      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001046:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	3344      	adds	r3, #68	; 0x44
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	8b39      	ldrh	r1, [r7, #24]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4403      	add	r3, r0
 800106c:	3348      	adds	r3, #72	; 0x48
 800106e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	335c      	adds	r3, #92	; 0x5c
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	334c      	adds	r3, #76	; 0x4c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	3339      	adds	r3, #57	; 0x39
 80010a8:	78fa      	ldrb	r2, [r7, #3]
 80010aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80010ac:	78fa      	ldrb	r2, [r7, #3]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	335d      	adds	r3, #93	; 0x5d
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	3338      	adds	r3, #56	; 0x38
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	18d1      	adds	r1, r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	f003 ff14 	bl	8004f08 <USB_HC_StartXfer>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop

080010ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fc31 	bl	800496a <USB_GetMode>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	f040 80f1 	bne.w	80012f2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fc15 	bl	8004944 <USB_ReadInterrupts>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80e7 	beq.w	80012f0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fc0c 	bl	8004944 <USB_ReadInterrupts>
 800112c:	4603      	mov	r3, r0
 800112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001136:	d104      	bne.n	8001142 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001140:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fbfc 	bl	8004944 <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001156:	d104      	bne.n	8001162 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001160:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fbec 	bl	8004944 <USB_ReadInterrupts>
 800116c:	4603      	mov	r3, r0
 800116e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001176:	d104      	bne.n	8001182 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001180:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fbdc 	bl	8004944 <USB_ReadInterrupts>
 800118c:	4603      	mov	r3, r0
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b02      	cmp	r3, #2
 8001194:	d103      	bne.n	800119e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2202      	movs	r2, #2
 800119c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fbce 	bl	8004944 <USB_ReadInterrupts>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b2:	d117      	bne.n	80011e4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80011c2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80011c6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f006 fd71 	bl	8007cb0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fcc7 	bl	8004b68 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fbab 	bl	8004944 <USB_ReadInterrupts>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d102      	bne.n	8001200 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f001 f8c8 	bl	8002390 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fb9d 	bl	8004944 <USB_ReadInterrupts>
 800120a:	4603      	mov	r3, r0
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b08      	cmp	r3, #8
 8001212:	d106      	bne.n	8001222 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f006 fd2f 	bl	8007c78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2208      	movs	r2, #8
 8001220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fb8c 	bl	8004944 <USB_ReadInterrupts>
 800122c:	4603      	mov	r3, r0
 800122e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001236:	d138      	bne.n	80012aa <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f003 ffa7 	bl	8005190 <USB_HC_ReadInterrupt>
 8001242:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e025      	b.n	8001296 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d018      	beq.n	8001290 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	015a      	lsls	r2, r3, #5
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001274:	d106      	bne.n	8001284 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f8cf 	bl	8001420 <HCD_HC_IN_IRQHandler>
 8001282:	e005      	b.n	8001290 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fc5f 	bl	8001b4e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	d3d4      	bcc.n	800124a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fb48 	bl	8004944 <USB_ReadInterrupts>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d101      	bne.n	80012c2 <HAL_HCD_IRQHandler+0x1d6>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_HCD_IRQHandler+0x1d8>
 80012c2:	2300      	movs	r3, #0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d014      	beq.n	80012f2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0210 	bic.w	r2, r2, #16
 80012d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 ffad 	bl	8002238 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0210 	orr.w	r2, r2, #16
 80012ec:	619a      	str	r2, [r3, #24]
 80012ee:	e000      	b.n	80012f2 <HAL_HCD_IRQHandler+0x206>
      return;
 80012f0:	bf00      	nop
    }
  }
}
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_HCD_Start+0x16>
 800130a:	2302      	movs	r3, #2
 800130c:	e013      	b.n	8001336 <HAL_HCD_Start+0x3e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f003 fa1f 	bl	800475e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fc82 	bl	8004c30 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_HCD_Stop+0x16>
 8001350:	2302      	movs	r3, #2
 8001352:	e00d      	b.n	8001370 <HAL_HCD_Stop+0x32>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f004 f861 	bl	8005428 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fc29 	bl	8004bdc <USB_ResetPort>
 800138a:	4603      	mov	r3, r0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	335c      	adds	r3, #92	; 0x5c
 80013b0:	781b      	ldrb	r3, [r3, #0]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013ca:	78fa      	ldrb	r2, [r7, #3]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	334c      	adds	r3, #76	; 0x4c
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fc6b 	bl	8004cd0 <USB_GetCurrentFrame>
 80013fa:	4603      	mov	r3, r0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fc46 	bl	8004ca2 <USB_GetHostSpeed>
 8001416:	4603      	mov	r3, r0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b04      	cmp	r3, #4
 800144e:	d119      	bne.n	8001484 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	015a      	lsls	r2, r3, #5
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4413      	add	r3, r2
 8001458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145c:	461a      	mov	r2, r3
 800145e:	2304      	movs	r3, #4
 8001460:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4413      	add	r3, r2
 800146a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	0151      	lsls	r1, r2, #5
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	440a      	add	r2, r1
 8001478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	60d3      	str	r3, [r2, #12]
 8001482:	e095      	b.n	80015b0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4413      	add	r3, r2
 800148c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0320 	and.w	r3, r3, #32
 8001496:	2b20      	cmp	r3, #32
 8001498:	d109      	bne.n	80014ae <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	015a      	lsls	r2, r3, #5
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a6:	461a      	mov	r2, r3
 80014a8:	2320      	movs	r3, #32
 80014aa:	6093      	str	r3, [r2, #8]
 80014ac:	e080      	b.n	80015b0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	015a      	lsls	r2, r3, #5
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d134      	bne.n	800152e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	0151      	lsls	r1, r2, #5
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	440a      	add	r2, r1
 80014da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	335d      	adds	r3, #93	; 0x5d
 80014f4:	2205      	movs	r2, #5
 80014f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001504:	461a      	mov	r2, r3
 8001506:	2310      	movs	r3, #16
 8001508:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4413      	add	r3, r2
 8001512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001516:	461a      	mov	r2, r3
 8001518:	2308      	movs	r3, #8
 800151a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fe43 	bl	80051b2 <USB_HC_Halt>
 800152c:	e040      	b.n	80015b0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4413      	add	r3, r2
 8001536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d134      	bne.n	80015b0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4413      	add	r3, r2
 800154e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	0151      	lsls	r1, r2, #5
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	440a      	add	r2, r1
 800155c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fe1e 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4413      	add	r3, r2
 800157e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001582:	461a      	mov	r2, r3
 8001584:	2310      	movs	r3, #16
 8001586:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	335d      	adds	r3, #93	; 0x5d
 8001598:	2208      	movs	r2, #8
 800159a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a8:	461a      	mov	r2, r3
 80015aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ae:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c6:	d122      	bne.n	800160e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	0151      	lsls	r1, r2, #5
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	440a      	add	r2, r1
 80015de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fddd 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001604:	461a      	mov	r2, r3
 8001606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800160c:	e29b      	b.n	8001b46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b01      	cmp	r3, #1
 8001622:	f040 80c1 	bne.w	80017a8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01b      	beq.n	8001666 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3348      	adds	r3, #72	; 0x48
 800163e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	0159      	lsls	r1, r3, #5
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	440b      	add	r3, r1
 8001648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001652:	1ad1      	subs	r1, r2, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4403      	add	r3, r0
 8001662:	334c      	adds	r3, #76	; 0x4c
 8001664:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	335d      	adds	r3, #93	; 0x5d
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3358      	adds	r3, #88	; 0x58
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4413      	add	r3, r2
 8001696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169a:	461a      	mov	r2, r3
 800169c:	2301      	movs	r3, #1
 800169e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	333f      	adds	r3, #63	; 0x3f
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00a      	beq.n	80016cc <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	333f      	adds	r3, #63	; 0x3f
 80016c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d121      	bne.n	8001710 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	015a      	lsls	r2, r3, #5
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	0151      	lsls	r1, r2, #5
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	440a      	add	r2, r1
 80016e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fd5b 	bl	80051b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4413      	add	r3, r2
 8001704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001708:	461a      	mov	r2, r3
 800170a:	2310      	movs	r3, #16
 800170c:	6093      	str	r3, [r2, #8]
 800170e:	e034      	b.n	800177a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	333f      	adds	r3, #63	; 0x3f
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d129      	bne.n	800177a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4413      	add	r3, r2
 800172e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	0151      	lsls	r1, r2, #5
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	440a      	add	r2, r1
 800173c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001744:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	335c      	adds	r3, #92	; 0x5c
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	b2d8      	uxtb	r0, r3
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	335c      	adds	r3, #92	; 0x5c
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4601      	mov	r1, r0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f006 faa9 	bl	8007ccc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3350      	adds	r3, #80	; 0x50
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	f083 0301 	eor.w	r3, r3, #1
 8001790:	b2d8      	uxtb	r0, r3
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3350      	adds	r3, #80	; 0x50
 80017a2:	4602      	mov	r2, r0
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	e1ce      	b.n	8001b46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	f040 80f1 	bne.w	80019a2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	0151      	lsls	r1, r2, #5
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	440a      	add	r2, r1
 80017d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017da:	f023 0302 	bic.w	r3, r3, #2
 80017de:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	335d      	adds	r3, #93	; 0x5d
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10a      	bne.n	800180c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	335c      	adds	r3, #92	; 0x5c
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e0b0      	b.n	800196e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	335d      	adds	r3, #93	; 0x5d
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d10a      	bne.n	8001838 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	335c      	adds	r3, #92	; 0x5c
 8001832:	2205      	movs	r2, #5
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e09a      	b.n	800196e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	335d      	adds	r3, #93	; 0x5d
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b06      	cmp	r3, #6
 800184c:	d00a      	beq.n	8001864 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	335d      	adds	r3, #93	; 0x5d
 800185e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001860:	2b08      	cmp	r3, #8
 8001862:	d156      	bne.n	8001912 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	3358      	adds	r3, #88	; 0x58
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	1c59      	adds	r1, r3, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4403      	add	r3, r0
 8001886:	3358      	adds	r3, #88	; 0x58
 8001888:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3358      	adds	r3, #88	; 0x58
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d914      	bls.n	80018ca <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3358      	adds	r3, #88	; 0x58
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	335c      	adds	r3, #92	; 0x5c
 80018c4:	2204      	movs	r2, #4
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e009      	b.n	80018de <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	335c      	adds	r3, #92	; 0x5c
 80018da:	2202      	movs	r2, #2
 80018dc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018f4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018fc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4413      	add	r3, r2
 8001906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e02d      	b.n	800196e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	335d      	adds	r3, #93	; 0x5d
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d122      	bne.n	800196e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	335c      	adds	r3, #92	; 0x5c
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4413      	add	r3, r2
 8001944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001952:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800195a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4413      	add	r3, r2
 8001964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	461a      	mov	r2, r3
 800197c:	2302      	movs	r3, #2
 800197e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	b2d8      	uxtb	r0, r3
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	335c      	adds	r3, #92	; 0x5c
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4601      	mov	r1, r0
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f006 f996 	bl	8007ccc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019a0:	e0d1      	b.n	8001b46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b4:	2b80      	cmp	r3, #128	; 0x80
 80019b6:	d13e      	bne.n	8001a36 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	0151      	lsls	r1, r2, #5
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	440a      	add	r2, r1
 80019ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	3358      	adds	r3, #88	; 0x58
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4403      	add	r3, r0
 80019fa:	3358      	adds	r3, #88	; 0x58
 80019fc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	335d      	adds	r3, #93	; 0x5d
 8001a0e:	2206      	movs	r2, #6
 8001a10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fbc8 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	6093      	str	r3, [r2, #8]
}
 8001a34:	e087      	b.n	8001b46 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d17c      	bne.n	8001b46 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	333f      	adds	r3, #63	; 0x3f
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d122      	bne.n	8001aa8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3358      	adds	r3, #88	; 0x58
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	0151      	lsls	r1, r2, #5
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	440a      	add	r2, r1
 8001a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fb86 	bl	80051b2 <USB_HC_Halt>
 8001aa6:	e045      	b.n	8001b34 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	333f      	adds	r3, #63	; 0x3f
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	333f      	adds	r3, #63	; 0x3f
 8001ace:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d12f      	bne.n	8001b34 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3358      	adds	r3, #88	; 0x58
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d121      	bne.n	8001b34 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	440b      	add	r3, r1
 8001afe:	335d      	adds	r3, #93	; 0x5d
 8001b00:	2203      	movs	r2, #3
 8001b02:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	015a      	lsls	r2, r3, #5
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	0151      	lsls	r1, r2, #5
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	440a      	add	r2, r1
 8001b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fb3f 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b40:	461a      	mov	r2, r3
 8001b42:	2310      	movs	r3, #16
 8001b44:	6093      	str	r3, [r2, #8]
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d119      	bne.n	8001bb2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	0151      	lsls	r1, r2, #5
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	440a      	add	r2, r1
 8001ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001bb0:	e33e      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d141      	bne.n	8001c4c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	333d      	adds	r3, #61	; 0x3d
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f040 831f 	bne.w	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	333d      	adds	r3, #61	; 0x3d
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	335c      	adds	r3, #92	; 0x5c
 8001c16:	2202      	movs	r2, #2
 8001c18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	0151      	lsls	r1, r2, #5
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	440a      	add	r2, r1
 8001c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fab4 	bl	80051b2 <USB_HC_Halt>
}
 8001c4a:	e2f1      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d13f      	bne.n	8001ce2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	335d      	adds	r3, #93	; 0x5d
 8001c72:	2204      	movs	r2, #4
 8001c74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	333d      	adds	r3, #61	; 0x3d
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3358      	adds	r3, #88	; 0x58
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	0151      	lsls	r1, r2, #5
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	440a      	add	r2, r1
 8001cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fa72 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2340      	movs	r3, #64	; 0x40
 8001cde:	6093      	str	r3, [r2, #8]
}
 8001ce0:	e2a6      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf8:	d122      	bne.n	8001d40 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	0151      	lsls	r1, r2, #5
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	440a      	add	r2, r1
 8001d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fa44 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d36:	461a      	mov	r2, r3
 8001d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d3c:	6093      	str	r3, [r2, #8]
}
 8001d3e:	e277      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d135      	bne.n	8001dc2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	3358      	adds	r3, #88	; 0x58
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	0151      	lsls	r1, r2, #5
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fa0c 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	461a      	mov	r2, r3
 8001da8:	2301      	movs	r3, #1
 8001daa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	335d      	adds	r3, #93	; 0x5d
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
}
 8001dc0:	e236      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d12b      	bne.n	8001e30 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de4:	461a      	mov	r2, r3
 8001de6:	2308      	movs	r3, #8
 8001de8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	0151      	lsls	r1, r2, #5
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	440a      	add	r2, r1
 8001e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 f9cc 	bl	80051b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	335d      	adds	r3, #93	; 0x5d
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	701a      	strb	r2, [r3, #0]
}
 8001e2e:	e1ff      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d155      	bne.n	8001ef2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3358      	adds	r3, #88	; 0x58
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	335d      	adds	r3, #93	; 0x5d
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	333d      	adds	r3, #61	; 0x3d
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d114      	bne.n	8001eae <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	333c      	adds	r3, #60	; 0x3c
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	333d      	adds	r3, #61	; 0x3d
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	0151      	lsls	r1, r2, #5
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	440a      	add	r2, r1
 8001ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 f96a 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	461a      	mov	r2, r3
 8001eec:	2310      	movs	r3, #16
 8001eee:	6093      	str	r3, [r2, #8]
}
 8001ef0:	e19e      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d12b      	bne.n	8001f60 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	0151      	lsls	r1, r2, #5
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	440a      	add	r2, r1
 8001f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f93d 	bl	80051b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	335d      	adds	r3, #93	; 0x5d
 8001f48:	2206      	movs	r2, #6
 8001f4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	6093      	str	r3, [r2, #8]
}
 8001f5e:	e167      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f76:	d135      	bne.n	8001fe4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	0151      	lsls	r1, r2, #5
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	440a      	add	r2, r1
 8001f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 f905 	bl	80051b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	335d      	adds	r3, #93	; 0x5d
 8001fde:	2208      	movs	r2, #8
 8001fe0:	701a      	strb	r2, [r3, #0]
}
 8001fe2:	e125      	b.n	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	f040 811a 	bne.w	8002230 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	0151      	lsls	r1, r2, #5
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	440a      	add	r2, r1
 8002012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002016:	f023 0302 	bic.w	r3, r3, #2
 800201a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	335d      	adds	r3, #93	; 0x5d
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d137      	bne.n	80020a2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	335c      	adds	r3, #92	; 0x5c
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	333f      	adds	r3, #63	; 0x3f
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d00b      	beq.n	8002074 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	333f      	adds	r3, #63	; 0x3f
 800206c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800206e:	2b03      	cmp	r3, #3
 8002070:	f040 80c5 	bne.w	80021fe <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3351      	adds	r3, #81	; 0x51
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	3351      	adds	r3, #81	; 0x51
 800209c:	4602      	mov	r2, r0
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e0ad      	b.n	80021fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	335d      	adds	r3, #93	; 0x5d
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d10a      	bne.n	80020ce <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	335c      	adds	r3, #92	; 0x5c
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	e097      	b.n	80021fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	335d      	adds	r3, #93	; 0x5d
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d10a      	bne.n	80020fa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	335c      	adds	r3, #92	; 0x5c
 80020f4:	2202      	movs	r2, #2
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e081      	b.n	80021fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	335d      	adds	r3, #93	; 0x5d
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d10a      	bne.n	8002126 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	335c      	adds	r3, #92	; 0x5c
 8002120:	2205      	movs	r2, #5
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e06b      	b.n	80021fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	335d      	adds	r3, #93	; 0x5d
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d00a      	beq.n	8002152 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	335d      	adds	r3, #93	; 0x5d
 800214c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800214e:	2b08      	cmp	r3, #8
 8002150:	d155      	bne.n	80021fe <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	3358      	adds	r3, #88	; 0x58
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4403      	add	r3, r0
 8002174:	3358      	adds	r3, #88	; 0x58
 8002176:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3358      	adds	r3, #88	; 0x58
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d914      	bls.n	80021b8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3358      	adds	r3, #88	; 0x58
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	2204      	movs	r2, #4
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e009      	b.n	80021cc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	2302      	movs	r3, #2
 800220e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	b2d8      	uxtb	r0, r3
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	335c      	adds	r3, #92	; 0x5c
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	4601      	mov	r1, r0
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f005 fd4e 	bl	8007ccc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002230:	bf00      	nop
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0c5b      	lsrs	r3, r3, #17
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800226c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d003      	beq.n	800227c <HCD_RXQLVL_IRQHandler+0x44>
 8002274:	2b05      	cmp	r3, #5
 8002276:	f000 8082 	beq.w	800237e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800227a:	e083      	b.n	8002384 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d07f      	beq.n	8002382 <HCD_RXQLVL_IRQHandler+0x14a>
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3344      	adds	r3, #68	; 0x44
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d074      	beq.n	8002382 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3344      	adds	r3, #68	; 0x44
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	b292      	uxth	r2, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f002 fb1d 	bl	80048f2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	3344      	adds	r3, #68	; 0x44
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	18d1      	adds	r1, r2, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4403      	add	r3, r0
 80022dc:	3344      	adds	r3, #68	; 0x44
 80022de:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	334c      	adds	r3, #76	; 0x4c
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	18d1      	adds	r1, r2, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4403      	add	r3, r0
 8002304:	334c      	adds	r3, #76	; 0x4c
 8002306:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HCD_RXQLVL_IRQHandler+0x154>)
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d031      	beq.n	8002382 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002334:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800233c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	3350      	adds	r3, #80	; 0x50
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2d8      	uxtb	r0, r3
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	3350      	adds	r3, #80	; 0x50
 8002378:	4602      	mov	r2, r0
 800237a:	701a      	strb	r2, [r3, #0]
      break;
 800237c:	e001      	b.n	8002382 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800237e:	bf00      	nop
 8002380:	e000      	b.n	8002384 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002382:	bf00      	nop
  }
}
 8002384:	bf00      	nop
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	1ff80000 	.word	0x1ff80000

08002390 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d113      	bne.n	80023f0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10a      	bne.n	80023e8 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023e0:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f005 fc56 	bl	8007c94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d147      	bne.n	800248a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b04      	cmp	r3, #4
 800240a:	d129      	bne.n	8002460 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d113      	bne.n	800243c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800241a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800241e:	d106      	bne.n	800242e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2102      	movs	r1, #2
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fb9e 	bl	8004b68 <USB_InitFSLSPClkSel>
 800242c:	e011      	b.n	8002452 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f002 fb97 	bl	8004b68 <USB_InitFSLSPClkSel>
 800243a:	e00a      	b.n	8002452 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244a:	461a      	mov	r2, r3
 800244c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002450:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f005 fc48 	bl	8007ce8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f005 fc1b 	bl	8007c94 <HAL_HCD_Connect_Callback>
 800245e:	e014      	b.n	800248a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f005 fc4f 	bl	8007d04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002474:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002478:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002488:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	d103      	bne.n	800249c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e10f      	b.n	80026e2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f005 f918 	bl	800770c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2224      	movs	r2, #36	; 0x24
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024f4:	f001 f9ac 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80024f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a7b      	ldr	r2, [pc, #492]	; (80026ec <HAL_I2C_Init+0x23c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d807      	bhi.n	8002514 <HAL_I2C_Init+0x64>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a7a      	ldr	r2, [pc, #488]	; (80026f0 <HAL_I2C_Init+0x240>)
 8002508:	4293      	cmp	r3, r2
 800250a:	bf94      	ite	ls
 800250c:	2301      	movls	r3, #1
 800250e:	2300      	movhi	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e006      	b.n	8002522 <HAL_I2C_Init+0x72>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a77      	ldr	r2, [pc, #476]	; (80026f4 <HAL_I2C_Init+0x244>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0db      	b.n	80026e2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a72      	ldr	r2, [pc, #456]	; (80026f8 <HAL_I2C_Init+0x248>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9b      	lsrs	r3, r3, #18
 8002534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a64      	ldr	r2, [pc, #400]	; (80026ec <HAL_I2C_Init+0x23c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d802      	bhi.n	8002564 <HAL_I2C_Init+0xb4>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	e009      	b.n	8002578 <HAL_I2C_Init+0xc8>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	4a63      	ldr	r2, [pc, #396]	; (80026fc <HAL_I2C_Init+0x24c>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	3301      	adds	r3, #1
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800258a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4956      	ldr	r1, [pc, #344]	; (80026ec <HAL_I2C_Init+0x23c>)
 8002594:	428b      	cmp	r3, r1
 8002596:	d80d      	bhi.n	80025b4 <HAL_I2C_Init+0x104>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e59      	subs	r1, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	bf38      	it	cc
 80025b0:	2304      	movcc	r3, #4
 80025b2:	e04f      	b.n	8002654 <HAL_I2C_Init+0x1a4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <HAL_I2C_Init+0x130>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e012      	b.n	8002606 <HAL_I2C_Init+0x156>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e58      	subs	r0, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	0099      	lsls	r1, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Init+0x15e>
 800260a:	2301      	movs	r3, #1
 800260c:	e022      	b.n	8002654 <HAL_I2C_Init+0x1a4>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10e      	bne.n	8002634 <HAL_I2C_Init+0x184>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e58      	subs	r0, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	440b      	add	r3, r1
 8002624:	fbb0 f3f3 	udiv	r3, r0, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002632:	e00f      	b.n	8002654 <HAL_I2C_Init+0x1a4>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	0099      	lsls	r1, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6809      	ldr	r1, [r1, #0]
 8002658:	4313      	orrs	r3, r2
 800265a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6911      	ldr	r1, [r2, #16]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430b      	orrs	r3, r1
 8002696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	000186a0 	.word	0x000186a0
 80026f0:	001e847f 	.word	0x001e847f
 80026f4:	003d08ff 	.word	0x003d08ff
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e128      	b.n	8002964 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a90      	ldr	r2, [pc, #576]	; (800296c <HAL_I2S_Init+0x26c>)
 800272a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f005 f835 	bl	800779c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002748:	f023 030f 	bic.w	r3, r3, #15
 800274c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2202      	movs	r2, #2
 8002754:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d060      	beq.n	8002820 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002766:	2310      	movs	r3, #16
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e001      	b.n	8002770 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b20      	cmp	r3, #32
 8002776:	d802      	bhi.n	800277e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800277e:	2001      	movs	r0, #1
 8002780:	f001 f95c 	bl	8003a3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002784:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278e:	d125      	bne.n	80027dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d010      	beq.n	80027ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	3305      	adds	r3, #5
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	e01f      	b.n	80027fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	3305      	adds	r3, #5
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e00e      	b.n	80027fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	3305      	adds	r3, #5
 80027f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4a5c      	ldr	r2, [pc, #368]	; (8002970 <HAL_I2S_Init+0x270>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	08db      	lsrs	r3, r3, #3
 8002804:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002820:	2302      	movs	r3, #2
 8002822:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d902      	bls.n	8002834 <HAL_I2S_Init+0x134>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2bff      	cmp	r3, #255	; 0xff
 8002832:	d907      	bls.n	8002844 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0210 	orr.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e08f      	b.n	8002964 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	ea42 0103 	orr.w	r1, r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	430a      	orrs	r2, r1
 8002856:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002862:	f023 030f 	bic.w	r3, r3, #15
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6851      	ldr	r1, [r2, #4]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6892      	ldr	r2, [r2, #8]
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68d2      	ldr	r2, [r2, #12]
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6992      	ldr	r2, [r2, #24]
 800287a:	430a      	orrs	r2, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002886:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d161      	bne.n	8002954 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a38      	ldr	r2, [pc, #224]	; (8002974 <HAL_I2S_Init+0x274>)
 8002894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a37      	ldr	r2, [pc, #220]	; (8002978 <HAL_I2S_Init+0x278>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_I2S_Init+0x1a4>
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_I2S_Init+0x27c>)
 80028a2:	e001      	b.n	80028a8 <HAL_I2S_Init+0x1a8>
 80028a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4932      	ldr	r1, [pc, #200]	; (8002978 <HAL_I2S_Init+0x278>)
 80028b0:	428a      	cmp	r2, r1
 80028b2:	d101      	bne.n	80028b8 <HAL_I2S_Init+0x1b8>
 80028b4:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_I2S_Init+0x27c>)
 80028b6:	e001      	b.n	80028bc <HAL_I2S_Init+0x1bc>
 80028b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <HAL_I2S_Init+0x278>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_I2S_Init+0x1d4>
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_I2S_Init+0x27c>)
 80028d2:	e001      	b.n	80028d8 <HAL_I2S_Init+0x1d8>
 80028d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d8:	2202      	movs	r2, #2
 80028da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_I2S_Init+0x278>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_I2S_Init+0x1ea>
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_I2S_Init+0x27c>)
 80028e8:	e001      	b.n	80028ee <HAL_I2S_Init+0x1ee>
 80028ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fa:	d003      	beq.n	8002904 <HAL_I2S_Init+0x204>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	e001      	b.n	8002910 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	b299      	uxth	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002926:	4303      	orrs	r3, r0
 8002928:	b29b      	uxth	r3, r3
 800292a:	430b      	orrs	r3, r1
 800292c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800292e:	4313      	orrs	r3, r2
 8002930:	b29a      	uxth	r2, r3
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	4313      	orrs	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800293c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_I2S_Init+0x278>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_I2S_Init+0x24c>
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_I2S_Init+0x27c>)
 800294a:	e001      	b.n	8002950 <HAL_I2S_Init+0x250>
 800294c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002950:	897a      	ldrh	r2, [r7, #10]
 8002952:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	08002a77 	.word	0x08002a77
 8002970:	cccccccd 	.word	0xcccccccd
 8002974:	08002b8d 	.word	0x08002b8d
 8002978:	40003800 	.word	0x40003800
 800297c:	40003400 	.word	0x40003400

08002980 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10e      	bne.n	8002a10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffb8 	bl	8002980 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10e      	bne.n	8002a6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff93 	bl	8002994 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d13a      	bne.n	8002b08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d109      	bne.n	8002ab0 <I2S_IRQHandler+0x3a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d102      	bne.n	8002ab0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffb4 	bl	8002a18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d126      	bne.n	8002b08 <I2S_IRQHandler+0x92>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d11f      	bne.n	8002b08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ad6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0202 	orr.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff50 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d136      	bne.n	8002b82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d109      	bne.n	8002b32 <I2S_IRQHandler+0xbc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d102      	bne.n	8002b32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff45 	bl	80029bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d122      	bne.n	8002b82 <I2S_IRQHandler+0x10c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d11b      	bne.n	8002b82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff13 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4aa2      	ldr	r2, [pc, #648]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002ba6:	4ba2      	ldr	r3, [pc, #648]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ba8:	e001      	b.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002baa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a9b      	ldr	r2, [pc, #620]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bc4:	4b9a      	ldr	r3, [pc, #616]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bc6:	e001      	b.n	8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd8:	d004      	beq.n	8002be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8099 	bne.w	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f925 	bl	8002e48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9c8 	bl	8002fa8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d13a      	bne.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d035      	beq.n	8002c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7e      	ldr	r2, [pc, #504]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c36:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c38:	e001      	b.n	8002c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4979      	ldr	r1, [pc, #484]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c46:	428b      	cmp	r3, r1
 8002c48:	d101      	bne.n	8002c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c4a:	4b79      	ldr	r3, [pc, #484]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c4c:	e001      	b.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fe88 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	f040 80be 	bne.w	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80b8 	beq.w	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a59      	ldr	r2, [pc, #356]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cca:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ccc:	e001      	b.n	8002cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4954      	ldr	r1, [pc, #336]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ce0:	e001      	b.n	8002ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ce6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f043 0204 	orr.w	r2, r3, #4
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fe4a 	bl	80029a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d14:	e084      	b.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d107      	bne.n	8002d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8be 	bl	8002eac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8fd 	bl	8002f44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d12f      	bne.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02a      	beq.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d6c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d7a:	e001      	b.n	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4929      	ldr	r1, [pc, #164]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	d101      	bne.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d8e:	e001      	b.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f043 0202 	orr.w	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fdfa 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d131      	bne.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02c      	beq.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dd4:	e001      	b.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4912      	ldr	r1, [pc, #72]	; (8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002de2:	428b      	cmp	r3, r1
 8002de4:	d101      	bne.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002de8:	e001      	b.n	8002dee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e02:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fdc5 	bl	80029a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e1e:	e000      	b.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e20:	bf00      	nop
}
 8002e22:	bf00      	nop
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40003800 	.word	0x40003800
 8002e30:	40003400 	.word	0x40003400

08002e34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c99      	adds	r1, r3, #2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6251      	str	r1, [r2, #36]	; 0x24
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ffc9 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c99      	adds	r1, r3, #2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6251      	str	r1, [r2, #36]	; 0x24
 8002ebe:	8819      	ldrh	r1, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <I2SEx_TxISR_I2SExt+0x90>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <I2SEx_TxISR_I2SExt+0x22>
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <I2SEx_TxISR_I2SExt+0x94>)
 8002ecc:	e001      	b.n	8002ed2 <I2SEx_TxISR_I2SExt+0x26>
 8002ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <I2SEx_TxISR_I2SExt+0x90>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <I2SEx_TxISR_I2SExt+0x50>
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <I2SEx_TxISR_I2SExt+0x94>)
 8002efa:	e001      	b.n	8002f00 <I2SEx_TxISR_I2SExt+0x54>
 8002efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	490d      	ldr	r1, [pc, #52]	; (8002f3c <I2SEx_TxISR_I2SExt+0x90>)
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d101      	bne.n	8002f10 <I2SEx_TxISR_I2SExt+0x64>
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <I2SEx_TxISR_I2SExt+0x94>)
 8002f0e:	e001      	b.n	8002f14 <I2SEx_TxISR_I2SExt+0x68>
 8002f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff81 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40003800 	.word	0x40003800
 8002f40:	40003400 	.word	0x40003400

08002f44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68d8      	ldr	r0, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	1c99      	adds	r1, r3, #2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f5c:	b282      	uxth	r2, r0
 8002f5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d113      	bne.n	8002fa0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ff4a 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	; (8003038 <I2SEx_RxISR_I2SExt+0x90>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d101      	bne.n	8002fbe <I2SEx_RxISR_I2SExt+0x16>
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <I2SEx_RxISR_I2SExt+0x94>)
 8002fbc:	e001      	b.n	8002fc2 <I2SEx_RxISR_I2SExt+0x1a>
 8002fbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc2:	68d8      	ldr	r0, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	1c99      	adds	r1, r3, #2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fce:	b282      	uxth	r2, r0
 8002fd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d121      	bne.n	800302e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <I2SEx_RxISR_I2SExt+0x90>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <I2SEx_RxISR_I2SExt+0x50>
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <I2SEx_RxISR_I2SExt+0x94>)
 8002ff6:	e001      	b.n	8002ffc <I2SEx_RxISR_I2SExt+0x54>
 8002ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	490d      	ldr	r1, [pc, #52]	; (8003038 <I2SEx_RxISR_I2SExt+0x90>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d101      	bne.n	800300c <I2SEx_RxISR_I2SExt+0x64>
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <I2SEx_RxISR_I2SExt+0x94>)
 800300a:	e001      	b.n	8003010 <I2SEx_RxISR_I2SExt+0x68>
 800300c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003010:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003014:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff03 	bl	8002e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40003800 	.word	0x40003800
 800303c:	40003400 	.word	0x40003400

08003040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e22d      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d075      	beq.n	800314a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305e:	4ba3      	ldr	r3, [pc, #652]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00c      	beq.n	8003084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4ba0      	ldr	r3, [pc, #640]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003072:	2b08      	cmp	r3, #8
 8003074:	d112      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4b9d      	ldr	r3, [pc, #628]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003082:	d10b      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	4b99      	ldr	r3, [pc, #612]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05b      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d157      	bne.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e208      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x74>
 80030a6:	4b91      	ldr	r3, [pc, #580]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a90      	ldr	r2, [pc, #576]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b8b      	ldr	r3, [pc, #556]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a8a      	ldr	r2, [pc, #552]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a87      	ldr	r2, [pc, #540]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030d8:	4b84      	ldr	r3, [pc, #528]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a83      	ldr	r2, [pc, #524]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b81      	ldr	r3, [pc, #516]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a80      	ldr	r2, [pc, #512]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd fa4c 	bl	8000594 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7fd fa48 	bl	8000594 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1cd      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b76      	ldr	r3, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xc0>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fd fa38 	bl	8000594 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7fd fa34 	bl	8000594 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1b9      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d063      	beq.n	800321e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003156:	4b65      	ldr	r3, [pc, #404]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b62      	ldr	r3, [pc, #392]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e18d      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b56      	ldr	r3, [pc, #344]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4952      	ldr	r1, [pc, #328]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <HAL_RCC_OscConfig+0x2b0>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fd f9ed 	bl	8000594 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031be:	f7fd f9e9 	bl	8000594 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e16e      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b43      	ldr	r3, [pc, #268]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4940      	ldr	r1, [pc, #256]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <HAL_RCC_OscConfig+0x2b0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fd f9cc 	bl	8000594 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003200:	f7fd f9c8 	bl	8000594 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e14d      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d030      	beq.n	800328c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <HAL_RCC_OscConfig+0x2b4>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fd f9ac 	bl	8000594 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003240:	f7fd f9a8 	bl	8000594 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e12d      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x200>
 800325e:	e015      	b.n	800328c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x2b4>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fd f995 	bl	8000594 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7fd f991 	bl	8000594 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e116      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a0 	beq.w	80033da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_OscConfig+0x2b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d121      	bne.n	800331a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCC_OscConfig+0x2b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <HAL_RCC_OscConfig+0x2b8>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fd f957 	bl	8000594 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e011      	b.n	800330e <HAL_RCC_OscConfig+0x2ce>
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	42470000 	.word	0x42470000
 80032f4:	42470e80 	.word	0x42470e80
 80032f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fc:	f7fd f94a 	bl	8000594 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e0cf      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x2f0>
 8003322:	4b66      	ldr	r3, [pc, #408]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a65      	ldr	r2, [pc, #404]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
 800332e:	e01c      	b.n	800336a <HAL_RCC_OscConfig+0x32a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x312>
 8003338:	4b60      	ldr	r3, [pc, #384]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a5f      	ldr	r2, [pc, #380]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
 8003344:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a5c      	ldr	r2, [pc, #368]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x32a>
 8003352:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	4a59      	ldr	r2, [pc, #356]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6713      	str	r3, [r2, #112]	; 0x70
 800335e:	4b57      	ldr	r3, [pc, #348]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d015      	beq.n	800339e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fd f90f 	bl	8000594 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd f90b 	bl	8000594 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e08e      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ee      	beq.n	800337a <HAL_RCC_OscConfig+0x33a>
 800339c:	e014      	b.n	80033c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fd f8f9 	bl	8000594 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fd f8f5 	bl	8000594 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e078      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ee      	bne.n	80033a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a3a      	ldr	r2, [pc, #232]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d064      	beq.n	80034ac <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d05c      	beq.n	80034a8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d141      	bne.n	800347a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCC_OscConfig+0x480>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd f8ca 	bl	8000594 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd f8c6 	bl	8000594 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e04b      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	019b      	lsls	r3, r3, #6
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	491d      	ldr	r1, [pc, #116]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_RCC_OscConfig+0x480>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fd f89f 	bl	8000594 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345a:	f7fd f89b 	bl	8000594 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e020      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x41a>
 8003478:	e018      	b.n	80034ac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x480>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd f888 	bl	8000594 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003488:	f7fd f884 	bl	8000594 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e009      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_RCC_OscConfig+0x47c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x448>
 80034a6:	e001      	b.n	80034ac <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40007000 	.word	0x40007000
 80034bc:	40023800 	.word	0x40023800
 80034c0:	42470060 	.word	0x42470060

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0ca      	b.n	800366e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b67      	ldr	r3, [pc, #412]	; (8003678 <HAL_RCC_ClockConfig+0x1b4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d90c      	bls.n	8003500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b64      	ldr	r3, [pc, #400]	; (8003678 <HAL_RCC_ClockConfig+0x1b4>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b62      	ldr	r3, [pc, #392]	; (8003678 <HAL_RCC_ClockConfig+0x1b4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b6      	b.n	800366e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b52      	ldr	r3, [pc, #328]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a51      	ldr	r2, [pc, #324]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b4f      	ldr	r3, [pc, #316]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494c      	ldr	r1, [pc, #304]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d044      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07d      	b.n	800366e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d003      	beq.n	8003582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	2b03      	cmp	r3, #3
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b3e      	ldr	r3, [pc, #248]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06d      	b.n	800366e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e065      	b.n	800366e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4933      	ldr	r1, [pc, #204]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fc ffee 	bl	8000594 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fc ffea 	bl	8000594 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04d      	b.n	800366e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_RCC_ClockConfig+0x1b4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d20c      	bcs.n	800360c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <HAL_RCC_ClockConfig+0x1b4>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_RCC_ClockConfig+0x1b4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e030      	b.n	800366e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4915      	ldr	r1, [pc, #84]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490d      	ldr	r1, [pc, #52]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f81d 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 800364e:	4601      	mov	r1, r0
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	5cd3      	ldrb	r3, [r2, r3]
 800365e:	fa21 f303 	lsr.w	r3, r1, r3
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003666:	2000      	movs	r0, #0
 8003668:	f7fc ff50 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00
 800367c:	40023800 	.word	0x40023800
 8003680:	08008370 	.word	0x08008370
 8003684:	20000028 	.word	0x20000028

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d007      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x32>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d008      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x38>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 80b4 	bne.w	800381c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036b6:	60bb      	str	r3, [r7, #8]
       break;
 80036b8:	e0b3      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ba:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036bc:	60bb      	str	r3, [r7, #8]
      break;
 80036be:	e0b0      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c0:	4b5a      	ldr	r3, [pc, #360]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ca:	4b58      	ldr	r3, [pc, #352]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d04a      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d6:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	099b      	lsrs	r3, r3, #6
 80036dc:	f04f 0400 	mov.w	r4, #0
 80036e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	ea03 0501 	and.w	r5, r3, r1
 80036ec:	ea04 0602 	and.w	r6, r4, r2
 80036f0:	4629      	mov	r1, r5
 80036f2:	4632      	mov	r2, r6
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	0154      	lsls	r4, r2, #5
 80036fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003702:	014b      	lsls	r3, r1, #5
 8003704:	4619      	mov	r1, r3
 8003706:	4622      	mov	r2, r4
 8003708:	1b49      	subs	r1, r1, r5
 800370a:	eb62 0206 	sbc.w	r2, r2, r6
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	0194      	lsls	r4, r2, #6
 8003718:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800371c:	018b      	lsls	r3, r1, #6
 800371e:	1a5b      	subs	r3, r3, r1
 8003720:	eb64 0402 	sbc.w	r4, r4, r2
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	00e2      	lsls	r2, r4, #3
 800372e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003732:	00d9      	lsls	r1, r3, #3
 8003734:	460b      	mov	r3, r1
 8003736:	4614      	mov	r4, r2
 8003738:	195b      	adds	r3, r3, r5
 800373a:	eb44 0406 	adc.w	r4, r4, r6
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	0262      	lsls	r2, r4, #9
 8003748:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800374c:	0259      	lsls	r1, r3, #9
 800374e:	460b      	mov	r3, r1
 8003750:	4614      	mov	r4, r2
 8003752:	4618      	mov	r0, r3
 8003754:	4621      	mov	r1, r4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	f7fc fd32 	bl	80001c8 <__aeabi_uldivmod>
 8003764:	4603      	mov	r3, r0
 8003766:	460c      	mov	r4, r1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e049      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b2f      	ldr	r3, [pc, #188]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	f240 11ff 	movw	r1, #511	; 0x1ff
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	ea03 0501 	and.w	r5, r3, r1
 8003782:	ea04 0602 	and.w	r6, r4, r2
 8003786:	4629      	mov	r1, r5
 8003788:	4632      	mov	r2, r6
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	0154      	lsls	r4, r2, #5
 8003794:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003798:	014b      	lsls	r3, r1, #5
 800379a:	4619      	mov	r1, r3
 800379c:	4622      	mov	r2, r4
 800379e:	1b49      	subs	r1, r1, r5
 80037a0:	eb62 0206 	sbc.w	r2, r2, r6
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	0194      	lsls	r4, r2, #6
 80037ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	eb64 0402 	sbc.w	r4, r4, r2
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	00e2      	lsls	r2, r4, #3
 80037c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037c8:	00d9      	lsls	r1, r3, #3
 80037ca:	460b      	mov	r3, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	195b      	adds	r3, r3, r5
 80037d0:	eb44 0406 	adc.w	r4, r4, r6
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	02a2      	lsls	r2, r4, #10
 80037de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037e2:	0299      	lsls	r1, r3, #10
 80037e4:	460b      	mov	r3, r1
 80037e6:	4614      	mov	r4, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	4621      	mov	r1, r4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	461a      	mov	r2, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	f7fc fce7 	bl	80001c8 <__aeabi_uldivmod>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800381e:	60bb      	str	r3, [r7, #8]
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	68bb      	ldr	r3, [r7, #8]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000028 	.word	0x20000028

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4601      	mov	r1, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4a03      	ldr	r2, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08008380 	.word	0x08008380

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d035      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038a0:	4b62      	ldr	r3, [pc, #392]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038a6:	f7fc fe75 	bl	8000594 <HAL_GetTick>
 80038aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ae:	f7fc fe71 	bl	8000594 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0b0      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c0:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	019a      	lsls	r2, r3, #6
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	071b      	lsls	r3, r3, #28
 80038d8:	4955      	ldr	r1, [pc, #340]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038e0:	4b52      	ldr	r3, [pc, #328]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038e6:	f7fc fe55 	bl	8000594 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ee:	f7fc fe51 	bl	8000594 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e090      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003900:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8083 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a43      	ldr	r2, [pc, #268]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3e      	ldr	r2, [pc, #248]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003942:	f7fc fe27 	bl	8000594 <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fc fe23 	bl	8000594 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e062      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800395c:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003968:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02f      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	429a      	cmp	r2, r3
 8003984:	d028      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003996:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039a2:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d114      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fc fdf1 	bl	8000594 <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fc fded 	bl	8000594 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e02a      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ee      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e4:	d10d      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	490d      	ldr	r1, [pc, #52]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
 8003a00:	e005      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a0c:	6093      	str	r3, [r2, #8]
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	4905      	ldr	r1, [pc, #20]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	42470068 	.word	0x42470068
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40007000 	.word	0x40007000
 8003a38:	42470e40 	.word	0x42470e40

08003a3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d13d      	bne.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a62:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d12f      	bne.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a70:	617b      	str	r3, [r7, #20]
          break;
 8003a72:	e02f      	b.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a80:	d108      	bne.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a82:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8a:	4a18      	ldr	r2, [pc, #96]	; (8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	e007      	b.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aaa:	099b      	lsrs	r3, r3, #6
 8003aac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abe:	0f1b      	lsrs	r3, r3, #28
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	617b      	str	r3, [r7, #20]
          break;
 8003acc:	e002      	b.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
          break;
 8003ad2:	bf00      	nop
        }
      }
      break;
 8003ad4:	bf00      	nop
    }
  }
  return frequency;
 8003ad6:	697b      	ldr	r3, [r7, #20]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	00bb8000 	.word	0x00bb8000
 8003aec:	007a1200 	.word	0x007a1200
 8003af0:	00f42400 	.word	0x00f42400

08003af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e056      	b.n	8003bb4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f003 fea3 	bl	800786c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	ea42 0103 	orr.w	r1, r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	f003 0104 	and.w	r1, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e01d      	b.n	8003c0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f003 fe8a 	bl	80078fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f000 f9fa 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e01d      	b.n	8003c60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f815 	bl	8003c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 f9cf 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fc9a 	bl	80045c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <HAL_TIM_PWM_Start+0x74>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0x2c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <HAL_TIM_PWM_Start+0x78>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_PWM_Start+0x30>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_TIM_PWM_Start+0x32>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d007      	beq.n	8003ce4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0b4      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	f200 809f 	bhi.w	8003e68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d65 	.word	0x08003d65
 8003d34:	08003e69 	.word	0x08003e69
 8003d38:	08003e69 	.word	0x08003e69
 8003d3c:	08003e69 	.word	0x08003e69
 8003d40:	08003da5 	.word	0x08003da5
 8003d44:	08003e69 	.word	0x08003e69
 8003d48:	08003e69 	.word	0x08003e69
 8003d4c:	08003e69 	.word	0x08003e69
 8003d50:	08003de7 	.word	0x08003de7
 8003d54:	08003e69 	.word	0x08003e69
 8003d58:	08003e69 	.word	0x08003e69
 8003d5c:	08003e69 	.word	0x08003e69
 8003d60:	08003e27 	.word	0x08003e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f9e2 	bl	8004134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0208 	orr.w	r2, r2, #8
 8003d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0204 	bic.w	r2, r2, #4
 8003d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6999      	ldr	r1, [r3, #24]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	619a      	str	r2, [r3, #24]
      break;
 8003da2:	e062      	b.n	8003e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fa32 	bl	8004214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6999      	ldr	r1, [r3, #24]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	021a      	lsls	r2, r3, #8
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	619a      	str	r2, [r3, #24]
      break;
 8003de4:	e041      	b.n	8003e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fa87 	bl	8004300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0208 	orr.w	r2, r2, #8
 8003e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0204 	bic.w	r2, r2, #4
 8003e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69d9      	ldr	r1, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	61da      	str	r2, [r3, #28]
      break;
 8003e24:	e021      	b.n	8003e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fadb 	bl	80043e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69d9      	ldr	r1, [r3, #28]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	021a      	lsls	r2, r3, #8
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	61da      	str	r2, [r3, #28]
      break;
 8003e66:	e000      	b.n	8003e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_TIM_ConfigClockSource+0x18>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e0a6      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x166>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ec2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d067      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x120>
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d80b      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x6c>
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d073      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x140>
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d802      	bhi.n	8003ee6 <HAL_TIM_ConfigClockSource+0x62>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d06f      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ee4:	e078      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d06c      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x140>
 8003eea:	2b30      	cmp	r3, #48	; 0x30
 8003eec:	d06a      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003eee:	e073      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ef0:	2b70      	cmp	r3, #112	; 0x70
 8003ef2:	d00d      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0x8c>
 8003ef4:	2b70      	cmp	r3, #112	; 0x70
 8003ef6:	d804      	bhi.n	8003f02 <HAL_TIM_ConfigClockSource+0x7e>
 8003ef8:	2b50      	cmp	r3, #80	; 0x50
 8003efa:	d033      	beq.n	8003f64 <HAL_TIM_ConfigClockSource+0xe0>
 8003efc:	2b60      	cmp	r3, #96	; 0x60
 8003efe:	d041      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f00:	e06a      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f06:	d066      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x152>
 8003f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0c:	d017      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f0e:	e063      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f000 fb32 	bl	8004588 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	609a      	str	r2, [r3, #8]
      break;
 8003f3c:	e04c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f000 fb1b 	bl	8004588 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f60:	609a      	str	r2, [r3, #8]
      break;
 8003f62:	e039      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	461a      	mov	r2, r3
 8003f72:	f000 fa8f 	bl	8004494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2150      	movs	r1, #80	; 0x50
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fae8 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 8003f82:	e029      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f000 faae 	bl	80044f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2160      	movs	r1, #96	; 0x60
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fad8 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e019      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f000 fa6f 	bl	8004494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fac8 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 8003fc2:	e009      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f000 fabf 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 8003fd4:	e000      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a40      	ldr	r2, [pc, #256]	; (8004108 <TIM_Base_SetConfig+0x114>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d00f      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3d      	ldr	r2, [pc, #244]	; (800410c <TIM_Base_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <TIM_Base_SetConfig+0x120>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2f      	ldr	r2, [pc, #188]	; (8004108 <TIM_Base_SetConfig+0x114>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d027      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	; (800410c <TIM_Base_SetConfig+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d023      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <TIM_Base_SetConfig+0x120>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d017      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <TIM_Base_SetConfig+0x128>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <TIM_Base_SetConfig+0x12c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_Base_SetConfig+0x130>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <TIM_Base_SetConfig+0x134>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <TIM_Base_SetConfig+0x138>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a23      	ldr	r2, [pc, #140]	; (8004130 <TIM_Base_SetConfig+0x13c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <TIM_Base_SetConfig+0x114>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40010400 	.word	0x40010400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	40001800 	.word	0x40001800
 800412c:	40001c00 	.word	0x40001c00
 8004130:	40002000 	.word	0x40002000

08004134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 0302 	bic.w	r3, r3, #2
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <TIM_OC1_SetConfig+0xd8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_OC1_SetConfig+0x64>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <TIM_OC1_SetConfig+0xdc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d10c      	bne.n	80041b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0308 	bic.w	r3, r3, #8
 800419e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <TIM_OC1_SetConfig+0xd8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_OC1_SetConfig+0x8e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <TIM_OC1_SetConfig+0xdc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d111      	bne.n	80041e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40010000 	.word	0x40010000
 8004210:	40010400 	.word	0x40010400

08004214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f023 0210 	bic.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0320 	bic.w	r3, r3, #32
 800425e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <TIM_OC2_SetConfig+0xe4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC2_SetConfig+0x68>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a21      	ldr	r2, [pc, #132]	; (80042fc <TIM_OC2_SetConfig+0xe8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d10d      	bne.n	8004298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <TIM_OC2_SetConfig+0xe4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC2_SetConfig+0x94>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a16      	ldr	r2, [pc, #88]	; (80042fc <TIM_OC2_SetConfig+0xe8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d113      	bne.n	80042d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40010400 	.word	0x40010400

08004300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <TIM_OC3_SetConfig+0xe0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_OC3_SetConfig+0x66>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <TIM_OC3_SetConfig+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10d      	bne.n	8004382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800436c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <TIM_OC3_SetConfig+0xe0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC3_SetConfig+0x92>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <TIM_OC3_SetConfig+0xe4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d113      	bne.n	80043ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40010400 	.word	0x40010400

080043e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	031b      	lsls	r3, r3, #12
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <TIM_OC4_SetConfig+0xa4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_OC4_SetConfig+0x68>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a11      	ldr	r2, [pc, #68]	; (8004490 <TIM_OC4_SetConfig+0xa8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d109      	bne.n	8004464 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40010400 	.word	0x40010400

08004494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 030a 	bic.w	r3, r3, #10
 80044d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0210 	bic.w	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800451c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	031b      	lsls	r3, r3, #12
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800452e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	f043 0307 	orr.w	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	021a      	lsls	r2, r3, #8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2201      	movs	r2, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	401a      	ands	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	431a      	orrs	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004626:	2302      	movs	r3, #2
 8004628:	e032      	b.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004662:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800469c:	b084      	sub	sp, #16
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	f107 001c 	add.w	r0, r7, #28
 80046aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d122      	bne.n	80046fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f94a 	bl	8004988 <USB_CoreReset>
 80046f4:	4603      	mov	r3, r0
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e01a      	b.n	8004730 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f93e 	bl	8004988 <USB_CoreReset>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
 8004722:	e005      	b.n	8004730 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10b      	bne.n	800474e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f043 0206 	orr.w	r2, r3, #6
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800475a:	b004      	add	sp, #16
 800475c:	4770      	bx	lr

0800475e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f043 0201 	orr.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 0201 	bic.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	e00b      	b.n	80047e6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047ce:	78fb      	ldrb	r3, [r7, #3]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]
 80047e0:	e001      	b.n	80047e6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e003      	b.n	80047ee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047e6:	2032      	movs	r0, #50	; 0x32
 80047e8:	f7fb fee0 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3301      	adds	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a09      	ldr	r2, [pc, #36]	; (8004840 <USB_FlushTxFifo+0x48>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e006      	b.n	8004832 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b20      	cmp	r3, #32
 800482e:	d0f0      	beq.n	8004812 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	00030d40 	.word	0x00030d40

08004844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2210      	movs	r2, #16
 8004854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <USB_FlushRxFifo+0x40>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b10      	cmp	r3, #16
 8004872:	d0f0      	beq.n	8004856 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	00030d40 	.word	0x00030d40

08004888 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	4611      	mov	r1, r2
 8004894:	461a      	mov	r2, r3
 8004896:	460b      	mov	r3, r1
 8004898:	71fb      	strb	r3, [r7, #7]
 800489a:	4613      	mov	r3, r2
 800489c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80048a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11a      	bne.n	80048e4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ae:	88bb      	ldrh	r3, [r7, #4]
 80048b0:	3303      	adds	r3, #3
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	e00f      	b.n	80048dc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	031a      	lsls	r2, r3, #12
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	461a      	mov	r2, r3
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	3304      	adds	r3, #4
 80048d4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	3301      	adds	r3, #1
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3eb      	bcc.n	80048bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3724      	adds	r7, #36	; 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b089      	sub	sp, #36	; 0x24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	4613      	mov	r3, r2
 80048fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	3303      	adds	r3, #3
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e00b      	b.n	800492e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	601a      	str	r2, [r3, #0]
    pDest++;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3304      	adds	r3, #4
 8004926:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	3301      	adds	r3, #1
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	429a      	cmp	r2, r3
 8004934:	d3ef      	bcc.n	8004916 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004936:	69fb      	ldr	r3, [r7, #28]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3724      	adds	r7, #36	; 0x24
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800495c:	68fb      	ldr	r3, [r7, #12]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0301 	and.w	r3, r3, #1
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <USB_CoreReset+0x64>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e01b      	b.n	80049de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	daf2      	bge.n	8004994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <USB_CoreReset+0x64>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d0f0      	beq.n	80049be <USB_CoreReset+0x36>

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	00030d40 	.word	0x00030d40

080049f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049f0:	b084      	sub	sp, #16
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	f107 001c 	add.w	r0, r7, #28
 80049fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d018      	beq.n	8004a74 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d10a      	bne.n	8004a5e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a56:	f043 0304 	orr.w	r3, r3, #4
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e014      	b.n	8004a88 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e009      	b.n	8004a88 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a82:	f023 0304 	bic.w	r3, r3, #4
 8004a86:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004a88:	2110      	movs	r1, #16
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff feb4 	bl	80047f8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fed7 	bl	8004844 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e015      	b.n	8004ac8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abc:	461a      	mov	r2, r3
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3e5      	bcc.n	8004a9c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8ac 	bl	8004c30 <USB_DriveVbus>

  HAL_Delay(200U);
 8004ad8:	20c8      	movs	r0, #200	; 0xc8
 8004ada:	f7fb fd67 	bl	80005ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <USB_HostInit+0x164>)
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <USB_HostInit+0x168>)
 8004b0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b0e:	e009      	b.n	8004b24 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <USB_HostInit+0x16c>)
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a10      	ldr	r2, [pc, #64]	; (8004b60 <USB_HostInit+0x170>)
 8004b20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <USB_HostInit+0x174>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b4e:	b004      	add	sp, #16
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	01000200 	.word	0x01000200
 8004b58:	00e00300 	.word	0x00e00300
 8004b5c:	00600080 	.word	0x00600080
 8004b60:	004000e0 	.word	0x004000e0
 8004b64:	a3200008 	.word	0xa3200008

08004b68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	68f9      	ldr	r1, [r7, #12]
 8004b9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bb6:	6053      	str	r3, [r2, #4]
 8004bb8:	e009      	b.n	8004bce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d106      	bne.n	8004bce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004bcc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c0c:	2064      	movs	r0, #100	; 0x64
 8004c0e:	f7fb fccd 	bl	80005ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c20:	200a      	movs	r0, #10
 8004c22:	f7fb fcc3 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <USB_DriveVbus+0x44>
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d106      	bne.n	8004c74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d109      	bne.n	8004c94 <USB_DriveVbus+0x64>
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	0c5b      	lsrs	r3, r3, #17
 8004cc0:	f003 0303 	and.w	r3, r3, #3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	b29b      	uxth	r3, r3
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	70fb      	strb	r3, [r7, #3]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70bb      	strb	r3, [r7, #2]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	461a      	mov	r2, r3
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d87e      	bhi.n	8004e30 <USB_HC_Init+0x13c>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <USB_HC_Init+0x44>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004df3 	.word	0x08004df3
 8004d40:	08004d49 	.word	0x08004d49
 8004d44:	08004db5 	.word	0x08004db5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d54:	461a      	mov	r2, r3
 8004d56:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da10      	bge.n	8004d86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d82:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004d84:	e057      	b.n	8004e36 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d051      	beq.n	8004e36 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004db0:	60d3      	str	r3, [r2, #12]
      break;
 8004db2:	e040      	b.n	8004e36 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004dc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da34      	bge.n	8004e3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dee:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004df0:	e023      	b.n	8004e3a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f240 2325 	movw	r3, #549	; 0x225
 8004e04:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	da17      	bge.n	8004e3e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e28:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e2c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e2e:	e006      	b.n	8004e3e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	e004      	b.n	8004e40 <USB_HC_Init+0x14c>
      break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <USB_HC_Init+0x14c>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <USB_HC_Init+0x14c>
      break;
 8004e3e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	2101      	movs	r1, #1
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da03      	bge.n	8004e7a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e001      	b.n	8004e7e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d103      	bne.n	8004e8e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e001      	b.n	8004e92 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e92:	787b      	ldrb	r3, [r7, #1]
 8004e94:	059b      	lsls	r3, r3, #22
 8004e96:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e9a:	78bb      	ldrb	r3, [r7, #2]
 8004e9c:	02db      	lsls	r3, r3, #11
 8004e9e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ea2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ea8:	049b      	lsls	r3, r3, #18
 8004eaa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004eae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004eb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004eb6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	0159      	lsls	r1, r3, #5
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ece:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004ed0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d10f      	bne.n	8004ef8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ef6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	; 0x30
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f24:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d028      	beq.n	8004f84 <USB_HC_StartXfer+0x7c>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	791b      	ldrb	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d124      	bne.n	8004f84 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <USB_HC_StartXfer+0x50>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	795b      	ldrb	r3, [r3, #5]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fa2e 	bl	80053b0 <USB_DoPing>
      return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e112      	b.n	800517e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d112      	bne.n	8004f84 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f78:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004f7c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2200      	movs	r2, #0
 8004f82:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d018      	beq.n	8004fbe <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	8912      	ldrh	r2, [r2, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	3b01      	subs	r3, #1
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	8912      	ldrh	r2, [r2, #8]
 8004f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fa0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004fa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fa4:	8b7b      	ldrh	r3, [r7, #26]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d90b      	bls.n	8004fc2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004faa:	8b7b      	ldrh	r3, [r7, #26]
 8004fac:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	8912      	ldrh	r2, [r2, #8]
 8004fb4:	fb02 f203 	mul.w	r2, r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	611a      	str	r2, [r3, #16]
 8004fbc:	e001      	b.n	8004fc2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d006      	beq.n	8004fd8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004fca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	8912      	ldrh	r2, [r2, #8]
 8004fd0:	fb02 f203 	mul.w	r2, r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fe0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fe2:	04d9      	lsls	r1, r3, #19
 8004fe4:	4b68      	ldr	r3, [pc, #416]	; (8005188 <USB_HC_StartXfer+0x280>)
 8004fe6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fe8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	7a9b      	ldrb	r3, [r3, #10]
 8004fee:	075b      	lsls	r3, r3, #29
 8004ff0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ff4:	69f9      	ldr	r1, [r7, #28]
 8004ff6:	0148      	lsls	r0, r1, #5
 8004ff8:	6a39      	ldr	r1, [r7, #32]
 8004ffa:	4401      	add	r1, r0
 8004ffc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005000:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005002:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	460a      	mov	r2, r1
 800501c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	440a      	add	r2, r1
 800504c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005050:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005054:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	7e7b      	ldrb	r3, [r7, #25]
 8005066:	075b      	lsls	r3, r3, #29
 8005068:	69f9      	ldr	r1, [r7, #28]
 800506a:	0148      	lsls	r0, r1, #5
 800506c:	6a39      	ldr	r1, [r7, #32]
 800506e:	4401      	add	r1, r0
 8005070:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005074:	4313      	orrs	r3, r2
 8005076:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a41      	ldr	r2, [pc, #260]	; (800518c <USB_HC_StartXfer+0x284>)
 8005088:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800508a:	4b40      	ldr	r3, [pc, #256]	; (800518c <USB_HC_StartXfer+0x284>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005092:	4a3e      	ldr	r2, [pc, #248]	; (800518c <USB_HC_StartXfer+0x284>)
 8005094:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800509e:	4b3b      	ldr	r3, [pc, #236]	; (800518c <USB_HC_StartXfer+0x284>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	4a39      	ldr	r2, [pc, #228]	; (800518c <USB_HC_StartXfer+0x284>)
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e005      	b.n	80050b8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050ac:	4b37      	ldr	r3, [pc, #220]	; (800518c <USB_HC_StartXfer+0x284>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050b4:	4a35      	ldr	r2, [pc, #212]	; (800518c <USB_HC_StartXfer+0x284>)
 80050b6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050b8:	4b34      	ldr	r3, [pc, #208]	; (800518c <USB_HC_StartXfer+0x284>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050c0:	4a32      	ldr	r2, [pc, #200]	; (800518c <USB_HC_StartXfer+0x284>)
 80050c2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	461a      	mov	r2, r3
 80050d2:	4b2e      	ldr	r3, [pc, #184]	; (800518c <USB_HC_StartXfer+0x284>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d14e      	bne.n	800517c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	78db      	ldrb	r3, [r3, #3]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d14a      	bne.n	800517c <USB_HC_StartXfer+0x274>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d046      	beq.n	800517c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	79db      	ldrb	r3, [r3, #7]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d830      	bhi.n	8005158 <USB_HC_StartXfer+0x250>
 80050f6:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <USB_HC_StartXfer+0x1f4>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	08005131 	.word	0x08005131
 8005104:	0800510d 	.word	0x0800510d
 8005108:	08005131 	.word	0x08005131
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	3303      	adds	r3, #3
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005116:	8afa      	ldrh	r2, [r7, #22]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	b29b      	uxth	r3, r3
 800511e:	429a      	cmp	r2, r3
 8005120:	d91c      	bls.n	800515c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	619a      	str	r2, [r3, #24]
          }
          break;
 800512e:	e015      	b.n	800515c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	3303      	adds	r3, #3
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800513a:	8afa      	ldrh	r2, [r7, #22]
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	b29b      	uxth	r3, r3
 8005146:	429a      	cmp	r2, r3
 8005148:	d90a      	bls.n	8005160 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	619a      	str	r2, [r3, #24]
          }
          break;
 8005156:	e003      	b.n	8005160 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005158:	bf00      	nop
 800515a:	e002      	b.n	8005162 <USB_HC_StartXfer+0x25a>
          break;
 800515c:	bf00      	nop
 800515e:	e000      	b.n	8005162 <USB_HC_StartXfer+0x25a>
          break;
 8005160:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	68d9      	ldr	r1, [r3, #12]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	785a      	ldrb	r2, [r3, #1]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	b298      	uxth	r0, r3
 8005170:	2300      	movs	r3, #0
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	4603      	mov	r3, r0
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff fb86 	bl	8004888 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3728      	adds	r7, #40	; 0x28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	1ff80000 	.word	0x1ff80000
 800518c:	200000ac 	.word	0x200000ac

08005190 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	b29b      	uxth	r3, r3
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	0c9b      	lsrs	r3, r3, #18
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <USB_HC_Halt+0x3a>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d16c      	bne.n	80052c6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	440a      	add	r2, r1
 8005202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800520a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d143      	bne.n	80052a0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	440a      	add	r2, r1
 800522e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005236:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	440a      	add	r2, r1
 800524e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005256:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	440a      	add	r2, r1
 800526e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005276:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3301      	adds	r3, #1
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005284:	d81d      	bhi.n	80052c2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529c:	d0ec      	beq.n	8005278 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800529e:	e080      	b.n	80053a2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052be:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052c0:	e06f      	b.n	80053a2 <USB_HC_Halt+0x1f0>
          break;
 80052c2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052c4:	e06d      	b.n	80053a2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d143      	bne.n	800537e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	440a      	add	r2, r1
 800530c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005314:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	440a      	add	r2, r1
 800532c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005334:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	440a      	add	r2, r1
 800534c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005354:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3301      	adds	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005362:	d81d      	bhi.n	80053a0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537a:	d0ec      	beq.n	8005356 <USB_HC_Halt+0x1a4>
 800537c:	e011      	b.n	80053a2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	440a      	add	r2, r1
 8005394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e000      	b.n	80053a2 <USB_HC_Halt+0x1f0>
          break;
 80053a0:	bf00      	nop
    }
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80053c4:	2301      	movs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	04da      	lsls	r2, r3, #19
 80053cc:	4b15      	ldr	r3, [pc, #84]	; (8005424 <USB_DoPing+0x74>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005400:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	1ff80000 	.word	0x1ff80000

08005428 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff f9a1 	bl	8004780 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800543e:	2110      	movs	r1, #16
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff f9d9 	bl	80047f8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff f9fc 	bl	8004844 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	e01f      	b.n	8005492 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005468:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005470:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005478:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	3301      	adds	r3, #1
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d9dc      	bls.n	8005452 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e034      	b.n	8005508 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3301      	adds	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e4:	d80c      	bhi.n	8005500 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fc:	d0ec      	beq.n	80054d8 <USB_StopHost+0xb0>
 80054fe:	e000      	b.n	8005502 <USB_StopHost+0xda>
        break;
 8005500:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	d9c7      	bls.n	800549e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005514:	461a      	mov	r2, r3
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff f91a 	bl	800475e <USB_EnableGlobalInt>

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b089      	sub	sp, #36	; 0x24
 8005538:	af04      	add	r7, sp, #16
 800553a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800553c:	2302      	movs	r3, #2
 800553e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005540:	2301      	movs	r3, #1
 8005542:	2202      	movs	r2, #2
 8005544:	2102      	movs	r1, #2
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fc3a 	bl	8005dc0 <USBH_FindInterface>
 800554c:	4603      	mov	r3, r0
 800554e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	2bff      	cmp	r3, #255	; 0xff
 8005554:	f000 812a 	beq.w	80057ac <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005558:	7bbb      	ldrb	r3, [r7, #14]
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fc13 	bl	8005d88 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005568:	2050      	movs	r0, #80	; 0x50
 800556a:	f002 fe21 	bl	80081b0 <malloc>
 800556e:	4603      	mov	r3, r0
 8005570:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	211a      	movs	r1, #26
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b25b      	sxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	da15      	bge.n	80055c0 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	211a      	movs	r1, #26
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	211a      	movs	r1, #26
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fd21 	bl	800700e <USBH_AllocPipe>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	7819      	ldrb	r1, [r3, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	7858      	ldrb	r0, [r3, #1]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	8952      	ldrh	r2, [r2, #10]
 80055ec:	9202      	str	r2, [sp, #8]
 80055ee:	2203      	movs	r2, #3
 80055f0:	9201      	str	r2, [sp, #4]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4623      	mov	r3, r4
 80055f6:	4602      	mov	r2, r0
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fcd9 	bl	8006fb0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f002 fcf8 	bl	8007ffc <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800560c:	2300      	movs	r3, #0
 800560e:	2200      	movs	r2, #0
 8005610:	210a      	movs	r1, #10
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fbd4 	bl	8005dc0 <USBH_FindInterface>
 8005618:	4603      	mov	r3, r0
 800561a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2bff      	cmp	r3, #255	; 0xff
 8005620:	f000 80c4 	beq.w	80057ac <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005624:	7bbb      	ldrb	r3, [r7, #14]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	211a      	movs	r1, #26
 800562a:	fb01 f303 	mul.w	r3, r1, r3
 800562e:	4413      	add	r3, r2
 8005630:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b25b      	sxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	da16      	bge.n	800566a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	211a      	movs	r1, #26
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	4413      	add	r3, r2
 8005648:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005652:	7bbb      	ldrb	r3, [r7, #14]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	211a      	movs	r1, #26
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005662:	881a      	ldrh	r2, [r3, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	835a      	strh	r2, [r3, #26]
 8005668:	e015      	b.n	8005696 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800566a:	7bbb      	ldrb	r3, [r7, #14]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	211a      	movs	r1, #26
 8005670:	fb01 f303 	mul.w	r3, r1, r3
 8005674:	4413      	add	r3, r2
 8005676:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	211a      	movs	r1, #26
 8005686:	fb01 f303 	mul.w	r3, r1, r3
 800568a:	4413      	add	r3, r2
 800568c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	211a      	movs	r1, #26
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	b25b      	sxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	da16      	bge.n	80056dc <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	211a      	movs	r1, #26
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 3352 	addw	r3, r3, #850	; 0x352
 80056be:	781a      	ldrb	r2, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056c4:	7bbb      	ldrb	r3, [r7, #14]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	211a      	movs	r1, #26
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80056d4:	881a      	ldrh	r2, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	835a      	strh	r2, [r3, #26]
 80056da:	e015      	b.n	8005708 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056dc:	7bbb      	ldrb	r3, [r7, #14]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	211a      	movs	r1, #26
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056f2:	7bbb      	ldrb	r3, [r7, #14]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	211a      	movs	r1, #26
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	7b9b      	ldrb	r3, [r3, #14]
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fc7d 	bl	800700e <USBH_AllocPipe>
 8005714:	4603      	mov	r3, r0
 8005716:	461a      	mov	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	7bdb      	ldrb	r3, [r3, #15]
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 fc73 	bl	800700e <USBH_AllocPipe>
 8005728:	4603      	mov	r3, r0
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	7b59      	ldrb	r1, [r3, #13]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	7b98      	ldrb	r0, [r3, #14]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	8b12      	ldrh	r2, [r2, #24]
 8005748:	9202      	str	r2, [sp, #8]
 800574a:	2202      	movs	r2, #2
 800574c:	9201      	str	r2, [sp, #4]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	4623      	mov	r3, r4
 8005752:	4602      	mov	r2, r0
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 fc2b 	bl	8006fb0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	7b19      	ldrb	r1, [r3, #12]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	7bd8      	ldrb	r0, [r3, #15]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	8b52      	ldrh	r2, [r2, #26]
 8005772:	9202      	str	r2, [sp, #8]
 8005774:	2202      	movs	r2, #2
 8005776:	9201      	str	r2, [sp, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4623      	mov	r3, r4
 800577c:	4602      	mov	r2, r0
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 fc16 	bl	8006fb0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	7b5b      	ldrb	r3, [r3, #13]
 8005790:	2200      	movs	r2, #0
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f002 fc31 	bl	8007ffc <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	7b1b      	ldrb	r3, [r3, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f002 fc2a 	bl	8007ffc <USBH_LL_SetToggle>
      status = USBH_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}

080057b6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00e      	beq.n	80057ee <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 fc09 	bl	8006fee <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 fc31 	bl	800704a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	7b1b      	ldrb	r3, [r3, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7b1b      	ldrb	r3, [r3, #12]
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 fbf6 	bl	8006fee <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7b1b      	ldrb	r3, [r3, #12]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 fc1e 	bl	800704a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	7b5b      	ldrb	r3, [r3, #13]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00e      	beq.n	800583a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	7b5b      	ldrb	r3, [r3, #13]
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fbe3 	bl	8006fee <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	7b5b      	ldrb	r3, [r3, #13]
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 fc0b 	bl	800704a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	4618      	mov	r0, r3
 8005850:	f002 fcb6 	bl	80081c0 <free>
    phost->pActiveClass->pData = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800585a:	2200      	movs	r2, #0
 800585c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005870:	2302      	movs	r3, #2
 8005872:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3340      	adds	r3, #64	; 0x40
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8b2 	bl	80059ee <GetLineCoding>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800589a:	2102      	movs	r1, #2
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
  }
  return status;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d877      	bhi.n	80059c0 <USBH_CDC_Process+0x114>
 80058d0:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <USBH_CDC_Process+0x2c>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	080058ed 	.word	0x080058ed
 80058dc:	080058f3 	.word	0x080058f3
 80058e0:	08005923 	.word	0x08005923
 80058e4:	08005997 	.word	0x08005997
 80058e8:	080059a5 	.word	0x080059a5
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]
    break;
 80058f0:	e06d      	b.n	80059ce <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f897 	bl	8005a2c <SetLineCoding>
 80058fe:	4603      	mov	r3, r0
 8005900:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005910:	e058      	b.n	80059c4 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d055      	beq.n	80059c4 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2204      	movs	r2, #4
 800591c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005920:	e050      	b.n	80059c4 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3340      	adds	r3, #64	; 0x40
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f860 	bl	80059ee <GetLineCoding>
 800592e:	4603      	mov	r3, r0
 8005930:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d126      	bne.n	8005986 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594a:	791b      	ldrb	r3, [r3, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d13b      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800595c:	429a      	cmp	r2, r3
 800595e:	d133      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800596c:	429a      	cmp	r2, r3
 800596e:	d12b      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005978:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800597a:	429a      	cmp	r2, r3
 800597c:	d124      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f95a 	bl	8005c38 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005984:	e020      	b.n	80059c8 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d01d      	beq.n	80059c8 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2204      	movs	r2, #4
 8005990:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005994:	e018      	b.n	80059c8 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f867 	bl	8005a6a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8dc 	bl	8005b5a <CDC_ProcessReception>
    break;
 80059a2:	e014      	b.n	80059ce <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80059a4:	2100      	movs	r1, #0
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fece 	bl	8006748 <USBH_ClrFeature>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80059be:	e005      	b.n	80059cc <USBH_CDC_Process+0x120>

  default:
    break;
 80059c0:	bf00      	nop
 80059c2:	e004      	b.n	80059ce <USBH_CDC_Process+0x122>
    break;
 80059c4:	bf00      	nop
 80059c6:	e002      	b.n	80059ce <USBH_CDC_Process+0x122>
    break;
 80059c8:	bf00      	nop
 80059ca:	e000      	b.n	80059ce <USBH_CDC_Process+0x122>
    break;
 80059cc:	bf00      	nop

  }

  return status;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	22a1      	movs	r2, #161	; 0xa1
 80059fc:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2221      	movs	r2, #33	; 0x21
 8005a02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2207      	movs	r2, #7
 8005a14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2207      	movs	r2, #7
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 f873 	bl	8006b08 <USBH_CtlReq>
 8005a22:	4603      	mov	r3, r0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2221      	movs	r2, #33	; 0x21
 8005a3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2207      	movs	r2, #7
 8005a52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2207      	movs	r2, #7
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f854 	bl	8006b08 <USBH_CtlReq>
 8005a60:	4603      	mov	r3, r0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af02      	add	r7, sp, #8
 8005a70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d002      	beq.n	8005a90 <CDC_ProcessTransmission+0x26>
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d025      	beq.n	8005ada <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005a8e:	e060      	b.n	8005b52 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	8b12      	ldrh	r2, [r2, #24]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d90c      	bls.n	8005ab6 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8b1a      	ldrh	r2, [r3, #24]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	7b58      	ldrb	r0, [r3, #13]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4603      	mov	r3, r0
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fa3b 	bl	8006f2a <USBH_BulkSendData>
 8005ab4:	e00c      	b.n	8005ad0 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	7b58      	ldrb	r0, [r3, #13]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	4603      	mov	r3, r0
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 fa2d 	bl	8006f2a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005ad8:	e03b      	b.n	8005b52 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	7b5b      	ldrb	r3, [r3, #13]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f002 fa61 	bl	8007fa8 <USBH_LL_GetURBState>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005aea:	7afb      	ldrb	r3, [r7, #11]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d128      	bne.n	8005b42 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	8b12      	ldrh	r2, [r2, #24]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d90e      	bls.n	8005b1a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	8b12      	ldrh	r2, [r2, #24]
 8005b04:	1a9a      	subs	r2, r3, r2
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	8b12      	ldrh	r2, [r2, #24]
 8005b12:	441a      	add	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	61da      	str	r2, [r3, #28]
 8005b18:	e002      	b.n	8005b20 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b30:	e00e      	b.n	8005b50 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f868 	bl	8005c10 <USBH_CDC_TransmitCallback>
    break;
 8005b40:	e006      	b.n	8005b50 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005b42:	7afb      	ldrb	r3, [r7, #11]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d103      	bne.n	8005b50 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b50:	bf00      	nop
  }
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d002      	beq.n	8005b80 <CDC_ProcessReception+0x26>
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d00e      	beq.n	8005b9c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005b7e:	e043      	b.n	8005c08 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	6a19      	ldr	r1, [r3, #32]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	8b5a      	ldrh	r2, [r3, #26]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	7b1b      	ldrb	r3, [r3, #12]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f9f1 	bl	8006f74 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2204      	movs	r2, #4
 8005b96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005b9a:	e035      	b.n	8005c08 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	7b1b      	ldrb	r3, [r3, #12]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f002 fa00 	bl	8007fa8 <USBH_LL_GetURBState>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d129      	bne.n	8005c06 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	7b1b      	ldrb	r3, [r3, #12]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f002 f963 	bl	8007e84 <USBH_LL_GetLastXferSize>
 8005bbe:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d016      	beq.n	8005bf8 <CDC_ProcessReception+0x9e>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	8b5b      	ldrh	r3, [r3, #26]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d910      	bls.n	8005bf8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	441a      	add	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005bf6:	e006      	b.n	8005c06 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f80f 	bl	8005c24 <USBH_CDC_ReceiveCallback>
    break;
 8005c06:	bf00      	nop
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c60:	2302      	movs	r3, #2
 8005c62:	e019      	b.n	8005c98 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	79fa      	ldrb	r2, [r7, #7]
 8005c68:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f80f 	bl	8005ca0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f002 f845 	bl	8007d20 <USBH_LL_Init>

  return USBH_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005cac:	e008      	b.n	8005cc0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	32e0      	adds	r2, #224	; 0xe0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b0e      	cmp	r3, #14
 8005cc4:	d9f3      	bls.n	8005cae <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e009      	b.n	8005ce0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce6:	d3f1      	bcc.n	8005ccc <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2240      	movs	r2, #64	; 0x40
 8005d0c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d017      	beq.n	8005d76 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10f      	bne.n	8005d70 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d56:	1c59      	adds	r1, r3, #1
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	33dc      	adds	r3, #220	; 0xdc
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e004      	b.n	8005d7a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d70:	2302      	movs	r3, #2
 8005d72:	73fb      	strb	r3, [r7, #15]
 8005d74:	e001      	b.n	8005d7a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d76:	2302      	movs	r3, #2
 8005d78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d204      	bcs.n	8005dae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005dac:	e001      	b.n	8005db2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005dae:	2302      	movs	r3, #2
 8005db0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	70fb      	strb	r3, [r7, #3]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70bb      	strb	r3, [r7, #2]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005de8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dea:	e025      	b.n	8005e38 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	221a      	movs	r2, #26
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	3308      	adds	r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	795b      	ldrb	r3, [r3, #5]
 8005e02:	78fa      	ldrb	r2, [r7, #3]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d002      	beq.n	8005e0e <USBH_FindInterface+0x4e>
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	2bff      	cmp	r3, #255	; 0xff
 8005e0c:	d111      	bne.n	8005e32 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005e12:	78ba      	ldrb	r2, [r7, #2]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d002      	beq.n	8005e1e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e18:	78bb      	ldrb	r3, [r7, #2]
 8005e1a:	2bff      	cmp	r3, #255	; 0xff
 8005e1c:	d109      	bne.n	8005e32 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e22:	787a      	ldrb	r2, [r7, #1]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d002      	beq.n	8005e2e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e28:	787b      	ldrb	r3, [r7, #1]
 8005e2a:	2bff      	cmp	r3, #255	; 0xff
 8005e2c:	d101      	bne.n	8005e32 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	e006      	b.n	8005e40 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	3301      	adds	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d9d6      	bls.n	8005dec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e3e:	23ff      	movs	r3, #255	; 0xff
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 ff9f 	bl	8007d98 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f002 f8b6 	bl	8007fce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af04      	add	r7, sp, #16
 8005e72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 faec 	bl	800645a <USBH_IsPortEnabled>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10c      	bne.n	8005ea2 <USBH_Process+0x36>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d002      	beq.n	8005ea2 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b0b      	cmp	r3, #11
 8005eaa:	f200 814c 	bhi.w	8006146 <USBH_Process+0x2da>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <USBH_Process+0x48>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ee5 	.word	0x08005ee5
 8005eb8:	08005f07 	.word	0x08005f07
 8005ebc:	08005f1b 	.word	0x08005f1b
 8005ec0:	08006121 	.word	0x08006121
 8005ec4:	08006147 	.word	0x08006147
 8005ec8:	08005fa9 	.word	0x08005fa9
 8005ecc:	080060d7 	.word	0x080060d7
 8005ed0:	08005fd9 	.word	0x08005fd9
 8005ed4:	08005ff9 	.word	0x08005ff9
 8005ed8:	08006019 	.word	0x08006019
 8005edc:	08006047 	.word	0x08006047
 8005ee0:	08006109 	.word	0x08006109
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 812c 	beq.w	800614a <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005ef8:	20c8      	movs	r0, #200	; 0xc8
 8005efa:	f002 f8b2 	bl	8008062 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 ffa5 	bl	8007e4e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005f04:	e121      	b.n	800614a <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 811e 	bne.w	800614e <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005f18:	e119      	b.n	800614e <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005f1a:	2064      	movs	r0, #100	; 0x64
 8005f1c:	f002 f8a1 	bl	8008062 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 ff6f 	bl	8007e04 <USBH_LL_GetSpeed>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2205      	movs	r2, #5
 8005f34:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005f36:	2100      	movs	r1, #0
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 f868 	bl	800700e <USBH_AllocPipe>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 f860 	bl	800700e <USBH_AllocPipe>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	7919      	ldrb	r1, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005f6a:	b292      	uxth	r2, r2
 8005f6c:	9202      	str	r2, [sp, #8]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	9201      	str	r2, [sp, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4603      	mov	r3, r0
 8005f76:	2280      	movs	r2, #128	; 0x80
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f819 	bl	8006fb0 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7959      	ldrb	r1, [r3, #5]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005f92:	b292      	uxth	r2, r2
 8005f94:	9202      	str	r2, [sp, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	9201      	str	r2, [sp, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 f805 	bl	8006fb0 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005fa6:	e0e3      	b.n	8006170 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f8e7 	bl	800617c <USBH_HandleEnum>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 80ce 	bne.w	8006152 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d103      	bne.n	8005fd0 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2208      	movs	r2, #8
 8005fcc:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005fce:	e0c0      	b.n	8006152 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2207      	movs	r2, #7
 8005fd4:	701a      	strb	r2, [r3, #0]
    break;
 8005fd6:	e0bc      	b.n	8006152 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80b9 	beq.w	8006156 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fea:	2101      	movs	r1, #1
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ff6:	e0ae      	b.n	8006156 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb59 	bl	80066ba <USBH_SetCfg>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	f040 80a5 	bne.w	800615a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2209      	movs	r2, #9
 8006014:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006016:	e0a0      	b.n	800615a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006026:	2101      	movs	r1, #1
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb69 	bl	8006700 <USBH_SetFeature>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	f040 8094 	bne.w	800615e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	220a      	movs	r2, #10
 800603a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800603c:	e08f      	b.n	800615e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	220a      	movs	r2, #10
 8006042:	701a      	strb	r2, [r3, #0]
    break;
 8006044:	e08b      	b.n	800615e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8088 	beq.w	8006162 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
 800605e:	e017      	b.n	8006090 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	33dc      	adds	r3, #220	; 0xdc
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	791a      	ldrb	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006074:	429a      	cmp	r2, r3
 8006076:	d108      	bne.n	800608a <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	33dc      	adds	r3, #220	; 0xdc
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	3301      	adds	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0e4      	beq.n	8006060 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800609c:	2b00      	cmp	r3, #0
 800609e:	d016      	beq.n	80060ce <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2206      	movs	r2, #6
 80060b6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060be:	2103      	movs	r1, #3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80060c4:	e04d      	b.n	8006162 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	220d      	movs	r2, #13
 80060ca:	701a      	strb	r2, [r3, #0]
    break;
 80060cc:	e049      	b.n	8006162 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	220d      	movs	r2, #13
 80060d2:	701a      	strb	r2, [r3, #0]
    break;
 80060d4:	e045      	b.n	8006162 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00f      	beq.n	8006100 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d136      	bne.n	8006166 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	220b      	movs	r2, #11
 80060fc:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80060fe:	e032      	b.n	8006166 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	220d      	movs	r2, #13
 8006104:	701a      	strb	r2, [r3, #0]
    break;
 8006106:	e02e      	b.n	8006166 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800610e:	2b00      	cmp	r3, #0
 8006110:	d02b      	beq.n	800616a <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
    }
    break;
 800611e:	e024      	b.n	800616a <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fdbd 	bl	8005ca0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01e      	beq.n	800616e <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006144:	e013      	b.n	800616e <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006146:	bf00      	nop
 8006148:	e012      	b.n	8006170 <USBH_Process+0x304>
    break;
 800614a:	bf00      	nop
 800614c:	e010      	b.n	8006170 <USBH_Process+0x304>
    break;
 800614e:	bf00      	nop
 8006150:	e00e      	b.n	8006170 <USBH_Process+0x304>
    break;
 8006152:	bf00      	nop
 8006154:	e00c      	b.n	8006170 <USBH_Process+0x304>
    break;
 8006156:	bf00      	nop
 8006158:	e00a      	b.n	8006170 <USBH_Process+0x304>
    break;
 800615a:	bf00      	nop
 800615c:	e008      	b.n	8006170 <USBH_Process+0x304>
    break;
 800615e:	bf00      	nop
 8006160:	e006      	b.n	8006170 <USBH_Process+0x304>
    break;
 8006162:	bf00      	nop
 8006164:	e004      	b.n	8006170 <USBH_Process+0x304>
    break;
 8006166:	bf00      	nop
 8006168:	e002      	b.n	8006170 <USBH_Process+0x304>
    break;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <USBH_Process+0x304>
    break;
 800616e:	bf00      	nop
  }
 return USBH_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop

0800617c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af04      	add	r7, sp, #16
 8006182:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b07      	cmp	r3, #7
 800618e:	f200 80f8 	bhi.w	8006382 <USBH_HandleEnum+0x206>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <USBH_HandleEnum+0x1c>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061b9 	.word	0x080061b9
 800619c:	0800622b 	.word	0x0800622b
 80061a0:	08006243 	.word	0x08006243
 80061a4:	080062b9 	.word	0x080062b9
 80061a8:	080062cf 	.word	0x080062cf
 80061ac:	080062eb 	.word	0x080062eb
 80061b0:	0800631f 	.word	0x0800631f
 80061b4:	08006353 	.word	0x08006353
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80061b8:	2108      	movs	r1, #8
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9ad 	bl	800651a <USBH_Get_DevDesc>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 80df 	bne.w	8006386 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	7919      	ldrb	r1, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80061ec:	b292      	uxth	r2, r2
 80061ee:	9202      	str	r2, [sp, #8]
 80061f0:	2200      	movs	r2, #0
 80061f2:	9201      	str	r2, [sp, #4]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4603      	mov	r3, r0
 80061f8:	2280      	movs	r2, #128	; 0x80
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fed8 	bl	8006fb0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	7959      	ldrb	r1, [r3, #5]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006214:	b292      	uxth	r2, r2
 8006216:	9202      	str	r2, [sp, #8]
 8006218:	2200      	movs	r2, #0
 800621a:	9201      	str	r2, [sp, #4]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	4603      	mov	r3, r0
 8006220:	2200      	movs	r2, #0
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fec4 	bl	8006fb0 <USBH_OpenPipe>

    }
    break;
 8006228:	e0ad      	b.n	8006386 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800622a:	2112      	movs	r1, #18
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f974 	bl	800651a <USBH_Get_DevDesc>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 80a8 	bne.w	800638a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006240:	e0a3      	b.n	800638a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006242:	2101      	movs	r1, #1
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa14 	bl	8006672 <USBH_SetAddress>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 809e 	bne.w	800638e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006252:	2002      	movs	r0, #2
 8006254:	f001 ff05 	bl	8008062 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2203      	movs	r2, #3
 8006264:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7919      	ldrb	r1, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800627a:	b292      	uxth	r2, r2
 800627c:	9202      	str	r2, [sp, #8]
 800627e:	2200      	movs	r2, #0
 8006280:	9201      	str	r2, [sp, #4]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	4603      	mov	r3, r0
 8006286:	2280      	movs	r2, #128	; 0x80
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fe91 	bl	8006fb0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7959      	ldrb	r1, [r3, #5]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80062a2:	b292      	uxth	r2, r2
 80062a4:	9202      	str	r2, [sp, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	9201      	str	r2, [sp, #4]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	4603      	mov	r3, r0
 80062ae:	2200      	movs	r2, #0
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fe7d 	bl	8006fb0 <USBH_OpenPipe>
    }
    break;
 80062b6:	e06a      	b.n	800638e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80062b8:	2109      	movs	r1, #9
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f955 	bl	800656a <USBH_Get_CfgDesc>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d165      	bne.n	8006392 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2204      	movs	r2, #4
 80062ca:	705a      	strb	r2, [r3, #1]
    }
    break;
 80062cc:	e061      	b.n	8006392 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f947 	bl	800656a <USBH_Get_CfgDesc>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d159      	bne.n	8006396 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2205      	movs	r2, #5
 80062e6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80062e8:	e055      	b.n	8006396 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006300:	23ff      	movs	r3, #255	; 0xff
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f955 	bl	80065b2 <USBH_Get_StringDesc>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d145      	bne.n	800639a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2206      	movs	r2, #6
 8006312:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006314:	e041      	b.n	800639a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2206      	movs	r2, #6
 800631a:	705a      	strb	r2, [r3, #1]
    break;
 800631c:	e03d      	b.n	800639a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006334:	23ff      	movs	r3, #255	; 0xff
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f93b 	bl	80065b2 <USBH_Get_StringDesc>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d12d      	bne.n	800639e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2207      	movs	r2, #7
 8006346:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006348:	e029      	b.n	800639e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2207      	movs	r2, #7
 800634e:	705a      	strb	r2, [r3, #1]
    break;
 8006350:	e025      	b.n	800639e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00f      	beq.n	800637c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006368:	23ff      	movs	r3, #255	; 0xff
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f921 	bl	80065b2 <USBH_Get_StringDesc>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d115      	bne.n	80063a2 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800637a:	e012      	b.n	80063a2 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]
    break;
 8006380:	e00f      	b.n	80063a2 <USBH_HandleEnum+0x226>

  default:
    break;
 8006382:	bf00      	nop
 8006384:	e00e      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 8006386:	bf00      	nop
 8006388:	e00c      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 800638a:	bf00      	nop
 800638c:	e00a      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 800638e:	bf00      	nop
 8006390:	e008      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 8006392:	bf00      	nop
 8006394:	e006      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 8006396:	bf00      	nop
 8006398:	e004      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <USBH_HandleEnum+0x228>
    break;
 80063a2:	bf00      	nop
  }
  return Status;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop

080063b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f804 	bl	80063f2 <USBH_HandleSof>
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b0b      	cmp	r3, #11
 8006402:	d10a      	bne.n	800641a <USBH_HandleSof+0x28>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
  }
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006432:	bf00      	nop
}
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800644e:	bf00      	nop
}
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10f      	bne.n	80064a6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00e      	beq.n	80064b6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800649e:	2104      	movs	r1, #4
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
 80064a4:	e007      	b.n	80064b6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d102      	bne.n	80064b6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fc80 	bl	8007dce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fdb8 	bl	800704a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	795b      	ldrb	r3, [r3, #5]
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fdb2 	bl	800704a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80064fe:	2105      	movs	r1, #5
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fc47 	bl	8007d98 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2203      	movs	r2, #3
 800650e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af02      	add	r7, sp, #8
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	b29b      	uxth	r3, r3
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4613      	mov	r3, r2
 8006534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006538:	2100      	movs	r1, #0
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f864 	bl	8006608 <USBH_GetDescriptor>
 8006540:	4603      	mov	r3, r0
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	b292      	uxth	r2, r2
 800655a:	4619      	mov	r1, r3
 800655c:	f000 f918 	bl	8006790 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af02      	add	r7, sp, #8
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	331c      	adds	r3, #28
 800657a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800657c:	887b      	ldrh	r3, [r7, #2]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006586:	2100      	movs	r1, #0
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f83d 	bl	8006608 <USBH_GetDescriptor>
 800658e:	4603      	mov	r3, r0
 8006590:	72fb      	strb	r3, [r7, #11]
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d107      	bne.n	80065a8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	68f9      	ldr	r1, [r7, #12]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f964 	bl	8006870 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80065a8:	7afb      	ldrb	r3, [r7, #11]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b088      	sub	sp, #32
 80065b6:	af02      	add	r7, sp, #8
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	461a      	mov	r2, r3
 80065be:	460b      	mov	r3, r1
 80065c0:	72fb      	strb	r3, [r7, #11]
 80065c2:	4613      	mov	r3, r2
 80065c4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80065ce:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80065d6:	893b      	ldrh	r3, [r7, #8]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	460b      	mov	r3, r1
 80065dc:	2100      	movs	r1, #0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f812 	bl	8006608 <USBH_GetDescriptor>
 80065e4:	4603      	mov	r3, r0
 80065e6:	75fb      	strb	r3, [r7, #23]
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d107      	bne.n	80065fe <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065f4:	893a      	ldrh	r2, [r7, #8]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fa37 	bl	8006a6c <USBH_ParseStringDesc>
  }
  return status;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	72fb      	strb	r3, [r7, #11]
 8006616:	4613      	mov	r3, r2
 8006618:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	789b      	ldrb	r3, [r3, #2]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d11c      	bne.n	800665c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2206      	movs	r2, #6
 8006632:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	893a      	ldrh	r2, [r7, #8]
 8006638:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800663a:	893b      	ldrh	r3, [r7, #8]
 800663c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006644:	d104      	bne.n	8006650 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f240 4209 	movw	r2, #1033	; 0x409
 800664c:	829a      	strh	r2, [r3, #20]
 800664e:	e002      	b.n	8006656 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8b3a      	ldrh	r2, [r7, #24]
 800665a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800665c:	8b3b      	ldrh	r3, [r7, #24]
 800665e:	461a      	mov	r2, r3
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa50 	bl	8006b08 <USBH_CtlReq>
 8006668:	4603      	mov	r3, r0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	789b      	ldrb	r3, [r3, #2]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d10f      	bne.n	80066a6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2205      	movs	r2, #5
 8006690:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80066a6:	2200      	movs	r2, #0
 80066a8:	2100      	movs	r1, #0
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa2c 	bl	8006b08 <USBH_CtlReq>
 80066b0:	4603      	mov	r3, r0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	789b      	ldrb	r3, [r3, #2]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d10e      	bne.n	80066ec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2209      	movs	r2, #9
 80066d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	887a      	ldrh	r2, [r7, #2]
 80066de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80066ec:	2200      	movs	r2, #0
 80066ee:	2100      	movs	r1, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa09 	bl	8006b08 <USBH_CtlReq>
 80066f6:	4603      	mov	r3, r0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	789b      	ldrb	r3, [r3, #2]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d10f      	bne.n	8006734 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2203      	movs	r2, #3
 800671e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006734:	2200      	movs	r2, #0
 8006736:	2100      	movs	r1, #0
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f9e5 	bl	8006b08 <USBH_CtlReq>
 800673e:	4603      	mov	r3, r0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	789b      	ldrb	r3, [r3, #2]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d10f      	bne.n	800677c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	b29a      	uxth	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800677c:	2200      	movs	r2, #0
 800677e:	2100      	movs	r1, #0
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f9c1 	bl	8006b08 <USBH_CtlReq>
 8006786:	4603      	mov	r3, r0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	785a      	ldrb	r2, [r3, #1]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	3302      	adds	r3, #2
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	3303      	adds	r3, #3
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	791a      	ldrb	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	795a      	ldrb	r2, [r3, #5]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	799a      	ldrb	r2, [r3, #6]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	79da      	ldrb	r2, [r3, #7]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d939      	bls.n	8006864 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	3308      	adds	r3, #8
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	3309      	adds	r3, #9
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	b29b      	uxth	r3, r3
 8006804:	4313      	orrs	r3, r2
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	330a      	adds	r3, #10
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b29a      	uxth	r2, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	330b      	adds	r3, #11
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	b29b      	uxth	r3, r3
 8006820:	4313      	orrs	r3, r2
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	330c      	adds	r3, #12
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b29a      	uxth	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	330d      	adds	r3, #13
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	b29b      	uxth	r3, r3
 800683c:	4313      	orrs	r3, r2
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	7b9a      	ldrb	r2, [r3, #14]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	7bda      	ldrb	r2, [r3, #15]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	7c1a      	ldrb	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	7c5a      	ldrb	r2, [r3, #17]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	745a      	strb	r2, [r3, #17]
  }
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	; 0x28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	785a      	ldrb	r2, [r3, #1]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3302      	adds	r3, #2
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	3303      	adds	r3, #3
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	4313      	orrs	r3, r2
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	791a      	ldrb	r2, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	795a      	ldrb	r2, [r3, #5]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	799a      	ldrb	r2, [r3, #6]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	79da      	ldrb	r2, [r3, #7]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	7a1a      	ldrb	r2, [r3, #8]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b09      	cmp	r3, #9
 80068ea:	d95f      	bls.n	80069ac <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80068ec:	2309      	movs	r3, #9
 80068ee:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80068f4:	e051      	b.n	800699a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80068f6:	f107 0316 	add.w	r3, r7, #22
 80068fa:	4619      	mov	r1, r3
 80068fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068fe:	f000 f8e8 	bl	8006ad2 <USBH_GetNextDesc>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b04      	cmp	r3, #4
 800690a:	d146      	bne.n	800699a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800690c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006910:	221a      	movs	r2, #26
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	3308      	adds	r3, #8
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	3302      	adds	r3, #2
 800691e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006922:	69f8      	ldr	r0, [r7, #28]
 8006924:	f000 f846 	bl	80069b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006932:	e022      	b.n	800697a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006934:	f107 0316 	add.w	r3, r7, #22
 8006938:	4619      	mov	r1, r3
 800693a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800693c:	f000 f8c9 	bl	8006ad2 <USBH_GetNextDesc>
 8006940:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b05      	cmp	r3, #5
 8006948:	d117      	bne.n	800697a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800694a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800694e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006952:	3201      	adds	r2, #1
 8006954:	00d2      	lsls	r2, r2, #3
 8006956:	211a      	movs	r1, #26
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	4413      	add	r3, r2
 800695e:	3308      	adds	r3, #8
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	3304      	adds	r3, #4
 8006966:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800696a:	69b8      	ldr	r0, [r7, #24]
 800696c:	f000 f851 	bl	8006a12 <USBH_ParseEPDesc>
            ep_ix++;
 8006970:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006974:	3301      	adds	r3, #1
 8006976:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	791b      	ldrb	r3, [r3, #4]
 800697e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006982:	429a      	cmp	r2, r3
 8006984:	d204      	bcs.n	8006990 <USBH_ParseCfgDesc+0x120>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	885a      	ldrh	r2, [r3, #2]
 800698a:	8afb      	ldrh	r3, [r7, #22]
 800698c:	429a      	cmp	r2, r3
 800698e:	d8d1      	bhi.n	8006934 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006994:	3301      	adds	r3, #1
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800699a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d804      	bhi.n	80069ac <USBH_ParseCfgDesc+0x13c>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	885a      	ldrh	r2, [r3, #2]
 80069a6:	8afb      	ldrh	r3, [r7, #22]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d8a4      	bhi.n	80068f6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80069ac:	bf00      	nop
 80069ae:	3728      	adds	r7, #40	; 0x28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785a      	ldrb	r2, [r3, #1]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	789a      	ldrb	r2, [r3, #2]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	78da      	ldrb	r2, [r3, #3]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	791a      	ldrb	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	795a      	ldrb	r2, [r3, #5]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	799a      	ldrb	r2, [r3, #6]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	79da      	ldrb	r2, [r3, #7]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	7a1a      	ldrb	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	721a      	strb	r2, [r3, #8]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	785a      	ldrb	r2, [r3, #1]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	789a      	ldrb	r2, [r3, #2]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	78da      	ldrb	r2, [r3, #3]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	3305      	adds	r3, #5
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	799a      	ldrb	r2, [r3, #6]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	719a      	strb	r2, [r3, #6]
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d120      	bne.n	8006ac6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	1e9a      	subs	r2, r3, #2
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	bf28      	it	cs
 8006a90:	4613      	movcs	r3, r2
 8006a92:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3302      	adds	r3, #2
 8006a98:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	82fb      	strh	r3, [r7, #22]
 8006a9e:	e00b      	b.n	8006ab8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006aa0:	8afb      	ldrh	r3, [r7, #22]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006ab2:	8afb      	ldrh	r3, [r7, #22]
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	82fb      	strh	r3, [r7, #22]
 8006ab8:	8afa      	ldrh	r2, [r7, #22]
 8006aba:	8abb      	ldrh	r3, [r7, #20]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3ef      	bcc.n	8006aa0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	881a      	ldrh	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4413      	add	r3, r2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006afa:	68fb      	ldr	r3, [r7, #12]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	4613      	mov	r3, r2
 8006b14:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	789b      	ldrb	r3, [r3, #2]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d002      	beq.n	8006b28 <USBH_CtlReq+0x20>
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d00f      	beq.n	8006b46 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006b26:	e034      	b.n	8006b92 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006b40:	2301      	movs	r3, #1
 8006b42:	75fb      	strb	r3, [r7, #23]
    break;
 8006b44:	e025      	b.n	8006b92 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f828 	bl	8006b9c <USBH_HandleControl>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	75fb      	strb	r3, [r7, #23]
    break;
 8006b66:	e013      	b.n	8006b90 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d108      	bne.n	8006b80 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	75fb      	strb	r3, [r7, #23]
    break;
 8006b7e:	e007      	b.n	8006b90 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d104      	bne.n	8006b90 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	75fb      	strb	r3, [r7, #23]
    break;
 8006b90:	bf00      	nop
  }
  return status;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7e1b      	ldrb	r3, [r3, #24]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	2b0a      	cmp	r3, #10
 8006bb4:	f200 814c 	bhi.w	8006e50 <USBH_HandleControl+0x2b4>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USBH_HandleControl+0x24>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006c07 	.word	0x08006c07
 8006bc8:	08006c71 	.word	0x08006c71
 8006bcc:	08006c97 	.word	0x08006c97
 8006bd0:	08006ccf 	.word	0x08006ccf
 8006bd4:	08006cfb 	.word	0x08006cfb
 8006bd8:	08006d4d 	.word	0x08006d4d
 8006bdc:	08006d6f 	.word	0x08006d6f
 8006be0:	08006dab 	.word	0x08006dab
 8006be4:	08006dd3 	.word	0x08006dd3
 8006be8:	08006e11 	.word	0x08006e11
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f103 0110 	add.w	r1, r3, #16
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	795b      	ldrb	r3, [r3, #5]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f939 	bl	8006e70 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	761a      	strb	r2, [r3, #24]
    break;
 8006c04:	e12f      	b.n	8006e66 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	795b      	ldrb	r3, [r3, #5]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f9cb 	bl	8007fa8 <USBH_LL_GetURBState>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d11e      	bne.n	8006c5a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7c1b      	ldrb	r3, [r3, #16]
 8006c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c24:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8adb      	ldrh	r3, [r3, #22]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006c2e:	7b7b      	ldrb	r3, [r7, #13]
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d103      	bne.n	8006c3c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2203      	movs	r2, #3
 8006c38:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c3a:	e10b      	b.n	8006e54 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2205      	movs	r2, #5
 8006c40:	761a      	strb	r2, [r3, #24]
    break;
 8006c42:	e107      	b.n	8006e54 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006c44:	7b7b      	ldrb	r3, [r7, #13]
 8006c46:	2b80      	cmp	r3, #128	; 0x80
 8006c48:	d103      	bne.n	8006c52 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2209      	movs	r2, #9
 8006c4e:	761a      	strb	r2, [r3, #24]
    break;
 8006c50:	e100      	b.n	8006e54 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2207      	movs	r2, #7
 8006c56:	761a      	strb	r2, [r3, #24]
    break;
 8006c58:	e0fc      	b.n	8006e54 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d003      	beq.n	8006c68 <USBH_HandleControl+0xcc>
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	f040 80f6 	bne.w	8006e54 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	220b      	movs	r2, #11
 8006c6c:	761a      	strb	r2, [r3, #24]
    break;
 8006c6e:	e0f1      	b.n	8006e54 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6899      	ldr	r1, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	899a      	ldrh	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	791b      	ldrb	r3, [r3, #4]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f930 	bl	8006eee <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2204      	movs	r2, #4
 8006c92:	761a      	strb	r2, [r3, #24]
    break;
 8006c94:	e0e7      	b.n	8006e66 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	791b      	ldrb	r3, [r3, #4]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f983 	bl	8007fa8 <USBH_LL_GetURBState>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d102      	bne.n	8006cb2 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2209      	movs	r2, #9
 8006cb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b05      	cmp	r3, #5
 8006cb6:	d102      	bne.n	8006cbe <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006cbc:	e0cc      	b.n	8006e58 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	f040 80c9 	bne.w	8006e58 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	220b      	movs	r2, #11
 8006cca:	761a      	strb	r2, [r3, #24]
    break;
 8006ccc:	e0c4      	b.n	8006e58 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6899      	ldr	r1, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	899a      	ldrh	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7958      	ldrb	r0, [r3, #5]
 8006cda:	2301      	movs	r3, #1
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4603      	mov	r3, r0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8df 	bl	8006ea4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2206      	movs	r2, #6
 8006cf6:	761a      	strb	r2, [r3, #24]
    break;
 8006cf8:	e0b5      	b.n	8006e66 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	795b      	ldrb	r3, [r3, #5]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f951 	bl	8007fa8 <USBH_LL_GetURBState>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d103      	bne.n	8006d18 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2207      	movs	r2, #7
 8006d14:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d16:	e0a1      	b.n	8006e5c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d105      	bne.n	8006d2a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	220c      	movs	r2, #12
 8006d22:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006d24:	2303      	movs	r3, #3
 8006d26:	73fb      	strb	r3, [r7, #15]
    break;
 8006d28:	e098      	b.n	8006e5c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d103      	bne.n	8006d38 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2205      	movs	r2, #5
 8006d34:	761a      	strb	r2, [r3, #24]
    break;
 8006d36:	e091      	b.n	8006e5c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	f040 808e 	bne.w	8006e5c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	220b      	movs	r2, #11
 8006d44:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006d46:	2302      	movs	r3, #2
 8006d48:	73fb      	strb	r3, [r7, #15]
    break;
 8006d4a:	e087      	b.n	8006e5c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	791b      	ldrb	r3, [r3, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	2100      	movs	r1, #0
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f8ca 	bl	8006eee <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	761a      	strb	r2, [r3, #24]

    break;
 8006d6c:	e07b      	b.n	8006e66 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	791b      	ldrb	r3, [r3, #4]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f917 	bl	8007fa8 <USBH_LL_GetURBState>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d105      	bne.n	8006d90 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220d      	movs	r2, #13
 8006d88:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d8e:	e067      	b.n	8006e60 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d103      	bne.n	8006d9e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	220b      	movs	r2, #11
 8006d9a:	761a      	strb	r2, [r3, #24]
    break;
 8006d9c:	e060      	b.n	8006e60 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	d15d      	bne.n	8006e60 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006da4:	2303      	movs	r3, #3
 8006da6:	73fb      	strb	r3, [r7, #15]
    break;
 8006da8:	e05a      	b.n	8006e60 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	795a      	ldrb	r2, [r3, #5]
 8006dae:	2301      	movs	r3, #1
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	4613      	mov	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f873 	bl	8006ea4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	220a      	movs	r2, #10
 8006dce:	761a      	strb	r2, [r3, #24]
    break;
 8006dd0:	e049      	b.n	8006e66 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	795b      	ldrb	r3, [r3, #5]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 f8e5 	bl	8007fa8 <USBH_LL_GetURBState>
 8006dde:	4603      	mov	r3, r0
 8006de0:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d105      	bne.n	8006df4 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	220d      	movs	r2, #13
 8006df0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006df2:	e037      	b.n	8006e64 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d103      	bne.n	8006e02 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2209      	movs	r2, #9
 8006dfe:	761a      	strb	r2, [r3, #24]
    break;
 8006e00:	e030      	b.n	8006e64 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d12d      	bne.n	8006e64 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	220b      	movs	r2, #11
 8006e0c:	761a      	strb	r2, [r3, #24]
    break;
 8006e0e:	e029      	b.n	8006e64 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7e5b      	ldrb	r3, [r3, #25]
 8006e14:	3301      	adds	r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	765a      	strb	r2, [r3, #25]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7e5b      	ldrb	r3, [r3, #25]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d809      	bhi.n	8006e38 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 ffd2 	bl	8007dce <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006e36:	e016      	b.n	8006e66 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e3e:	2106      	movs	r1, #6
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e4e:	e00a      	b.n	8006e66 <USBH_HandleControl+0x2ca>

  default:
    break;
 8006e50:	bf00      	nop
 8006e52:	e008      	b.n	8006e66 <USBH_HandleControl+0x2ca>
    break;
 8006e54:	bf00      	nop
 8006e56:	e006      	b.n	8006e66 <USBH_HandleControl+0x2ca>
    break;
 8006e58:	bf00      	nop
 8006e5a:	e004      	b.n	8006e66 <USBH_HandleControl+0x2ca>
    break;
 8006e5c:	bf00      	nop
 8006e5e:	e002      	b.n	8006e66 <USBH_HandleControl+0x2ca>
    break;
 8006e60:	bf00      	nop
 8006e62:	e000      	b.n	8006e66 <USBH_HandleControl+0x2ca>
    break;
 8006e64:	bf00      	nop
  }
  return status;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af04      	add	r7, sp, #16
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e7e:	79f9      	ldrb	r1, [r7, #7]
 8006e80:	2300      	movs	r3, #0
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	2308      	movs	r3, #8
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	2300      	movs	r3, #0
 8006e92:	2200      	movs	r2, #0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f001 f856 	bl	8007f46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	80fb      	strh	r3, [r7, #6]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ec8:	7979      	ldrb	r1, [r7, #5]
 8006eca:	7e3b      	ldrb	r3, [r7, #24]
 8006ecc:	9303      	str	r3, [sp, #12]
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	9302      	str	r3, [sp, #8]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	2200      	movs	r2, #0
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f001 f831 	bl	8007f46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b088      	sub	sp, #32
 8006ef2:	af04      	add	r7, sp, #16
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	4611      	mov	r1, r2
 8006efa:	461a      	mov	r2, r3
 8006efc:	460b      	mov	r3, r1
 8006efe:	80fb      	strh	r3, [r7, #6]
 8006f00:	4613      	mov	r3, r2
 8006f02:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f04:	7979      	ldrb	r1, [r7, #5]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9303      	str	r3, [sp, #12]
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	9302      	str	r3, [sp, #8]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	2301      	movs	r3, #1
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	2300      	movs	r3, #0
 8006f18:	2201      	movs	r2, #1
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f001 f813 	bl	8007f46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f20:	2300      	movs	r3, #0

}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b088      	sub	sp, #32
 8006f2e:	af04      	add	r7, sp, #16
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	4611      	mov	r1, r2
 8006f36:	461a      	mov	r2, r3
 8006f38:	460b      	mov	r3, r1
 8006f3a:	80fb      	strh	r3, [r7, #6]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f4e:	7979      	ldrb	r1, [r7, #5]
 8006f50:	7e3b      	ldrb	r3, [r7, #24]
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	9302      	str	r3, [sp, #8]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	9301      	str	r3, [sp, #4]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	2302      	movs	r3, #2
 8006f62:	2200      	movs	r2, #0
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 ffee 	bl	8007f46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af04      	add	r7, sp, #16
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4611      	mov	r1, r2
 8006f80:	461a      	mov	r2, r3
 8006f82:	460b      	mov	r3, r1
 8006f84:	80fb      	strh	r3, [r7, #6]
 8006f86:	4613      	mov	r3, r2
 8006f88:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f8a:	7979      	ldrb	r1, [r7, #5]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 ffd0 	bl	8007f46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	70fb      	strb	r3, [r7, #3]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70bb      	strb	r3, [r7, #2]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006fca:	7878      	ldrb	r0, [r7, #1]
 8006fcc:	78ba      	ldrb	r2, [r7, #2]
 8006fce:	78f9      	ldrb	r1, [r7, #3]
 8006fd0:	8b3b      	ldrh	r3, [r7, #24]
 8006fd2:	9302      	str	r3, [sp, #8]
 8006fd4:	7d3b      	ldrb	r3, [r7, #20]
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	7c3b      	ldrb	r3, [r7, #16]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	4603      	mov	r3, r0
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 ff63 	bl	8007eaa <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006fe4:	2300      	movs	r3, #0

}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 ff82 	bl	8007f08 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007004:	2300      	movs	r3, #0

}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f831 	bl	8007082 <USBH_GetFreePipe>
 8007020:	4603      	mov	r3, r0
 8007022:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800702a:	4293      	cmp	r3, r2
 800702c:	d007      	beq.n	800703e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	89fa      	ldrh	r2, [r7, #14]
 8007032:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	32e0      	adds	r2, #224	; 0xe0
 800703a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800703e:	89fb      	ldrh	r3, [r7, #14]
 8007040:	b2db      	uxtb	r3, r3
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	2b0a      	cmp	r3, #10
 800705a:	d80b      	bhi.n	8007074 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32e0      	adds	r2, #224	; 0xe0
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	32e0      	adds	r2, #224	; 0xe0
 8007070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
 8007092:	e00e      	b.n	80070b2 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007094:	7bfa      	ldrb	r2, [r7, #15]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32e0      	adds	r2, #224	; 0xe0
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	e007      	b.n	80070bc <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	3301      	adds	r3, #1
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b0a      	cmp	r3, #10
 80070b6:	d9ed      	bls.n	8007094 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80070b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80070d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070d6:	4818      	ldr	r0, [pc, #96]	; (8007138 <HAL_GPIO_EXTI_Callback+0x70>)
 80070d8:	f7f9 fd4f 	bl	8000b7a <HAL_GPIO_TogglePin>

  switch(TIM4->ARR){
 80070dc:	4b17      	ldr	r3, [pc, #92]	; (800713c <HAL_GPIO_EXTI_Callback+0x74>)
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00b      	beq.n	8007100 <HAL_GPIO_EXTI_Callback+0x38>
 80070e8:	4a15      	ldr	r2, [pc, #84]	; (8007140 <HAL_GPIO_EXTI_Callback+0x78>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00c      	beq.n	8007108 <HAL_GPIO_EXTI_Callback+0x40>
 80070ee:	f241 52df 	movw	r2, #5599	; 0x15df
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d10d      	bne.n	8007112 <HAL_GPIO_EXTI_Callback+0x4a>
  case 5599:
	  TIM4->ARR = 27999;
 80070f6:	4b11      	ldr	r3, [pc, #68]	; (800713c <HAL_GPIO_EXTI_Callback+0x74>)
 80070f8:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80070fc:	62da      	str	r2, [r3, #44]	; 0x2c
	  break;
 80070fe:	e00d      	b.n	800711c <HAL_GPIO_EXTI_Callback+0x54>
  case 27999:
	  TIM4->ARR = 139999;
 8007100:	4b0e      	ldr	r3, [pc, #56]	; (800713c <HAL_GPIO_EXTI_Callback+0x74>)
 8007102:	4a0f      	ldr	r2, [pc, #60]	; (8007140 <HAL_GPIO_EXTI_Callback+0x78>)
 8007104:	62da      	str	r2, [r3, #44]	; 0x2c
  	  break;
 8007106:	e009      	b.n	800711c <HAL_GPIO_EXTI_Callback+0x54>
  case 139999:
	  TIM4->ARR = 5599;
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <HAL_GPIO_EXTI_Callback+0x74>)
 800710a:	f241 52df 	movw	r2, #5599	; 0x15df
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c
	  break;
 8007110:	e004      	b.n	800711c <HAL_GPIO_EXTI_Callback+0x54>
  default:
	  TIM4->ARR = 5599;
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_GPIO_EXTI_Callback+0x74>)
 8007114:	f241 52df 	movw	r2, #5599	; 0x15df
 8007118:	62da      	str	r2, [r3, #44]	; 0x2c
	  break;
 800711a:	bf00      	nop
  }

  TIM4->CNT = 0;
 800711c:	4b07      	ldr	r3, [pc, #28]	; (800713c <HAL_GPIO_EXTI_Callback+0x74>)
 800711e:	2200      	movs	r2, #0
 8007120:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_Delay(100);
 8007122:	2064      	movs	r0, #100	; 0x64
 8007124:	f7f9 fa42 	bl	80005ac <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007128:	4a06      	ldr	r2, [pc, #24]	; (8007144 <HAL_GPIO_EXTI_Callback+0x7c>)
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	6153      	str	r3, [r2, #20]

//  for(int i=0; i<500; i++){
//
//  }

}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40020c00 	.word	0x40020c00
 800713c:	40000800 	.word	0x40000800
 8007140:	000222df 	.word	0x000222df
 8007144:	40013c00 	.word	0x40013c00

08007148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800714c:	f7f9 f9bc 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007150:	f000 f816 	bl	8007180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007154:	f000 f9a2 	bl	800749c <MX_GPIO_Init>
  MX_I2C1_Init();
 8007158:	f000 f894 	bl	8007284 <MX_I2C1_Init>
  MX_I2S3_Init();
 800715c:	f000 f8c0 	bl	80072e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007160:	f000 f8ee 	bl	8007340 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8007164:	f000 fcc8 	bl	8007af8 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8007168:	f000 f920 	bl	80073ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim4);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800716c:	2108      	movs	r1, #8
 800716e:	4803      	ldr	r0, [pc, #12]	; (800717c <main+0x34>)
 8007170:	f7fc fd84 	bl	8003c7c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007174:	f000 fce6 	bl	8007b44 <MX_USB_HOST_Process>
 8007178:	e7fc      	b.n	8007174 <main+0x2c>
 800717a:	bf00      	nop
 800717c:	200000c4 	.word	0x200000c4

08007180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b098      	sub	sp, #96	; 0x60
 8007184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800718a:	2230      	movs	r2, #48	; 0x30
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f001 f81e 	bl	80081d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007194:	f107 031c 	add.w	r3, r7, #28
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	609a      	str	r2, [r3, #8]
 80071a0:	60da      	str	r2, [r3, #12]
 80071a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071a4:	f107 030c 	add.w	r3, r7, #12
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	609a      	str	r2, [r3, #8]
 80071b0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	4b31      	ldr	r3, [pc, #196]	; (800727c <SystemClock_Config+0xfc>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	4a30      	ldr	r2, [pc, #192]	; (800727c <SystemClock_Config+0xfc>)
 80071bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c0:	6413      	str	r3, [r2, #64]	; 0x40
 80071c2:	4b2e      	ldr	r3, [pc, #184]	; (800727c <SystemClock_Config+0xfc>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071ce:	2300      	movs	r3, #0
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <SystemClock_Config+0x100>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <SystemClock_Config+0x100>)
 80071d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	4b28      	ldr	r3, [pc, #160]	; (8007280 <SystemClock_Config+0x100>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e6:	607b      	str	r3, [r7, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80071ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071f4:	2302      	movs	r3, #2
 80071f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80071fe:	2308      	movs	r3, #8
 8007200:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007202:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007206:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007208:	2302      	movs	r3, #2
 800720a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800720c:	2307      	movs	r3, #7
 800720e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007214:	4618      	mov	r0, r3
 8007216:	f7fb ff13 	bl	8003040 <HAL_RCC_OscConfig>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007220:	f000 fa44 	bl	80076ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007224:	230f      	movs	r3, #15
 8007226:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007228:	2302      	movs	r3, #2
 800722a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800722c:	2300      	movs	r3, #0
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007230:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800723a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800723c:	f107 031c 	add.w	r3, r7, #28
 8007240:	2105      	movs	r1, #5
 8007242:	4618      	mov	r0, r3
 8007244:	f7fc f93e 	bl	80034c4 <HAL_RCC_ClockConfig>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800724e:	f000 fa2d 	bl	80076ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007252:	2301      	movs	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007256:	23c0      	movs	r3, #192	; 0xc0
 8007258:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800725a:	2302      	movs	r3, #2
 800725c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc fb08 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800726e:	f000 fa1d 	bl	80076ac <Error_Handler>
  }
}
 8007272:	bf00      	nop
 8007274:	3760      	adds	r7, #96	; 0x60
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40023800 	.word	0x40023800
 8007280:	40007000 	.word	0x40007000

08007284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007288:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <MX_I2C1_Init+0x50>)
 800728a:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <MX_I2C1_Init+0x54>)
 800728c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <MX_I2C1_Init+0x50>)
 8007290:	4a12      	ldr	r2, [pc, #72]	; (80072dc <MX_I2C1_Init+0x58>)
 8007292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <MX_I2C1_Init+0x50>)
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <MX_I2C1_Init+0x50>)
 800729c:	2200      	movs	r2, #0
 800729e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80072ba:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072bc:	2200      	movs	r2, #0
 80072be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80072c0:	4804      	ldr	r0, [pc, #16]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072c2:	f7fb f8f5 	bl	80024b0 <HAL_I2C_Init>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80072cc:	f000 f9ee 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80072d0:	bf00      	nop
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000104 	.word	0x20000104
 80072d8:	40005400 	.word	0x40005400
 80072dc:	000186a0 	.word	0x000186a0

080072e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80072e4:	4b13      	ldr	r3, [pc, #76]	; (8007334 <MX_I2S3_Init+0x54>)
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <MX_I2S3_Init+0x58>)
 80072e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <MX_I2S3_Init+0x54>)
 80072ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80072f2:	4b10      	ldr	r3, [pc, #64]	; (8007334 <MX_I2S3_Init+0x54>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80072f8:	4b0e      	ldr	r3, [pc, #56]	; (8007334 <MX_I2S3_Init+0x54>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80072fe:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <MX_I2S3_Init+0x54>)
 8007300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007304:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <MX_I2S3_Init+0x54>)
 8007308:	4a0c      	ldr	r2, [pc, #48]	; (800733c <MX_I2S3_Init+0x5c>)
 800730a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800730c:	4b09      	ldr	r3, [pc, #36]	; (8007334 <MX_I2S3_Init+0x54>)
 800730e:	2200      	movs	r2, #0
 8007310:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <MX_I2S3_Init+0x54>)
 8007314:	2200      	movs	r2, #0
 8007316:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <MX_I2S3_Init+0x54>)
 800731a:	2200      	movs	r2, #0
 800731c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800731e:	4805      	ldr	r0, [pc, #20]	; (8007334 <MX_I2S3_Init+0x54>)
 8007320:	f7fb f9ee 	bl	8002700 <HAL_I2S_Init>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800732a:	f000 f9bf 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	200001b0 	.word	0x200001b0
 8007338:	40003c00 	.word	0x40003c00
 800733c:	00017700 	.word	0x00017700

08007340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007344:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007346:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <MX_SPI1_Init+0x68>)
 8007348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800734a:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <MX_SPI1_Init+0x64>)
 800734c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007352:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007354:	2200      	movs	r2, #0
 8007356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <MX_SPI1_Init+0x64>)
 800735a:	2200      	movs	r2, #0
 800735c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800735e:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007360:	2200      	movs	r2, #0
 8007362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007366:	2200      	movs	r2, #0
 8007368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <MX_SPI1_Init+0x64>)
 800736c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007370:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007374:	2200      	movs	r2, #0
 8007376:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <MX_SPI1_Init+0x64>)
 800737a:	2200      	movs	r2, #0
 800737c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007380:	2200      	movs	r2, #0
 8007382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007386:	2200      	movs	r2, #0
 8007388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <MX_SPI1_Init+0x64>)
 800738c:	220a      	movs	r2, #10
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007390:	4804      	ldr	r0, [pc, #16]	; (80073a4 <MX_SPI1_Init+0x64>)
 8007392:	f7fc fbaf 	bl	8003af4 <HAL_SPI_Init>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800739c:	f000 f986 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80073a0:	bf00      	nop
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000158 	.word	0x20000158
 80073a8:	40013000 	.word	0x40013000

080073ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	; 0x38
 80073b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	605a      	str	r2, [r3, #4]
 80073bc:	609a      	str	r2, [r3, #8]
 80073be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073c0:	f107 0320 	add.w	r3, r7, #32
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073ca:	1d3b      	adds	r3, r7, #4
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	609a      	str	r2, [r3, #8]
 80073d4:	60da      	str	r2, [r3, #12]
 80073d6:	611a      	str	r2, [r3, #16]
 80073d8:	615a      	str	r2, [r3, #20]
 80073da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80073dc:	4b2d      	ldr	r3, [pc, #180]	; (8007494 <MX_TIM4_Init+0xe8>)
 80073de:	4a2e      	ldr	r2, [pc, #184]	; (8007498 <MX_TIM4_Init+0xec>)
 80073e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5999;
 80073e2:	4b2c      	ldr	r3, [pc, #176]	; (8007494 <MX_TIM4_Init+0xe8>)
 80073e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80073e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073ea:	4b2a      	ldr	r3, [pc, #168]	; (8007494 <MX_TIM4_Init+0xe8>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55999;
 80073f0:	4b28      	ldr	r3, [pc, #160]	; (8007494 <MX_TIM4_Init+0xe8>)
 80073f2:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80073f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073f8:	4b26      	ldr	r3, [pc, #152]	; (8007494 <MX_TIM4_Init+0xe8>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80073fe:	4b25      	ldr	r3, [pc, #148]	; (8007494 <MX_TIM4_Init+0xe8>)
 8007400:	2280      	movs	r2, #128	; 0x80
 8007402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007404:	4823      	ldr	r0, [pc, #140]	; (8007494 <MX_TIM4_Init+0xe8>)
 8007406:	f7fc fbd9 	bl	8003bbc <HAL_TIM_Base_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8007410:	f000 f94c 	bl	80076ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800741a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800741e:	4619      	mov	r1, r3
 8007420:	481c      	ldr	r0, [pc, #112]	; (8007494 <MX_TIM4_Init+0xe8>)
 8007422:	f7fc fd2f 	bl	8003e84 <HAL_TIM_ConfigClockSource>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800742c:	f000 f93e 	bl	80076ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007430:	4818      	ldr	r0, [pc, #96]	; (8007494 <MX_TIM4_Init+0xe8>)
 8007432:	f7fc fbee 	bl	8003c12 <HAL_TIM_PWM_Init>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800743c:	f000 f936 	bl	80076ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007440:	2300      	movs	r3, #0
 8007442:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007444:	2300      	movs	r3, #0
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007448:	f107 0320 	add.w	r3, r7, #32
 800744c:	4619      	mov	r1, r3
 800744e:	4811      	ldr	r0, [pc, #68]	; (8007494 <MX_TIM4_Init+0xe8>)
 8007450:	f7fd f8df 	bl	8004612 <HAL_TIMEx_MasterConfigSynchronization>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800745a:	f000 f927 	bl	80076ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800745e:	2360      	movs	r3, #96	; 0x60
 8007460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30000;
 8007462:	f247 5330 	movw	r3, #30000	; 0x7530
 8007466:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007470:	1d3b      	adds	r3, r7, #4
 8007472:	2208      	movs	r2, #8
 8007474:	4619      	mov	r1, r3
 8007476:	4807      	ldr	r0, [pc, #28]	; (8007494 <MX_TIM4_Init+0xe8>)
 8007478:	f7fc fc3e 	bl	8003cf8 <HAL_TIM_PWM_ConfigChannel>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8007482:	f000 f913 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007486:	4803      	ldr	r0, [pc, #12]	; (8007494 <MX_TIM4_Init+0xe8>)
 8007488:	f000 fa5a 	bl	8007940 <HAL_TIM_MspPostInit>

}
 800748c:	bf00      	nop
 800748e:	3738      	adds	r7, #56	; 0x38
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	200000c4 	.word	0x200000c4
 8007498:	40000800 	.word	0x40000800

0800749c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08c      	sub	sp, #48	; 0x30
 80074a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a2:	f107 031c 	add.w	r3, r7, #28
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	605a      	str	r2, [r3, #4]
 80074ac:	609a      	str	r2, [r3, #8]
 80074ae:	60da      	str	r2, [r3, #12]
 80074b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	4b75      	ldr	r3, [pc, #468]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	4a74      	ldr	r2, [pc, #464]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074bc:	f043 0310 	orr.w	r3, r3, #16
 80074c0:	6313      	str	r3, [r2, #48]	; 0x30
 80074c2:	4b72      	ldr	r3, [pc, #456]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074ce:	2300      	movs	r3, #0
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	4b6e      	ldr	r3, [pc, #440]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	4a6d      	ldr	r2, [pc, #436]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074d8:	f043 0304 	orr.w	r3, r3, #4
 80074dc:	6313      	str	r3, [r2, #48]	; 0x30
 80074de:	4b6b      	ldr	r3, [pc, #428]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074ea:	2300      	movs	r3, #0
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	4b67      	ldr	r3, [pc, #412]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	4a66      	ldr	r2, [pc, #408]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	6313      	str	r3, [r2, #48]	; 0x30
 80074fa:	4b64      	ldr	r3, [pc, #400]	; (800768c <MX_GPIO_Init+0x1f0>)
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	4b60      	ldr	r3, [pc, #384]	; (800768c <MX_GPIO_Init+0x1f0>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	4a5f      	ldr	r2, [pc, #380]	; (800768c <MX_GPIO_Init+0x1f0>)
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	6313      	str	r3, [r2, #48]	; 0x30
 8007516:	4b5d      	ldr	r3, [pc, #372]	; (800768c <MX_GPIO_Init+0x1f0>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	4b59      	ldr	r3, [pc, #356]	; (800768c <MX_GPIO_Init+0x1f0>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	4a58      	ldr	r2, [pc, #352]	; (800768c <MX_GPIO_Init+0x1f0>)
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	6313      	str	r3, [r2, #48]	; 0x30
 8007532:	4b56      	ldr	r3, [pc, #344]	; (800768c <MX_GPIO_Init+0x1f0>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	60bb      	str	r3, [r7, #8]
 800753c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	607b      	str	r3, [r7, #4]
 8007542:	4b52      	ldr	r3, [pc, #328]	; (800768c <MX_GPIO_Init+0x1f0>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	4a51      	ldr	r2, [pc, #324]	; (800768c <MX_GPIO_Init+0x1f0>)
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	6313      	str	r3, [r2, #48]	; 0x30
 800754e:	4b4f      	ldr	r3, [pc, #316]	; (800768c <MX_GPIO_Init+0x1f0>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	607b      	str	r3, [r7, #4]
 8007558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800755a:	2200      	movs	r2, #0
 800755c:	2108      	movs	r1, #8
 800755e:	484c      	ldr	r0, [pc, #304]	; (8007690 <MX_GPIO_Init+0x1f4>)
 8007560:	f7f9 faf2 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007564:	2201      	movs	r2, #1
 8007566:	2101      	movs	r1, #1
 8007568:	484a      	ldr	r0, [pc, #296]	; (8007694 <MX_GPIO_Init+0x1f8>)
 800756a:	f7f9 faed 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800756e:	2200      	movs	r2, #0
 8007570:	f24b 0110 	movw	r1, #45072	; 0xb010
 8007574:	4848      	ldr	r0, [pc, #288]	; (8007698 <MX_GPIO_Init+0x1fc>)
 8007576:	f7f9 fae7 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800757a:	2308      	movs	r3, #8
 800757c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800757e:	2301      	movs	r3, #1
 8007580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007582:	2300      	movs	r3, #0
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007586:	2300      	movs	r3, #0
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800758a:	f107 031c 	add.w	r3, r7, #28
 800758e:	4619      	mov	r1, r3
 8007590:	483f      	ldr	r0, [pc, #252]	; (8007690 <MX_GPIO_Init+0x1f4>)
 8007592:	f7f9 f93f 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800759a:	2301      	movs	r3, #1
 800759c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a2:	2300      	movs	r3, #0
 80075a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80075a6:	f107 031c 	add.w	r3, r7, #28
 80075aa:	4619      	mov	r1, r3
 80075ac:	4839      	ldr	r0, [pc, #228]	; (8007694 <MX_GPIO_Init+0x1f8>)
 80075ae:	f7f9 f931 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80075b2:	2308      	movs	r3, #8
 80075b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b6:	2302      	movs	r3, #2
 80075b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075be:	2300      	movs	r3, #0
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80075c2:	2305      	movs	r3, #5
 80075c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80075c6:	f107 031c 	add.w	r3, r7, #28
 80075ca:	4619      	mov	r1, r3
 80075cc:	4831      	ldr	r0, [pc, #196]	; (8007694 <MX_GPIO_Init+0x1f8>)
 80075ce:	f7f9 f921 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80075d2:	2301      	movs	r3, #1
 80075d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80075d6:	4b31      	ldr	r3, [pc, #196]	; (800769c <MX_GPIO_Init+0x200>)
 80075d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075de:	f107 031c 	add.w	r3, r7, #28
 80075e2:	4619      	mov	r1, r3
 80075e4:	482e      	ldr	r0, [pc, #184]	; (80076a0 <MX_GPIO_Init+0x204>)
 80075e6:	f7f9 f915 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80075ea:	2304      	movs	r3, #4
 80075ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075ee:	2300      	movs	r3, #0
 80075f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80075f6:	f107 031c 	add.w	r3, r7, #28
 80075fa:	4619      	mov	r1, r3
 80075fc:	4829      	ldr	r0, [pc, #164]	; (80076a4 <MX_GPIO_Init+0x208>)
 80075fe:	f7f9 f909 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007608:	2302      	movs	r3, #2
 800760a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760c:	2300      	movs	r3, #0
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007610:	2300      	movs	r3, #0
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007614:	2305      	movs	r3, #5
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007618:	f107 031c 	add.w	r3, r7, #28
 800761c:	4619      	mov	r1, r3
 800761e:	4821      	ldr	r0, [pc, #132]	; (80076a4 <MX_GPIO_Init+0x208>)
 8007620:	f7f9 f8f8 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin;
 8007624:	f24b 0310 	movw	r3, #45072	; 0xb010
 8007628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800762a:	2301      	movs	r3, #1
 800762c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007632:	2300      	movs	r3, #0
 8007634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007636:	f107 031c 	add.w	r3, r7, #28
 800763a:	4619      	mov	r1, r3
 800763c:	4816      	ldr	r0, [pc, #88]	; (8007698 <MX_GPIO_Init+0x1fc>)
 800763e:	f7f9 f8e9 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007642:	2320      	movs	r3, #32
 8007644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007646:	2300      	movs	r3, #0
 8007648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800764a:	2300      	movs	r3, #0
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800764e:	f107 031c 	add.w	r3, r7, #28
 8007652:	4619      	mov	r1, r3
 8007654:	4810      	ldr	r0, [pc, #64]	; (8007698 <MX_GPIO_Init+0x1fc>)
 8007656:	f7f9 f8dd 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800765a:	2302      	movs	r3, #2
 800765c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800765e:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <MX_GPIO_Init+0x20c>)
 8007660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007662:	2300      	movs	r3, #0
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007666:	f107 031c 	add.w	r3, r7, #28
 800766a:	4619      	mov	r1, r3
 800766c:	4808      	ldr	r0, [pc, #32]	; (8007690 <MX_GPIO_Init+0x1f4>)
 800766e:	f7f9 f8d1 	bl	8000814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8007672:	2200      	movs	r2, #0
 8007674:	2107      	movs	r1, #7
 8007676:	2006      	movs	r0, #6
 8007678:	f7f9 f895 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800767c:	2006      	movs	r0, #6
 800767e:	f7f9 f8ae 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 8007682:	bf00      	nop
 8007684:	3730      	adds	r7, #48	; 0x30
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	40023800 	.word	0x40023800
 8007690:	40021000 	.word	0x40021000
 8007694:	40020800 	.word	0x40020800
 8007698:	40020c00 	.word	0x40020c00
 800769c:	10110000 	.word	0x10110000
 80076a0:	40020000 	.word	0x40020000
 80076a4:	40020400 	.word	0x40020400
 80076a8:	10120000 	.word	0x10120000

080076ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076b0:	bf00      	nop
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
 80076c6:	4b10      	ldr	r3, [pc, #64]	; (8007708 <HAL_MspInit+0x4c>)
 80076c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ca:	4a0f      	ldr	r2, [pc, #60]	; (8007708 <HAL_MspInit+0x4c>)
 80076cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076d0:	6453      	str	r3, [r2, #68]	; 0x44
 80076d2:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <HAL_MspInit+0x4c>)
 80076d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <HAL_MspInit+0x4c>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a08      	ldr	r2, [pc, #32]	; (8007708 <HAL_MspInit+0x4c>)
 80076e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_MspInit+0x4c>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80076fa:	2004      	movs	r0, #4
 80076fc:	f7f9 f848 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40023800 	.word	0x40023800

0800770c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	; 0x28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	609a      	str	r2, [r3, #8]
 8007720:	60da      	str	r2, [r3, #12]
 8007722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a19      	ldr	r2, [pc, #100]	; (8007790 <HAL_I2C_MspInit+0x84>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d12c      	bne.n	8007788 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	4b18      	ldr	r3, [pc, #96]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007738:	f043 0302 	orr.w	r3, r3, #2
 800773c:	6313      	str	r3, [r2, #48]	; 0x30
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800774a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800774e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007750:	2312      	movs	r3, #18
 8007752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007754:	2301      	movs	r3, #1
 8007756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007758:	2300      	movs	r3, #0
 800775a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800775c:	2304      	movs	r3, #4
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007760:	f107 0314 	add.w	r3, r7, #20
 8007764:	4619      	mov	r1, r3
 8007766:	480c      	ldr	r0, [pc, #48]	; (8007798 <HAL_I2C_MspInit+0x8c>)
 8007768:	f7f9 f854 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	4b08      	ldr	r3, [pc, #32]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	4a07      	ldr	r2, [pc, #28]	; (8007794 <HAL_I2C_MspInit+0x88>)
 8007776:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800777a:	6413      	str	r3, [r2, #64]	; 0x40
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <HAL_I2C_MspInit+0x88>)
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007788:	bf00      	nop
 800778a:	3728      	adds	r7, #40	; 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40005400 	.word	0x40005400
 8007794:	40023800 	.word	0x40023800
 8007798:	40020400 	.word	0x40020400

0800779c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a4:	f107 0314 	add.w	r3, r7, #20
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	605a      	str	r2, [r3, #4]
 80077ae:	609a      	str	r2, [r3, #8]
 80077b0:	60da      	str	r2, [r3, #12]
 80077b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a28      	ldr	r2, [pc, #160]	; (800785c <HAL_I2S_MspInit+0xc0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d14a      	bne.n	8007854 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80077be:	2300      	movs	r3, #0
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	4b27      	ldr	r3, [pc, #156]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a26      	ldr	r2, [pc, #152]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077cc:	6413      	str	r3, [r2, #64]	; 0x40
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	6313      	str	r3, [r2, #48]	; 0x30
 80077ea:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	4b19      	ldr	r3, [pc, #100]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	4a18      	ldr	r2, [pc, #96]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 8007800:	f043 0304 	orr.w	r3, r3, #4
 8007804:	6313      	str	r3, [r2, #48]	; 0x30
 8007806:	4b16      	ldr	r3, [pc, #88]	; (8007860 <HAL_I2S_MspInit+0xc4>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	60bb      	str	r3, [r7, #8]
 8007810:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007812:	2310      	movs	r3, #16
 8007814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007816:	2302      	movs	r3, #2
 8007818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781a:	2300      	movs	r3, #0
 800781c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800781e:	2300      	movs	r3, #0
 8007820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007822:	2306      	movs	r3, #6
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007826:	f107 0314 	add.w	r3, r7, #20
 800782a:	4619      	mov	r1, r3
 800782c:	480d      	ldr	r0, [pc, #52]	; (8007864 <HAL_I2S_MspInit+0xc8>)
 800782e:	f7f8 fff1 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007832:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007838:	2302      	movs	r3, #2
 800783a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800783c:	2300      	movs	r3, #0
 800783e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007840:	2300      	movs	r3, #0
 8007842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007844:	2306      	movs	r3, #6
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	4619      	mov	r1, r3
 800784e:	4806      	ldr	r0, [pc, #24]	; (8007868 <HAL_I2S_MspInit+0xcc>)
 8007850:	f7f8 ffe0 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007854:	bf00      	nop
 8007856:	3728      	adds	r7, #40	; 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40003c00 	.word	0x40003c00
 8007860:	40023800 	.word	0x40023800
 8007864:	40020000 	.word	0x40020000
 8007868:	40020800 	.word	0x40020800

0800786c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a19      	ldr	r2, [pc, #100]	; (80078f0 <HAL_SPI_MspInit+0x84>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d12b      	bne.n	80078e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	4b18      	ldr	r3, [pc, #96]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	4a17      	ldr	r2, [pc, #92]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 8007898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800789c:	6453      	str	r3, [r2, #68]	; 0x44
 800789e:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	6313      	str	r3, [r2, #48]	; 0x30
 80078ba:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <HAL_SPI_MspInit+0x88>)
 80078bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80078c6:	23e0      	movs	r3, #224	; 0xe0
 80078c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ca:	2302      	movs	r3, #2
 80078cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d2:	2300      	movs	r3, #0
 80078d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80078d6:	2305      	movs	r3, #5
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078da:	f107 0314 	add.w	r3, r7, #20
 80078de:	4619      	mov	r1, r3
 80078e0:	4805      	ldr	r0, [pc, #20]	; (80078f8 <HAL_SPI_MspInit+0x8c>)
 80078e2:	f7f8 ff97 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80078e6:	bf00      	nop
 80078e8:	3728      	adds	r7, #40	; 0x28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40013000 	.word	0x40013000
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40020000 	.word	0x40020000

080078fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a0b      	ldr	r2, [pc, #44]	; (8007938 <HAL_TIM_Base_MspInit+0x3c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d10d      	bne.n	800792a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	4b0a      	ldr	r3, [pc, #40]	; (800793c <HAL_TIM_Base_MspInit+0x40>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	4a09      	ldr	r2, [pc, #36]	; (800793c <HAL_TIM_Base_MspInit+0x40>)
 8007918:	f043 0304 	orr.w	r3, r3, #4
 800791c:	6413      	str	r3, [r2, #64]	; 0x40
 800791e:	4b07      	ldr	r3, [pc, #28]	; (800793c <HAL_TIM_Base_MspInit+0x40>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40000800 	.word	0x40000800
 800793c:	40023800 	.word	0x40023800

08007940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007948:	f107 030c 	add.w	r3, r7, #12
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	605a      	str	r2, [r3, #4]
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	60da      	str	r2, [r3, #12]
 8007956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a12      	ldr	r2, [pc, #72]	; (80079a8 <HAL_TIM_MspPostInit+0x68>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d11e      	bne.n	80079a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	4b11      	ldr	r3, [pc, #68]	; (80079ac <HAL_TIM_MspPostInit+0x6c>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <HAL_TIM_MspPostInit+0x6c>)
 800796c:	f043 0308 	orr.w	r3, r3, #8
 8007970:	6313      	str	r3, [r2, #48]	; 0x30
 8007972:	4b0e      	ldr	r3, [pc, #56]	; (80079ac <HAL_TIM_MspPostInit+0x6c>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	60bb      	str	r3, [r7, #8]
 800797c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800797e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007982:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007984:	2302      	movs	r3, #2
 8007986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800798c:	2300      	movs	r3, #0
 800798e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007990:	2302      	movs	r3, #2
 8007992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4619      	mov	r1, r3
 800799a:	4805      	ldr	r0, [pc, #20]	; (80079b0 <HAL_TIM_MspPostInit+0x70>)
 800799c:	f7f8 ff3a 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80079a0:	bf00      	nop
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40023800 	.word	0x40023800
 80079b0:	40020c00 	.word	0x40020c00

080079b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80079b8:	bf00      	nop
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079c6:	e7fe      	b.n	80079c6 <HardFault_Handler+0x4>

080079c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079cc:	e7fe      	b.n	80079cc <MemManage_Handler+0x4>

080079ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079d2:	e7fe      	b.n	80079d2 <BusFault_Handler+0x4>

080079d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079d8:	e7fe      	b.n	80079d8 <UsageFault_Handler+0x4>

080079da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079de:	bf00      	nop
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079ec:	bf00      	nop
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079f6:	b480      	push	{r7}
 80079f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079fa:	bf00      	nop
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a08:	f7f8 fdb0 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007a14:	2001      	movs	r0, #1
 8007a16:	f7f9 f8cb 	bl	8000bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007a1a:	bf00      	nop
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <OTG_FS_IRQHandler+0x10>)
 8007a26:	f7f9 fb61 	bl	80010ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	200005c4 	.word	0x200005c4

08007a34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a3c:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <_sbrk+0x50>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <_sbrk+0x16>
		heap_end = &end;
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <_sbrk+0x50>)
 8007a46:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <_sbrk+0x54>)
 8007a48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a4a:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <_sbrk+0x50>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <_sbrk+0x50>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4413      	add	r3, r2
 8007a58:	466a      	mov	r2, sp
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d907      	bls.n	8007a6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a5e:	f000 fb7d 	bl	800815c <__errno>
 8007a62:	4602      	mov	r2, r0
 8007a64:	230c      	movs	r3, #12
 8007a66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a68:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6c:	e006      	b.n	8007a7c <_sbrk+0x48>
	}

	heap_end += incr;
 8007a6e:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <_sbrk+0x50>)
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	4a03      	ldr	r2, [pc, #12]	; (8007a84 <_sbrk+0x50>)
 8007a78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	200000b0 	.word	0x200000b0
 8007a88:	20000890 	.word	0x20000890

08007a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a90:	4b16      	ldr	r3, [pc, #88]	; (8007aec <SystemInit+0x60>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <SystemInit+0x60>)
 8007a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007aa0:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <SystemInit+0x64>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a12      	ldr	r2, [pc, #72]	; (8007af0 <SystemInit+0x64>)
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <SystemInit+0x64>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <SystemInit+0x64>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a0e      	ldr	r2, [pc, #56]	; (8007af0 <SystemInit+0x64>)
 8007ab8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ac0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <SystemInit+0x64>)
 8007ac4:	4a0b      	ldr	r2, [pc, #44]	; (8007af4 <SystemInit+0x68>)
 8007ac6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007ac8:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <SystemInit+0x64>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a08      	ldr	r2, [pc, #32]	; (8007af0 <SystemInit+0x64>)
 8007ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ad2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <SystemInit+0x64>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ada:	4b04      	ldr	r3, [pc, #16]	; (8007aec <SystemInit+0x60>)
 8007adc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ae0:	609a      	str	r2, [r3, #8]
#endif
}
 8007ae2:	bf00      	nop
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	e000ed00 	.word	0xe000ed00
 8007af0:	40023800 	.word	0x40023800
 8007af4:	24003010 	.word	0x24003010

08007af8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007afc:	2201      	movs	r2, #1
 8007afe:	490e      	ldr	r1, [pc, #56]	; (8007b38 <MX_USB_HOST_Init+0x40>)
 8007b00:	480e      	ldr	r0, [pc, #56]	; (8007b3c <MX_USB_HOST_Init+0x44>)
 8007b02:	f7fe f8a3 	bl	8005c4c <USBH_Init>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007b0c:	f7ff fdce 	bl	80076ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007b10:	490b      	ldr	r1, [pc, #44]	; (8007b40 <MX_USB_HOST_Init+0x48>)
 8007b12:	480a      	ldr	r0, [pc, #40]	; (8007b3c <MX_USB_HOST_Init+0x44>)
 8007b14:	f7fe f90d 	bl	8005d32 <USBH_RegisterClass>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007b1e:	f7ff fdc5 	bl	80076ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007b22:	4806      	ldr	r0, [pc, #24]	; (8007b3c <MX_USB_HOST_Init+0x44>)
 8007b24:	f7fe f992 	bl	8005e4c <USBH_Start>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007b2e:	f7ff fdbd 	bl	80076ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007b32:	bf00      	nop
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	08007b59 	.word	0x08007b59
 8007b3c:	200001f8 	.word	0x200001f8
 8007b40:	20000008 	.word	0x20000008

08007b44 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007b48:	4802      	ldr	r0, [pc, #8]	; (8007b54 <MX_USB_HOST_Process+0x10>)
 8007b4a:	f7fe f98f 	bl	8005e6c <USBH_Process>
}
 8007b4e:	bf00      	nop
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200001f8 	.word	0x200001f8

08007b58 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d819      	bhi.n	8007ba0 <USBH_UserProcess+0x48>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <USBH_UserProcess+0x1c>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	08007b91 	.word	0x08007b91
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007b99 	.word	0x08007b99
 8007b84:	08007b89 	.word	0x08007b89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007b88:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <USBH_UserProcess+0x58>)
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	701a      	strb	r2, [r3, #0]
  break;
 8007b8e:	e008      	b.n	8007ba2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b90:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <USBH_UserProcess+0x58>)
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
  break;
 8007b96:	e004      	b.n	8007ba2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <USBH_UserProcess+0x58>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
  break;
 8007b9e:	e000      	b.n	8007ba2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ba0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	200000b4 	.word	0x200000b4

08007bb4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bbc:	f107 0314 	add.w	r3, r7, #20
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	609a      	str	r2, [r3, #8]
 8007bc8:	60da      	str	r2, [r3, #12]
 8007bca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bd4:	d147      	bne.n	8007c66 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	613b      	str	r3, [r7, #16]
 8007bda:	4b25      	ldr	r3, [pc, #148]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	4a24      	ldr	r2, [pc, #144]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	6313      	str	r3, [r2, #48]	; 0x30
 8007be6:	4b22      	ldr	r3, [pc, #136]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	613b      	str	r3, [r7, #16]
 8007bf0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007c00:	f107 0314 	add.w	r3, r7, #20
 8007c04:	4619      	mov	r1, r3
 8007c06:	481b      	ldr	r0, [pc, #108]	; (8007c74 <HAL_HCD_MspInit+0xc0>)
 8007c08:	f7f8 fe04 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007c0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c12:	2302      	movs	r3, #2
 8007c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c1e:	230a      	movs	r3, #10
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c22:	f107 0314 	add.w	r3, r7, #20
 8007c26:	4619      	mov	r1, r3
 8007c28:	4812      	ldr	r0, [pc, #72]	; (8007c74 <HAL_HCD_MspInit+0xc0>)
 8007c2a:	f7f8 fdf3 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c2e:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	4a0f      	ldr	r2, [pc, #60]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c38:	6353      	str	r3, [r2, #52]	; 0x34
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c42:	4a0b      	ldr	r2, [pc, #44]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c48:	6453      	str	r3, [r2, #68]	; 0x44
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <HAL_HCD_MspInit+0xbc>)
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	2043      	movs	r0, #67	; 0x43
 8007c5c:	f7f8 fda3 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c60:	2043      	movs	r0, #67	; 0x43
 8007c62:	f7f8 fdbc 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c66:	bf00      	nop
 8007c68:	3728      	adds	r7, #40	; 0x28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40023800 	.word	0x40023800
 8007c74:	40020000 	.word	0x40020000

08007c78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fba1 	bl	80063ce <USBH_LL_IncTimer>
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fbe6 	bl	8006474 <USBH_LL_Connect>
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fbfe 	bl	80064c0 <USBH_LL_Disconnect>
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fb93 	bl	8006422 <USBH_LL_PortEnabled>
} 
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fb93 	bl	800643e <USBH_LL_PortDisabled>
} 
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d12a      	bne.n	8007d88 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007d32:	4a18      	ldr	r2, [pc, #96]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a15      	ldr	r2, [pc, #84]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d42:	4b14      	ldr	r3, [pc, #80]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d48:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007d50:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d5e:	2202      	movs	r2, #2
 8007d60:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d62:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007d68:	480a      	ldr	r0, [pc, #40]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d6a:	f7f8 ff39 	bl	8000be0 <HAL_HCD_Init>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007d74:	f7ff fc9a 	bl	80076ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007d78:	4806      	ldr	r0, [pc, #24]	; (8007d94 <USBH_LL_Init+0x74>)
 8007d7a:	f7f9 fb35 	bl	80013e8 <HAL_HCD_GetCurrentFrame>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7fe fb14 	bl	80063b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	200005c4 	.word	0x200005c4

08007d98 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7f9 faa2 	bl	80012f8 <HAL_HCD_Start>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f95c 	bl	8008078 <USBH_Get_USB_Status>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7f9 faaa 	bl	800133e <HAL_HCD_Stop>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f941 	bl	8008078 <USBH_Get_USB_Status>
 8007df6:	4603      	mov	r3, r0
 8007df8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7f9 faf4 	bl	8001404 <HAL_HCD_GetCurrentSpeed>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d007      	beq.n	8007e32 <USBH_LL_GetSpeed+0x2e>
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d302      	bcc.n	8007e2c <USBH_LL_GetSpeed+0x28>
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d006      	beq.n	8007e38 <USBH_LL_GetSpeed+0x34>
 8007e2a:	e008      	b.n	8007e3e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e30:	e008      	b.n	8007e44 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007e32:	2301      	movs	r3, #1
 8007e34:	73fb      	strb	r3, [r7, #15]
    break;
 8007e36:	e005      	b.n	8007e44 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3c:	e002      	b.n	8007e44 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
    break;
 8007e42:	bf00      	nop
  }
  return  speed;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7f9 fa87 	bl	8001378 <HAL_HCD_ResetPort>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f901 	bl	8008078 <USBH_Get_USB_Status>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e96:	78fa      	ldrb	r2, [r7, #3]
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f9 fa8f 	bl	80013be <HAL_HCD_HC_GetXferCount>
 8007ea0:	4603      	mov	r3, r0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007eaa:	b590      	push	{r4, r7, lr}
 8007eac:	b089      	sub	sp, #36	; 0x24
 8007eae:	af04      	add	r7, sp, #16
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	70fb      	strb	r3, [r7, #3]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70bb      	strb	r3, [r7, #2]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007ed2:	787c      	ldrb	r4, [r7, #1]
 8007ed4:	78ba      	ldrb	r2, [r7, #2]
 8007ed6:	78f9      	ldrb	r1, [r7, #3]
 8007ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007eda:	9302      	str	r3, [sp, #8]
 8007edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	4623      	mov	r3, r4
 8007eea:	f7f8 fedb 	bl	8000ca4 <HAL_HCD_HC_Init>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 f8bf 	bl	8008078 <USBH_Get_USB_Status>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd90      	pop	{r4, r7, pc}

08007f08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7f8 ff54 	bl	8000dd4 <HAL_HCD_HC_Halt>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f8a0 	bl	8008078 <USBH_Get_USB_Status>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007f46:	b590      	push	{r4, r7, lr}
 8007f48:	b089      	sub	sp, #36	; 0x24
 8007f4a:	af04      	add	r7, sp, #16
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	4608      	mov	r0, r1
 8007f50:	4611      	mov	r1, r2
 8007f52:	461a      	mov	r2, r3
 8007f54:	4603      	mov	r3, r0
 8007f56:	70fb      	strb	r3, [r7, #3]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70bb      	strb	r3, [r7, #2]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007f6e:	787c      	ldrb	r4, [r7, #1]
 8007f70:	78ba      	ldrb	r2, [r7, #2]
 8007f72:	78f9      	ldrb	r1, [r7, #3]
 8007f74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f78:	9303      	str	r3, [sp, #12]
 8007f7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f7c:	9302      	str	r3, [sp, #8]
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	4623      	mov	r3, r4
 8007f8a:	f7f8 ff47 	bl	8000e1c <HAL_HCD_HC_SubmitRequest>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f86f 	bl	8008078 <USBH_Get_USB_Status>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd90      	pop	{r4, r7, pc}

08007fa8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7f9 f9e8 	bl	8001394 <HAL_HCD_HC_GetURBState>
 8007fc4:	4603      	mov	r3, r0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d103      	bne.n	8007fec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f872 	bl	80080d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007fec:	20c8      	movs	r0, #200	; 0xc8
 8007fee:	f7f8 fadd 	bl	80005ac <HAL_Delay>
  return USBH_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
 8008008:	4613      	mov	r3, r2
 800800a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008012:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008014:	78fa      	ldrb	r2, [r7, #3]
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	440b      	add	r3, r1
 8008022:	333b      	adds	r3, #59	; 0x3b
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800802a:	78fa      	ldrb	r2, [r7, #3]
 800802c:	68f9      	ldr	r1, [r7, #12]
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	440b      	add	r3, r1
 8008038:	3350      	adds	r3, #80	; 0x50
 800803a:	78ba      	ldrb	r2, [r7, #2]
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e009      	b.n	8008054 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	440b      	add	r3, r1
 800804e:	3351      	adds	r3, #81	; 0x51
 8008050:	78ba      	ldrb	r2, [r7, #2]
 8008052:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7f8 fa9e 	bl	80005ac <HAL_Delay>
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	2b03      	cmp	r3, #3
 800808a:	d817      	bhi.n	80080bc <USBH_Get_USB_Status+0x44>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBH_Get_USB_Status+0x1c>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080ab 	.word	0x080080ab
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080b7 	.word	0x080080b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
    break;
 80080a8:	e00b      	b.n	80080c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80080aa:	2302      	movs	r3, #2
 80080ac:	73fb      	strb	r3, [r7, #15]
    break;
 80080ae:	e008      	b.n	80080c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
    break;
 80080b4:	e005      	b.n	80080c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80080b6:	2302      	movs	r3, #2
 80080b8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ba:	e002      	b.n	80080c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80080bc:	2302      	movs	r3, #2
 80080be:	73fb      	strb	r3, [r7, #15]
    break;
 80080c0:	bf00      	nop
  }
  return usb_status;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
 80080e8:	e001      	b.n	80080ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	461a      	mov	r2, r3
 80080f2:	2101      	movs	r1, #1
 80080f4:	4803      	ldr	r0, [pc, #12]	; (8008104 <MX_DriverVbusFS+0x34>)
 80080f6:	f7f8 fd27 	bl	8000b48 <HAL_GPIO_WritePin>
}
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40020800 	.word	0x40020800

08008108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008140 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800810c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800810e:	e003      	b.n	8008118 <LoopCopyDataInit>

08008110 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008110:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008112:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008114:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008116:	3104      	adds	r1, #4

08008118 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008118:	480b      	ldr	r0, [pc, #44]	; (8008148 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800811c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800811e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008120:	d3f6      	bcc.n	8008110 <CopyDataInit>
  ldr  r2, =_sbss
 8008122:	4a0b      	ldr	r2, [pc, #44]	; (8008150 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008124:	e002      	b.n	800812c <LoopFillZerobss>

08008126 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008126:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008128:	f842 3b04 	str.w	r3, [r2], #4

0800812c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800812e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008130:	d3f9      	bcc.n	8008126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008132:	f7ff fcab 	bl	8007a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008136:	f000 f817 	bl	8008168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800813a:	f7ff f805 	bl	8007148 <main>
  bx  lr    
 800813e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008140:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008144:	08008398 	.word	0x08008398
  ldr  r0, =_sdata
 8008148:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800814c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008150:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008154:	2000088c 	.word	0x2000088c

08008158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008158:	e7fe      	b.n	8008158 <ADC_IRQHandler>
	...

0800815c <__errno>:
 800815c:	4b01      	ldr	r3, [pc, #4]	; (8008164 <__errno+0x8>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	2000002c 	.word	0x2000002c

08008168 <__libc_init_array>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	4e0d      	ldr	r6, [pc, #52]	; (80081a0 <__libc_init_array+0x38>)
 800816c:	4c0d      	ldr	r4, [pc, #52]	; (80081a4 <__libc_init_array+0x3c>)
 800816e:	1ba4      	subs	r4, r4, r6
 8008170:	10a4      	asrs	r4, r4, #2
 8008172:	2500      	movs	r5, #0
 8008174:	42a5      	cmp	r5, r4
 8008176:	d109      	bne.n	800818c <__libc_init_array+0x24>
 8008178:	4e0b      	ldr	r6, [pc, #44]	; (80081a8 <__libc_init_array+0x40>)
 800817a:	4c0c      	ldr	r4, [pc, #48]	; (80081ac <__libc_init_array+0x44>)
 800817c:	f000 f8ea 	bl	8008354 <_init>
 8008180:	1ba4      	subs	r4, r4, r6
 8008182:	10a4      	asrs	r4, r4, #2
 8008184:	2500      	movs	r5, #0
 8008186:	42a5      	cmp	r5, r4
 8008188:	d105      	bne.n	8008196 <__libc_init_array+0x2e>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008190:	4798      	blx	r3
 8008192:	3501      	adds	r5, #1
 8008194:	e7ee      	b.n	8008174 <__libc_init_array+0xc>
 8008196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800819a:	4798      	blx	r3
 800819c:	3501      	adds	r5, #1
 800819e:	e7f2      	b.n	8008186 <__libc_init_array+0x1e>
 80081a0:	08008390 	.word	0x08008390
 80081a4:	08008390 	.word	0x08008390
 80081a8:	08008390 	.word	0x08008390
 80081ac:	08008394 	.word	0x08008394

080081b0 <malloc>:
 80081b0:	4b02      	ldr	r3, [pc, #8]	; (80081bc <malloc+0xc>)
 80081b2:	4601      	mov	r1, r0
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	f000 b861 	b.w	800827c <_malloc_r>
 80081ba:	bf00      	nop
 80081bc:	2000002c 	.word	0x2000002c

080081c0 <free>:
 80081c0:	4b02      	ldr	r3, [pc, #8]	; (80081cc <free+0xc>)
 80081c2:	4601      	mov	r1, r0
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f000 b80b 	b.w	80081e0 <_free_r>
 80081ca:	bf00      	nop
 80081cc:	2000002c 	.word	0x2000002c

080081d0 <memset>:
 80081d0:	4402      	add	r2, r0
 80081d2:	4603      	mov	r3, r0
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d100      	bne.n	80081da <memset+0xa>
 80081d8:	4770      	bx	lr
 80081da:	f803 1b01 	strb.w	r1, [r3], #1
 80081de:	e7f9      	b.n	80081d4 <memset+0x4>

080081e0 <_free_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4605      	mov	r5, r0
 80081e4:	2900      	cmp	r1, #0
 80081e6:	d045      	beq.n	8008274 <_free_r+0x94>
 80081e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ec:	1f0c      	subs	r4, r1, #4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bfb8      	it	lt
 80081f2:	18e4      	addlt	r4, r4, r3
 80081f4:	f000 f8ac 	bl	8008350 <__malloc_lock>
 80081f8:	4a1f      	ldr	r2, [pc, #124]	; (8008278 <_free_r+0x98>)
 80081fa:	6813      	ldr	r3, [r2, #0]
 80081fc:	4610      	mov	r0, r2
 80081fe:	b933      	cbnz	r3, 800820e <_free_r+0x2e>
 8008200:	6063      	str	r3, [r4, #4]
 8008202:	6014      	str	r4, [r2, #0]
 8008204:	4628      	mov	r0, r5
 8008206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800820a:	f000 b8a2 	b.w	8008352 <__malloc_unlock>
 800820e:	42a3      	cmp	r3, r4
 8008210:	d90c      	bls.n	800822c <_free_r+0x4c>
 8008212:	6821      	ldr	r1, [r4, #0]
 8008214:	1862      	adds	r2, r4, r1
 8008216:	4293      	cmp	r3, r2
 8008218:	bf04      	itt	eq
 800821a:	681a      	ldreq	r2, [r3, #0]
 800821c:	685b      	ldreq	r3, [r3, #4]
 800821e:	6063      	str	r3, [r4, #4]
 8008220:	bf04      	itt	eq
 8008222:	1852      	addeq	r2, r2, r1
 8008224:	6022      	streq	r2, [r4, #0]
 8008226:	6004      	str	r4, [r0, #0]
 8008228:	e7ec      	b.n	8008204 <_free_r+0x24>
 800822a:	4613      	mov	r3, r2
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	b10a      	cbz	r2, 8008234 <_free_r+0x54>
 8008230:	42a2      	cmp	r2, r4
 8008232:	d9fa      	bls.n	800822a <_free_r+0x4a>
 8008234:	6819      	ldr	r1, [r3, #0]
 8008236:	1858      	adds	r0, r3, r1
 8008238:	42a0      	cmp	r0, r4
 800823a:	d10b      	bne.n	8008254 <_free_r+0x74>
 800823c:	6820      	ldr	r0, [r4, #0]
 800823e:	4401      	add	r1, r0
 8008240:	1858      	adds	r0, r3, r1
 8008242:	4282      	cmp	r2, r0
 8008244:	6019      	str	r1, [r3, #0]
 8008246:	d1dd      	bne.n	8008204 <_free_r+0x24>
 8008248:	6810      	ldr	r0, [r2, #0]
 800824a:	6852      	ldr	r2, [r2, #4]
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	4401      	add	r1, r0
 8008250:	6019      	str	r1, [r3, #0]
 8008252:	e7d7      	b.n	8008204 <_free_r+0x24>
 8008254:	d902      	bls.n	800825c <_free_r+0x7c>
 8008256:	230c      	movs	r3, #12
 8008258:	602b      	str	r3, [r5, #0]
 800825a:	e7d3      	b.n	8008204 <_free_r+0x24>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	1821      	adds	r1, r4, r0
 8008260:	428a      	cmp	r2, r1
 8008262:	bf04      	itt	eq
 8008264:	6811      	ldreq	r1, [r2, #0]
 8008266:	6852      	ldreq	r2, [r2, #4]
 8008268:	6062      	str	r2, [r4, #4]
 800826a:	bf04      	itt	eq
 800826c:	1809      	addeq	r1, r1, r0
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	605c      	str	r4, [r3, #4]
 8008272:	e7c7      	b.n	8008204 <_free_r+0x24>
 8008274:	bd38      	pop	{r3, r4, r5, pc}
 8008276:	bf00      	nop
 8008278:	200000b8 	.word	0x200000b8

0800827c <_malloc_r>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	1ccd      	adds	r5, r1, #3
 8008280:	f025 0503 	bic.w	r5, r5, #3
 8008284:	3508      	adds	r5, #8
 8008286:	2d0c      	cmp	r5, #12
 8008288:	bf38      	it	cc
 800828a:	250c      	movcc	r5, #12
 800828c:	2d00      	cmp	r5, #0
 800828e:	4606      	mov	r6, r0
 8008290:	db01      	blt.n	8008296 <_malloc_r+0x1a>
 8008292:	42a9      	cmp	r1, r5
 8008294:	d903      	bls.n	800829e <_malloc_r+0x22>
 8008296:	230c      	movs	r3, #12
 8008298:	6033      	str	r3, [r6, #0]
 800829a:	2000      	movs	r0, #0
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	f000 f857 	bl	8008350 <__malloc_lock>
 80082a2:	4a21      	ldr	r2, [pc, #132]	; (8008328 <_malloc_r+0xac>)
 80082a4:	6814      	ldr	r4, [r2, #0]
 80082a6:	4621      	mov	r1, r4
 80082a8:	b991      	cbnz	r1, 80082d0 <_malloc_r+0x54>
 80082aa:	4c20      	ldr	r4, [pc, #128]	; (800832c <_malloc_r+0xb0>)
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	b91b      	cbnz	r3, 80082b8 <_malloc_r+0x3c>
 80082b0:	4630      	mov	r0, r6
 80082b2:	f000 f83d 	bl	8008330 <_sbrk_r>
 80082b6:	6020      	str	r0, [r4, #0]
 80082b8:	4629      	mov	r1, r5
 80082ba:	4630      	mov	r0, r6
 80082bc:	f000 f838 	bl	8008330 <_sbrk_r>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d124      	bne.n	800830e <_malloc_r+0x92>
 80082c4:	230c      	movs	r3, #12
 80082c6:	6033      	str	r3, [r6, #0]
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 f842 	bl	8008352 <__malloc_unlock>
 80082ce:	e7e4      	b.n	800829a <_malloc_r+0x1e>
 80082d0:	680b      	ldr	r3, [r1, #0]
 80082d2:	1b5b      	subs	r3, r3, r5
 80082d4:	d418      	bmi.n	8008308 <_malloc_r+0x8c>
 80082d6:	2b0b      	cmp	r3, #11
 80082d8:	d90f      	bls.n	80082fa <_malloc_r+0x7e>
 80082da:	600b      	str	r3, [r1, #0]
 80082dc:	50cd      	str	r5, [r1, r3]
 80082de:	18cc      	adds	r4, r1, r3
 80082e0:	4630      	mov	r0, r6
 80082e2:	f000 f836 	bl	8008352 <__malloc_unlock>
 80082e6:	f104 000b 	add.w	r0, r4, #11
 80082ea:	1d23      	adds	r3, r4, #4
 80082ec:	f020 0007 	bic.w	r0, r0, #7
 80082f0:	1ac3      	subs	r3, r0, r3
 80082f2:	d0d3      	beq.n	800829c <_malloc_r+0x20>
 80082f4:	425a      	negs	r2, r3
 80082f6:	50e2      	str	r2, [r4, r3]
 80082f8:	e7d0      	b.n	800829c <_malloc_r+0x20>
 80082fa:	428c      	cmp	r4, r1
 80082fc:	684b      	ldr	r3, [r1, #4]
 80082fe:	bf16      	itet	ne
 8008300:	6063      	strne	r3, [r4, #4]
 8008302:	6013      	streq	r3, [r2, #0]
 8008304:	460c      	movne	r4, r1
 8008306:	e7eb      	b.n	80082e0 <_malloc_r+0x64>
 8008308:	460c      	mov	r4, r1
 800830a:	6849      	ldr	r1, [r1, #4]
 800830c:	e7cc      	b.n	80082a8 <_malloc_r+0x2c>
 800830e:	1cc4      	adds	r4, r0, #3
 8008310:	f024 0403 	bic.w	r4, r4, #3
 8008314:	42a0      	cmp	r0, r4
 8008316:	d005      	beq.n	8008324 <_malloc_r+0xa8>
 8008318:	1a21      	subs	r1, r4, r0
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f808 	bl	8008330 <_sbrk_r>
 8008320:	3001      	adds	r0, #1
 8008322:	d0cf      	beq.n	80082c4 <_malloc_r+0x48>
 8008324:	6025      	str	r5, [r4, #0]
 8008326:	e7db      	b.n	80082e0 <_malloc_r+0x64>
 8008328:	200000b8 	.word	0x200000b8
 800832c:	200000bc 	.word	0x200000bc

08008330 <_sbrk_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4c06      	ldr	r4, [pc, #24]	; (800834c <_sbrk_r+0x1c>)
 8008334:	2300      	movs	r3, #0
 8008336:	4605      	mov	r5, r0
 8008338:	4608      	mov	r0, r1
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	f7ff fb7a 	bl	8007a34 <_sbrk>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_sbrk_r+0x1a>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	b103      	cbz	r3, 800834a <_sbrk_r+0x1a>
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20000888 	.word	0x20000888

08008350 <__malloc_lock>:
 8008350:	4770      	bx	lr

08008352 <__malloc_unlock>:
 8008352:	4770      	bx	lr

08008354 <_init>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	bf00      	nop
 8008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835a:	bc08      	pop	{r3}
 800835c:	469e      	mov	lr, r3
 800835e:	4770      	bx	lr

08008360 <_fini>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	bf00      	nop
 8008364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008366:	bc08      	pop	{r3}
 8008368:	469e      	mov	lr, r3
 800836a:	4770      	bx	lr
