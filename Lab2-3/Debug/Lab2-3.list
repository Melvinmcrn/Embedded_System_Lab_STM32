
Lab2-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007274  08007274  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800727c  0800727c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  08007314  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08007314  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019237  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003762  00000000  00000000  000392f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d8  00000000  00000000  0003ca60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024871  00000000  00000000  0003ee98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011edc  00000000  00000000  00063709  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc35a  00000000  00000000  000755e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014193f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  001419bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007240 	.word	0x08007240

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007240 	.word	0x08007240

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f006 f8c4 	bl	8006688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	200000c0 	.word	0x200000c0

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000c0 	.word	0x200000c0

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x4a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d123      	bne.n	80008a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4013      	ands	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0203 	and.w	r2, r3, #3
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00b      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d007      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	2b11      	cmp	r3, #17
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d130      	bne.n	800095c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5e      	ldr	r2, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	619a      	str	r2, [r3, #24]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7c:	b08f      	sub	sp, #60	; 0x3c
 8000b7e:	af0a      	add	r7, sp, #40	; 0x28
 8000b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e054      	b.n	8000c36 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d106      	bne.n	8000bac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f005 ffc4 	bl	8006b34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2203      	movs	r2, #3
 8000bb0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fc0c 	bl	80043e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	687e      	ldr	r6, [r7, #4]
 8000bd8:	466d      	mov	r5, sp
 8000bda:	f106 0410 	add.w	r4, r6, #16
 8000bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bee:	1d33      	adds	r3, r6, #4
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	6838      	ldr	r0, [r7, #0]
 8000bf4:	f003 fb86 	bl	8004304 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 fc03 	bl	800440a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	687e      	ldr	r6, [r7, #4]
 8000c0c:	466d      	mov	r5, sp
 8000c0e:	f106 0410 	add.w	r4, r6, #16
 8000c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c22:	1d33      	adds	r3, r6, #4
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	6838      	ldr	r0, [r7, #0]
 8000c28:	f003 fd16 	bl	8004658 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b089      	sub	sp, #36	; 0x24
 8000c42:	af04      	add	r7, sp, #16
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	4608      	mov	r0, r1
 8000c48:	4611      	mov	r1, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	70fb      	strb	r3, [r7, #3]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70bb      	strb	r3, [r7, #2]
 8000c54:	4613      	mov	r3, r2
 8000c56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d101      	bne.n	8000c66 <HAL_HCD_HC_Init+0x28>
 8000c62:	2302      	movs	r3, #2
 8000c64:	e07f      	b.n	8000d66 <HAL_HCD_HC_Init+0x128>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c6e:	78fa      	ldrb	r2, [r7, #3]
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	333d      	adds	r3, #61	; 0x3d
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	440b      	add	r3, r1
 8000c90:	3338      	adds	r3, #56	; 0x38
 8000c92:	787a      	ldrb	r2, [r7, #1]
 8000c94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3340      	adds	r3, #64	; 0x40
 8000ca6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ca8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3339      	adds	r3, #57	; 0x39
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	333f      	adds	r3, #63	; 0x3f
 8000cce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	78bb      	ldrb	r3, [r7, #2]
 8000cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cdc:	b2d8      	uxtb	r0, r3
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	333a      	adds	r3, #58	; 0x3a
 8000cec:	4602      	mov	r2, r0
 8000cee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000cf0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da0a      	bge.n	8000d0e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	333b      	adds	r3, #59	; 0x3b
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e009      	b.n	8000d22 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	333b      	adds	r3, #59	; 0x3b
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	333c      	adds	r3, #60	; 0x3c
 8000d32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d36:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	787c      	ldrb	r4, [r7, #1]
 8000d3e:	78ba      	ldrb	r2, [r7, #2]
 8000d40:	78f9      	ldrb	r1, [r7, #3]
 8000d42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d44:	9302      	str	r3, [sp, #8]
 8000d46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4623      	mov	r3, r4
 8000d54:	f003 fdc0 	bl	80048d8 <USB_HC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}

08000d6e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_HCD_HC_Halt+0x1e>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e00f      	b.n	8000dac <HAL_HCD_HC_Halt+0x3e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fffa 	bl	8004d96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	70fb      	strb	r3, [r7, #3]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70bb      	strb	r3, [r7, #2]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000dce:	78fa      	ldrb	r2, [r7, #3]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
 8000ddc:	333b      	adds	r3, #59	; 0x3b
 8000dde:	78ba      	ldrb	r2, [r7, #2]
 8000de0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000de2:	78fa      	ldrb	r2, [r7, #3]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	440b      	add	r3, r1
 8000df0:	333f      	adds	r3, #63	; 0x3f
 8000df2:	787a      	ldrb	r2, [r7, #1]
 8000df4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000df6:	7c3b      	ldrb	r3, [r7, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10a      	bne.n	8000e12 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	440b      	add	r3, r1
 8000e0a:	3342      	adds	r3, #66	; 0x42
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e009      	b.n	8000e26 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	3342      	adds	r3, #66	; 0x42
 8000e22:	2202      	movs	r2, #2
 8000e24:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e26:	787b      	ldrb	r3, [r7, #1]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	f200 80d6 	bhi.w	8000fda <HAL_HCD_HC_SubmitRequest+0x226>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000fc5 	.word	0x08000fc5
 8000e3c:	08000eb1 	.word	0x08000eb1
 8000e40:	08000f3b 	.word	0x08000f3b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e44:	7c3b      	ldrb	r3, [r7, #16]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	f040 80c9 	bne.w	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e4c:	78bb      	ldrb	r3, [r7, #2]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 80c5 	bne.w	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e54:	8b3b      	ldrh	r3, [r7, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e5a:	78fa      	ldrb	r2, [r7, #3]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	3351      	adds	r3, #81	; 0x51
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e6e:	78fa      	ldrb	r2, [r7, #3]
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	440b      	add	r3, r1
 8000e7c:	3351      	adds	r3, #81	; 0x51
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10a      	bne.n	8000e9a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e84:	78fa      	ldrb	r2, [r7, #3]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	3342      	adds	r3, #66	; 0x42
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000e98:	e0a1      	b.n	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3342      	adds	r3, #66	; 0x42
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
      break;
 8000eae:	e096      	b.n	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000eb0:	78bb      	ldrb	r3, [r7, #2]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d120      	bne.n	8000ef8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000eb6:	78fa      	ldrb	r2, [r7, #3]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3351      	adds	r3, #81	; 0x51
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10a      	bne.n	8000ee2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ecc:	78fa      	ldrb	r2, [r7, #3]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	3342      	adds	r3, #66	; 0x42
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000ee0:	e07e      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3342      	adds	r3, #66	; 0x42
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	701a      	strb	r2, [r3, #0]
      break;
 8000ef6:	e073      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ef8:	78fa      	ldrb	r2, [r7, #3]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3350      	adds	r3, #80	; 0x50
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10a      	bne.n	8000f24 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3342      	adds	r3, #66	; 0x42
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
      break;
 8000f22:	e05d      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	3342      	adds	r3, #66	; 0x42
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]
      break;
 8000f38:	e052      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f3a:	78bb      	ldrb	r3, [r7, #2]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d120      	bne.n	8000f82 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3351      	adds	r3, #81	; 0x51
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10a      	bne.n	8000f6c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	3342      	adds	r3, #66	; 0x42
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f6a:	e039      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f6c:	78fa      	ldrb	r2, [r7, #3]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	3342      	adds	r3, #66	; 0x42
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	701a      	strb	r2, [r3, #0]
      break;
 8000f80:	e02e      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f82:	78fa      	ldrb	r2, [r7, #3]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3350      	adds	r3, #80	; 0x50
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10a      	bne.n	8000fae <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3342      	adds	r3, #66	; 0x42
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
      break;
 8000fac:	e018      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3342      	adds	r3, #66	; 0x42
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
      break;
 8000fc2:	e00d      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3342      	adds	r3, #66	; 0x42
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
      break;
 8000fd8:	e002      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8000fda:	bf00      	nop
 8000fdc:	e000      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8000fde:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3344      	adds	r3, #68	; 0x44
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	8b39      	ldrh	r1, [r7, #24]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4403      	add	r3, r0
 8001004:	3348      	adds	r3, #72	; 0x48
 8001006:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	335c      	adds	r3, #92	; 0x5c
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	334c      	adds	r3, #76	; 0x4c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3339      	adds	r3, #57	; 0x39
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	335d      	adds	r3, #93	; 0x5d
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	3338      	adds	r3, #56	; 0x38
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	18d1      	adds	r1, r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	f003 fd3a 	bl	8004aec <USB_HC_StartXfer>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop

08001084 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fa99 	bl	80045d2 <USB_GetMode>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	f040 80f1 	bne.w	800128a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fa7d 	bl	80045ac <USB_ReadInterrupts>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80e7 	beq.w	8001288 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fa74 	bl	80045ac <USB_ReadInterrupts>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010ce:	d104      	bne.n	80010da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fa64 	bl	80045ac <USB_ReadInterrupts>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010ee:	d104      	bne.n	80010fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fa54 	bl	80045ac <USB_ReadInterrupts>
 8001104:	4603      	mov	r3, r0
 8001106:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800110a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800110e:	d104      	bne.n	800111a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001118:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fa44 	bl	80045ac <USB_ReadInterrupts>
 8001124:	4603      	mov	r3, r0
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d103      	bne.n	8001136 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2202      	movs	r2, #2
 8001134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fa36 	bl	80045ac <USB_ReadInterrupts>
 8001140:	4603      	mov	r3, r0
 8001142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800114a:	d117      	bne.n	800117c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800115a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800115e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f005 fd65 	bl	8006c30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fb2f 	bl	80047d0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800117a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fa13 	bl	80045ac <USB_ReadInterrupts>
 8001186:	4603      	mov	r3, r0
 8001188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d102      	bne.n	8001198 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f001 f8ac 	bl	80022f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fa05 	bl	80045ac <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d106      	bne.n	80011ba <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f005 fd23 	bl	8006bf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2208      	movs	r2, #8
 80011b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f9f4 	bl	80045ac <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011ce:	d138      	bne.n	8001242 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fdcd 	bl	8004d74 <USB_HC_ReadInterrupt>
 80011da:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e025      	b.n	800122e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	fa22 f303 	lsr.w	r3, r2, r3
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d018      	beq.n	8001228 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	015a      	lsls	r2, r3, #5
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800120c:	d106      	bne.n	800121c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f8b3 	bl	8001380 <HCD_HC_IN_IRQHandler>
 800121a:	e005      	b.n	8001228 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fc43 	bl	8001aae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3d4      	bcc.n	80011e2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f003 f9b0 	bl	80045ac <USB_ReadInterrupts>
 800124c:	4603      	mov	r3, r0
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b10      	cmp	r3, #16
 8001254:	d101      	bne.n	800125a <HAL_HCD_IRQHandler+0x1d6>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_HCD_IRQHandler+0x1d8>
 800125a:	2300      	movs	r3, #0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d014      	beq.n	800128a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0210 	bic.w	r2, r2, #16
 800126e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 ff91 	bl	8002198 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0210 	orr.w	r2, r2, #16
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	e000      	b.n	800128a <HAL_HCD_IRQHandler+0x206>
      return;
 8001288:	bf00      	nop
    }
  }
}
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_HCD_Start+0x16>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e013      	b.n	80012ce <HAL_HCD_Start+0x3e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f887 	bl	80043c6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 fac0 	bl	8004844 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_HCD_Stop+0x16>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e00d      	b.n	8001308 <HAL_HCD_Stop+0x32>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fe87 	bl	800500c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	335c      	adds	r3, #92	; 0x5c
 800132c:	781b      	ldrb	r3, [r3, #0]
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	334c      	adds	r3, #76	; 0x4c
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f003 faa0 	bl	80048b6 <USB_GetCurrentFrame>
 8001376:	4603      	mov	r3, r0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	015a      	lsls	r2, r3, #5
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4413      	add	r3, r2
 80013a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d119      	bne.n	80013e4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	015a      	lsls	r2, r3, #5
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013bc:	461a      	mov	r2, r3
 80013be:	2304      	movs	r3, #4
 80013c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	0151      	lsls	r1, r2, #5
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	440a      	add	r2, r1
 80013d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	60d3      	str	r3, [r2, #12]
 80013e2:	e095      	b.n	8001510 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	015a      	lsls	r2, r3, #5
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4413      	add	r3, r2
 80013ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d109      	bne.n	800140e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4413      	add	r3, r2
 8001402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001406:	461a      	mov	r2, r3
 8001408:	2320      	movs	r3, #32
 800140a:	6093      	str	r3, [r2, #8]
 800140c:	e080      	b.n	8001510 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4413      	add	r3, r2
 8001416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b08      	cmp	r3, #8
 8001422:	d134      	bne.n	800148e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	015a      	lsls	r2, r3, #5
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4413      	add	r3, r2
 800142c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	0151      	lsls	r1, r2, #5
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	440a      	add	r2, r1
 800143a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	335d      	adds	r3, #93	; 0x5d
 8001454:	2205      	movs	r2, #5
 8001456:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	015a      	lsls	r2, r3, #5
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001464:	461a      	mov	r2, r3
 8001466:	2310      	movs	r3, #16
 8001468:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4413      	add	r3, r2
 8001472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001476:	461a      	mov	r2, r3
 8001478:	2308      	movs	r3, #8
 800147a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fc85 	bl	8004d96 <USB_HC_Halt>
 800148c:	e040      	b.n	8001510 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a4:	d134      	bne.n	8001510 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	0151      	lsls	r1, r2, #5
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	440a      	add	r2, r1
 80014bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fc60 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	461a      	mov	r2, r3
 80014e4:	2310      	movs	r3, #16
 80014e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	335d      	adds	r3, #93	; 0x5d
 80014f8:	2208      	movs	r2, #8
 80014fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4413      	add	r3, r2
 8001504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001508:	461a      	mov	r2, r3
 800150a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4413      	add	r3, r2
 8001518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001526:	d122      	bne.n	800156e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4413      	add	r3, r2
 8001530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	0151      	lsls	r1, r2, #5
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	440a      	add	r2, r1
 800153e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fc1f 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4413      	add	r3, r2
 8001560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800156c:	e29b      	b.n	8001aa6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4413      	add	r3, r2
 8001576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b01      	cmp	r3, #1
 8001582:	f040 80c1 	bne.w	8001708 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01b      	beq.n	80015c6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	3348      	adds	r3, #72	; 0x48
 800159e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	0159      	lsls	r1, r3, #5
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015b2:	1ad1      	subs	r1, r2, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4403      	add	r3, r0
 80015c2:	334c      	adds	r3, #76	; 0x4c
 80015c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	335d      	adds	r3, #93	; 0x5d
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3358      	adds	r3, #88	; 0x58
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fa:	461a      	mov	r2, r3
 80015fc:	2301      	movs	r3, #1
 80015fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	333f      	adds	r3, #63	; 0x3f
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	333f      	adds	r3, #63	; 0x3f
 8001626:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001628:	2b02      	cmp	r3, #2
 800162a:	d121      	bne.n	8001670 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	0151      	lsls	r1, r2, #5
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	440a      	add	r2, r1
 8001642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f003 fb9d 	bl	8004d96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4413      	add	r3, r2
 8001664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001668:	461a      	mov	r2, r3
 800166a:	2310      	movs	r3, #16
 800166c:	6093      	str	r3, [r2, #8]
 800166e:	e034      	b.n	80016da <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	333f      	adds	r3, #63	; 0x3f
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d129      	bne.n	80016da <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4413      	add	r3, r2
 800168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	0151      	lsls	r1, r2, #5
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	440a      	add	r2, r1
 800169c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	335c      	adds	r3, #92	; 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	b2d8      	uxtb	r0, r3
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	335c      	adds	r3, #92	; 0x5c
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4601      	mov	r1, r0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f005 fab9 	bl	8006c4c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3350      	adds	r3, #80	; 0x50
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2d8      	uxtb	r0, r3
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3350      	adds	r3, #80	; 0x50
 8001702:	4602      	mov	r2, r0
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	e1ce      	b.n	8001aa6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4413      	add	r3, r2
 8001710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	f040 80f1 	bne.w	8001902 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	0151      	lsls	r1, r2, #5
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	440a      	add	r2, r1
 8001736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	335d      	adds	r3, #93	; 0x5d
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10a      	bne.n	800176c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	335c      	adds	r3, #92	; 0x5c
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e0b0      	b.n	80018ce <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	335d      	adds	r3, #93	; 0x5d
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d10a      	bne.n	8001798 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	335c      	adds	r3, #92	; 0x5c
 8001792:	2205      	movs	r2, #5
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e09a      	b.n	80018ce <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	335d      	adds	r3, #93	; 0x5d
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d00a      	beq.n	80017c4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	335d      	adds	r3, #93	; 0x5d
 80017be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d156      	bne.n	8001872 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3358      	adds	r3, #88	; 0x58
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1c59      	adds	r1, r3, #1
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4403      	add	r3, r0
 80017e6:	3358      	adds	r3, #88	; 0x58
 80017e8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3358      	adds	r3, #88	; 0x58
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d914      	bls.n	800182a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3358      	adds	r3, #88	; 0x58
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	335c      	adds	r3, #92	; 0x5c
 8001824:	2204      	movs	r2, #4
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e009      	b.n	800183e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	335c      	adds	r3, #92	; 0x5c
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4413      	add	r3, r2
 8001846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001854:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800185c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4413      	add	r3, r2
 8001866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186a:	461a      	mov	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02d      	b.n	80018ce <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	335d      	adds	r3, #93	; 0x5d
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d122      	bne.n	80018ce <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	335c      	adds	r3, #92	; 0x5c
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	015a      	lsls	r2, r3, #5
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018da:	461a      	mov	r2, r3
 80018dc:	2302      	movs	r3, #2
 80018de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b2d8      	uxtb	r0, r3
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	335c      	adds	r3, #92	; 0x5c
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4601      	mov	r1, r0
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f005 f9a6 	bl	8006c4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001900:	e0d1      	b.n	8001aa6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4413      	add	r3, r2
 800190a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001914:	2b80      	cmp	r3, #128	; 0x80
 8001916:	d13e      	bne.n	8001996 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4413      	add	r3, r2
 8001920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	0151      	lsls	r1, r2, #5
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	440a      	add	r2, r1
 800192e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3358      	adds	r3, #88	; 0x58
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4403      	add	r3, r0
 800195a:	3358      	adds	r3, #88	; 0x58
 800195c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	335d      	adds	r3, #93	; 0x5d
 800196e:	2206      	movs	r2, #6
 8001970:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fa0a 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4413      	add	r3, r2
 800198a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198e:	461a      	mov	r2, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	6093      	str	r3, [r2, #8]
}
 8001994:	e087      	b.n	8001aa6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4413      	add	r3, r2
 800199e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d17c      	bne.n	8001aa6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	333f      	adds	r3, #63	; 0x3f
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d122      	bne.n	8001a08 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3358      	adds	r3, #88	; 0x58
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	0151      	lsls	r1, r2, #5
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	440a      	add	r2, r1
 80019ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 f9c8 	bl	8004d96 <USB_HC_Halt>
 8001a06:	e045      	b.n	8001a94 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	333f      	adds	r3, #63	; 0x3f
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	333f      	adds	r3, #63	; 0x3f
 8001a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d12f      	bne.n	8001a94 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	3358      	adds	r3, #88	; 0x58
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d121      	bne.n	8001a94 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	335d      	adds	r3, #93	; 0x5d
 8001a60:	2203      	movs	r2, #3
 8001a62:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	0151      	lsls	r1, r2, #5
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	440a      	add	r2, r1
 8001a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f981 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	6093      	str	r3, [r2, #8]
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d119      	bne.n	8001b12 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	461a      	mov	r2, r3
 8001aec:	2304      	movs	r3, #4
 8001aee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	0151      	lsls	r1, r2, #5
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	440a      	add	r2, r1
 8001b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b10:	e33e      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d141      	bne.n	8001bac <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b34:	461a      	mov	r2, r3
 8001b36:	2320      	movs	r3, #32
 8001b38:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	333d      	adds	r3, #61	; 0x3d
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	f040 831f 	bne.w	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	333d      	adds	r3, #61	; 0x3d
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	335c      	adds	r3, #92	; 0x5c
 8001b76:	2202      	movs	r2, #2
 8001b78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	015a      	lsls	r2, r3, #5
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4413      	add	r3, r2
 8001b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	0151      	lsls	r1, r2, #5
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	440a      	add	r2, r1
 8001b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 f8f6 	bl	8004d96 <USB_HC_Halt>
}
 8001baa:	e2f1      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbe:	2b40      	cmp	r3, #64	; 0x40
 8001bc0:	d13f      	bne.n	8001c42 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	335d      	adds	r3, #93	; 0x5d
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	333d      	adds	r3, #61	; 0x3d
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3358      	adds	r3, #88	; 0x58
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	0151      	lsls	r1, r2, #5
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	440a      	add	r2, r1
 8001c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 f8b4 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2340      	movs	r3, #64	; 0x40
 8001c3e:	6093      	str	r3, [r2, #8]
}
 8001c40:	e2a6      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c58:	d122      	bne.n	8001ca0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	0151      	lsls	r1, r2, #5
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	440a      	add	r2, r1
 8001c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 f886 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9c:	6093      	str	r3, [r2, #8]
}
 8001c9e:	e277      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d135      	bne.n	8001d22 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3358      	adds	r3, #88	; 0x58
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	0151      	lsls	r1, r2, #5
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	440a      	add	r2, r1
 8001ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 f84e 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	461a      	mov	r2, r3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	335d      	adds	r3, #93	; 0x5d
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
}
 8001d20:	e236      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d12b      	bne.n	8001d90 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	2308      	movs	r3, #8
 8001d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	0151      	lsls	r1, r2, #5
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	440a      	add	r2, r1
 8001d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 f80e 	bl	8004d96 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	335d      	adds	r3, #93	; 0x5d
 8001d8a:	2205      	movs	r2, #5
 8001d8c:	701a      	strb	r2, [r3, #0]
}
 8001d8e:	e1ff      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d155      	bne.n	8001e52 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3358      	adds	r3, #88	; 0x58
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	335d      	adds	r3, #93	; 0x5d
 8001dca:	2203      	movs	r2, #3
 8001dcc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	333d      	adds	r3, #61	; 0x3d
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d114      	bne.n	8001e0e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	333c      	adds	r3, #60	; 0x3c
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	333d      	adds	r3, #61	; 0x3d
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	0151      	lsls	r1, r2, #5
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	440a      	add	r2, r1
 8001e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 ffac 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	6093      	str	r3, [r2, #8]
}
 8001e50:	e19e      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d12b      	bne.n	8001ec0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	0151      	lsls	r1, r2, #5
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	440a      	add	r2, r1
 8001e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ff7f 	bl	8004d96 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	335d      	adds	r3, #93	; 0x5d
 8001ea8:	2206      	movs	r2, #6
 8001eaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	6093      	str	r3, [r2, #8]
}
 8001ebe:	e167      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d135      	bne.n	8001f44 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	0151      	lsls	r1, r2, #5
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	440a      	add	r2, r1
 8001eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 ff47 	bl	8004d96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	461a      	mov	r2, r3
 8001f16:	2310      	movs	r3, #16
 8001f18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	461a      	mov	r2, r3
 8001f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	335d      	adds	r3, #93	; 0x5d
 8001f3e:	2208      	movs	r2, #8
 8001f40:	701a      	strb	r2, [r3, #0]
}
 8001f42:	e125      	b.n	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f040 811a 	bne.w	8002190 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	0151      	lsls	r1, r2, #5
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	440a      	add	r2, r1
 8001f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f76:	f023 0302 	bic.w	r3, r3, #2
 8001f7a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	335d      	adds	r3, #93	; 0x5d
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d137      	bne.n	8002002 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	335c      	adds	r3, #92	; 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	333f      	adds	r3, #63	; 0x3f
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d00b      	beq.n	8001fd4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	333f      	adds	r3, #63	; 0x3f
 8001fcc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	f040 80c5 	bne.w	800215e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3351      	adds	r3, #81	; 0x51
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2d8      	uxtb	r0, r3
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3351      	adds	r3, #81	; 0x51
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e0ad      	b.n	800215e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	335d      	adds	r3, #93	; 0x5d
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d10a      	bne.n	800202e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	335c      	adds	r3, #92	; 0x5c
 8002028:	2202      	movs	r2, #2
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e097      	b.n	800215e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	335d      	adds	r3, #93	; 0x5d
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d10a      	bne.n	800205a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	335c      	adds	r3, #92	; 0x5c
 8002054:	2202      	movs	r2, #2
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e081      	b.n	800215e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	335d      	adds	r3, #93	; 0x5d
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d10a      	bne.n	8002086 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	335c      	adds	r3, #92	; 0x5c
 8002080:	2205      	movs	r2, #5
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	e06b      	b.n	800215e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	335d      	adds	r3, #93	; 0x5d
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b06      	cmp	r3, #6
 800209a:	d00a      	beq.n	80020b2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	335d      	adds	r3, #93	; 0x5d
 80020ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d155      	bne.n	800215e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	3358      	adds	r3, #88	; 0x58
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c59      	adds	r1, r3, #1
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4403      	add	r3, r0
 80020d4:	3358      	adds	r3, #88	; 0x58
 80020d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	3358      	adds	r3, #88	; 0x58
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d914      	bls.n	8002118 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3358      	adds	r3, #88	; 0x58
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	335c      	adds	r3, #92	; 0x5c
 8002112:	2204      	movs	r2, #4
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e009      	b.n	800212c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	2202      	movs	r2, #2
 800212a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002142:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800214a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	2302      	movs	r3, #2
 800216e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	b2d8      	uxtb	r0, r3
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	335c      	adds	r3, #92	; 0x5c
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	4601      	mov	r1, r0
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f004 fd5e 	bl	8006c4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	0c5b      	lsrs	r3, r3, #17
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d003      	beq.n	80021dc <HCD_RXQLVL_IRQHandler+0x44>
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	f000 8082 	beq.w	80022de <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80021da:	e083      	b.n	80022e4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d07f      	beq.n	80022e2 <HCD_RXQLVL_IRQHandler+0x14a>
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	3344      	adds	r3, #68	; 0x44
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d074      	beq.n	80022e2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3344      	adds	r3, #68	; 0x44
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	b292      	uxth	r2, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f002 f9a1 	bl	800455a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3344      	adds	r3, #68	; 0x44
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	18d1      	adds	r1, r2, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4403      	add	r3, r0
 800223c:	3344      	adds	r3, #68	; 0x44
 800223e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	334c      	adds	r3, #76	; 0x4c
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	18d1      	adds	r1, r2, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4403      	add	r3, r0
 8002264:	334c      	adds	r3, #76	; 0x4c
 8002266:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HCD_RXQLVL_IRQHandler+0x154>)
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d031      	beq.n	80022e2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002294:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3350      	adds	r3, #80	; 0x50
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2d8      	uxtb	r0, r3
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	3350      	adds	r3, #80	; 0x50
 80022d8:	4602      	mov	r2, r0
 80022da:	701a      	strb	r2, [r3, #0]
      break;
 80022dc:	e001      	b.n	80022e2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80022e2:	bf00      	nop
  }
}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	1ff80000 	.word	0x1ff80000

080022f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800231c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	d113      	bne.n	8002350 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10a      	bne.n	8002348 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002340:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f004 fc66 	bl	8006c14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d147      	bne.n	80023ea <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d129      	bne.n	80023c0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d113      	bne.n	800239c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800237a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800237e:	d106      	bne.n	800238e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fa22 	bl	80047d0 <USB_InitFSLSPClkSel>
 800238c:	e011      	b.n	80023b2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fa1b 	bl	80047d0 <USB_InitFSLSPClkSel>
 800239a:	e00a      	b.n	80023b2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023aa:	461a      	mov	r2, r3
 80023ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80023b0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f004 fc58 	bl	8006c68 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f004 fc2b 	bl	8006c14 <HAL_HCD_Connect_Callback>
 80023be:	e014      	b.n	80023ea <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f004 fc5f 	bl	8006c84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80023d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023d8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d103      	bne.n	80023fc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f043 0320 	orr.w	r3, r3, #32
 80023fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e10f      	b.n	8002642 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f004 f94e 	bl	80066d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002454:	f001 f9ac 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8002458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a7b      	ldr	r2, [pc, #492]	; (800264c <HAL_I2C_Init+0x23c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d807      	bhi.n	8002474 <HAL_I2C_Init+0x64>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_I2C_Init+0x240>)
 8002468:	4293      	cmp	r3, r2
 800246a:	bf94      	ite	ls
 800246c:	2301      	movls	r3, #1
 800246e:	2300      	movhi	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e006      	b.n	8002482 <HAL_I2C_Init+0x72>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a77      	ldr	r2, [pc, #476]	; (8002654 <HAL_I2C_Init+0x244>)
 8002478:	4293      	cmp	r3, r2
 800247a:	bf94      	ite	ls
 800247c:	2301      	movls	r3, #1
 800247e:	2300      	movhi	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e0db      	b.n	8002642 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4a72      	ldr	r2, [pc, #456]	; (8002658 <HAL_I2C_Init+0x248>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a64      	ldr	r2, [pc, #400]	; (800264c <HAL_I2C_Init+0x23c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d802      	bhi.n	80024c4 <HAL_I2C_Init+0xb4>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3301      	adds	r3, #1
 80024c2:	e009      	b.n	80024d8 <HAL_I2C_Init+0xc8>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	4a63      	ldr	r2, [pc, #396]	; (800265c <HAL_I2C_Init+0x24c>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	3301      	adds	r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	430b      	orrs	r3, r1
 80024de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4956      	ldr	r1, [pc, #344]	; (800264c <HAL_I2C_Init+0x23c>)
 80024f4:	428b      	cmp	r3, r1
 80024f6:	d80d      	bhi.n	8002514 <HAL_I2C_Init+0x104>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1e59      	subs	r1, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fbb1 f3f3 	udiv	r3, r1, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	2b04      	cmp	r3, #4
 800250e:	bf38      	it	cc
 8002510:	2304      	movcc	r3, #4
 8002512:	e04f      	b.n	80025b4 <HAL_I2C_Init+0x1a4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d111      	bne.n	8002540 <HAL_I2C_Init+0x130>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e58      	subs	r0, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e012      	b.n	8002566 <HAL_I2C_Init+0x156>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Init+0x15e>
 800256a:	2301      	movs	r3, #1
 800256c:	e022      	b.n	80025b4 <HAL_I2C_Init+0x1a4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10e      	bne.n	8002594 <HAL_I2C_Init+0x184>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1e58      	subs	r0, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	440b      	add	r3, r1
 8002584:	fbb0 f3f3 	udiv	r3, r0, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002592:	e00f      	b.n	80025b4 <HAL_I2C_Init+0x1a4>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	0099      	lsls	r1, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	6809      	ldr	r1, [r1, #0]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6911      	ldr	r1, [r2, #16]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68d2      	ldr	r2, [r2, #12]
 80025ee:	4311      	orrs	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	000186a0 	.word	0x000186a0
 8002650:	001e847f 	.word	0x001e847f
 8002654:	003d08ff 	.word	0x003d08ff
 8002658:	431bde83 	.word	0x431bde83
 800265c:	10624dd3 	.word	0x10624dd3

08002660 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e128      	b.n	80028c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a90      	ldr	r2, [pc, #576]	; (80028cc <HAL_I2S_Init+0x26c>)
 800268a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f004 f86b 	bl	8006768 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026a8:	f023 030f 	bic.w	r3, r3, #15
 80026ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2202      	movs	r2, #2
 80026b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d060      	beq.n	8002780 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80026c6:	2310      	movs	r3, #16
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e001      	b.n	80026d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d802      	bhi.n	80026de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80026de:	2001      	movs	r0, #1
 80026e0:	f001 f970 	bl	80039c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80026e4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ee:	d125      	bne.n	800273c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d010      	beq.n	800271a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	3305      	adds	r3, #5
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e01f      	b.n	800275a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	fbb2 f2f3 	udiv	r2, r2, r3
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	461a      	mov	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	3305      	adds	r3, #5
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	e00e      	b.n	800275a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fbb2 f2f3 	udiv	r2, r2, r3
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	461a      	mov	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	3305      	adds	r3, #5
 8002758:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_I2S_Init+0x270>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	08db      	lsrs	r3, r3, #3
 8002764:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	e003      	b.n	8002788 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002780:	2302      	movs	r3, #2
 8002782:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d902      	bls.n	8002794 <HAL_I2S_Init+0x134>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	2bff      	cmp	r3, #255	; 0xff
 8002792:	d907      	bls.n	80027a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	f043 0210 	orr.w	r2, r3, #16
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e08f      	b.n	80028c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	ea42 0103 	orr.w	r1, r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6851      	ldr	r1, [r2, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6892      	ldr	r2, [r2, #8]
 80027ce:	4311      	orrs	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68d2      	ldr	r2, [r2, #12]
 80027d4:	4311      	orrs	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6992      	ldr	r2, [r2, #24]
 80027da:	430a      	orrs	r2, r1
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d161      	bne.n	80028b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a38      	ldr	r2, [pc, #224]	; (80028d4 <HAL_I2S_Init+0x274>)
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a37      	ldr	r2, [pc, #220]	; (80028d8 <HAL_I2S_Init+0x278>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_I2S_Init+0x1a4>
 8002800:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_I2S_Init+0x27c>)
 8002802:	e001      	b.n	8002808 <HAL_I2S_Init+0x1a8>
 8002804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	4932      	ldr	r1, [pc, #200]	; (80028d8 <HAL_I2S_Init+0x278>)
 8002810:	428a      	cmp	r2, r1
 8002812:	d101      	bne.n	8002818 <HAL_I2S_Init+0x1b8>
 8002814:	4a31      	ldr	r2, [pc, #196]	; (80028dc <HAL_I2S_Init+0x27c>)
 8002816:	e001      	b.n	800281c <HAL_I2S_Init+0x1bc>
 8002818:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800281c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002820:	f023 030f 	bic.w	r3, r3, #15
 8002824:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <HAL_I2S_Init+0x278>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_I2S_Init+0x1d4>
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <HAL_I2S_Init+0x27c>)
 8002832:	e001      	b.n	8002838 <HAL_I2S_Init+0x1d8>
 8002834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002838:	2202      	movs	r2, #2
 800283a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <HAL_I2S_Init+0x278>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_I2S_Init+0x1ea>
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_I2S_Init+0x27c>)
 8002848:	e001      	b.n	800284e <HAL_I2S_Init+0x1ee>
 800284a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285a:	d003      	beq.n	8002864 <HAL_I2S_Init+0x204>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d103      	bne.n	800286c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e001      	b.n	8002870 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	b299      	uxth	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002886:	4303      	orrs	r3, r0
 8002888:	b29b      	uxth	r3, r3
 800288a:	430b      	orrs	r3, r1
 800288c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800288e:	4313      	orrs	r3, r2
 8002890:	b29a      	uxth	r2, r3
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	4313      	orrs	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800289c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_I2S_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_I2S_Init+0x24c>
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_I2S_Init+0x27c>)
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x250>
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b0:	897a      	ldrh	r2, [r7, #10]
 80028b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	080029d7 	.word	0x080029d7
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	08002aed 	.word	0x08002aed
 80028d8:	40003800 	.word	0x40003800
 80028dc:	40003400 	.word	0x40003400

080028e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	881a      	ldrh	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c9a      	adds	r2, r3, #2
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10e      	bne.n	8002970 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002960:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffb8 	bl	80028e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	b292      	uxth	r2, r2
 800298c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10e      	bne.n	80029ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff93 	bl	80028f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d13a      	bne.n	8002a68 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d109      	bne.n	8002a10 <I2S_IRQHandler+0x3a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d102      	bne.n	8002a10 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffb4 	bl	8002978 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d126      	bne.n	8002a68 <I2S_IRQHandler+0x92>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d11f      	bne.n	8002a68 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ff50 	bl	8002908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d136      	bne.n	8002ae2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d109      	bne.n	8002a92 <I2S_IRQHandler+0xbc>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d102      	bne.n	8002a92 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff45 	bl	800291c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d122      	bne.n	8002ae2 <I2S_IRQHandler+0x10c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d11b      	bne.n	8002ae2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ab8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f043 0204 	orr.w	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff13 	bl	8002908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4aa2      	ldr	r2, [pc, #648]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b06:	4ba2      	ldr	r3, [pc, #648]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b08:	e001      	b.n	8002b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a9b      	ldr	r2, [pc, #620]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b24:	4b9a      	ldr	r3, [pc, #616]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b26:	e001      	b.n	8002b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b38:	d004      	beq.n	8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8099 	bne.w	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d107      	bne.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f925 	bl	8002da8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d107      	bne.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f9c8 	bl	8002f08 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d13a      	bne.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d035      	beq.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a7e      	ldr	r2, [pc, #504]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002b96:	4b7e      	ldr	r3, [pc, #504]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b98:	e001      	b.n	8002b9e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4979      	ldr	r1, [pc, #484]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ba6:	428b      	cmp	r3, r1
 8002ba8:	d101      	bne.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002baa:	4b79      	ldr	r3, [pc, #484]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bac:	e001      	b.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bb6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fe88 	bl	8002908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	f040 80be 	bne.w	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80b8 	beq.w	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c1e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a59      	ldr	r2, [pc, #356]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c2a:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c2c:	e001      	b.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4954      	ldr	r1, [pc, #336]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c3a:	428b      	cmp	r3, r1
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c3e:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c40:	e001      	b.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c4a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fe4a 	bl	8002908 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c74:	e084      	b.n	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d107      	bne.n	8002c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8be 	bl	8002e0c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d107      	bne.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f8fd 	bl	8002ea4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d12f      	bne.n	8002d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02a      	beq.n	8002d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ccc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cda:	e001      	b.n	8002ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4929      	ldr	r1, [pc, #164]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002cec:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cee:	e001      	b.n	8002cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002cf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f043 0202 	orr.w	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fdfa 	bl	8002908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d131      	bne.n	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d02c      	beq.n	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d34:	e001      	b.n	8002d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4912      	ldr	r1, [pc, #72]	; (8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d42:	428b      	cmp	r3, r1
 8002d44:	d101      	bne.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d48:	e001      	b.n	8002d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002d4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d62:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fdc5 	bl	8002908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d7e:	e000      	b.n	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d80:	bf00      	nop
}
 8002d82:	bf00      	nop
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40003800 	.word	0x40003800
 8002d90:	40003400 	.word	0x40003400

08002d94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c99      	adds	r1, r3, #2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6251      	str	r1, [r2, #36]	; 0x24
 8002dba:	881a      	ldrh	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d113      	bne.n	8002e02 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002de8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ffc9 	bl	8002d94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c99      	adds	r1, r3, #2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6251      	str	r1, [r2, #36]	; 0x24
 8002e1e:	8819      	ldrh	r1, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <I2SEx_TxISR_I2SExt+0x90>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <I2SEx_TxISR_I2SExt+0x22>
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <I2SEx_TxISR_I2SExt+0x94>)
 8002e2c:	e001      	b.n	8002e32 <I2SEx_TxISR_I2SExt+0x26>
 8002e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e32:	460a      	mov	r2, r1
 8002e34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d121      	bne.n	8002e92 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <I2SEx_TxISR_I2SExt+0x90>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <I2SEx_TxISR_I2SExt+0x50>
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <I2SEx_TxISR_I2SExt+0x94>)
 8002e5a:	e001      	b.n	8002e60 <I2SEx_TxISR_I2SExt+0x54>
 8002e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	490d      	ldr	r1, [pc, #52]	; (8002e9c <I2SEx_TxISR_I2SExt+0x90>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d101      	bne.n	8002e70 <I2SEx_TxISR_I2SExt+0x64>
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <I2SEx_TxISR_I2SExt+0x94>)
 8002e6e:	e001      	b.n	8002e74 <I2SEx_TxISR_I2SExt+0x68>
 8002e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff81 	bl	8002d94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40003800 	.word	0x40003800
 8002ea0:	40003400 	.word	0x40003400

08002ea4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68d8      	ldr	r0, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	1c99      	adds	r1, r3, #2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ebc:	b282      	uxth	r2, r0
 8002ebe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d113      	bne.n	8002f00 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ee6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff4a 	bl	8002d94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a20      	ldr	r2, [pc, #128]	; (8002f98 <I2SEx_RxISR_I2SExt+0x90>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <I2SEx_RxISR_I2SExt+0x16>
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <I2SEx_RxISR_I2SExt+0x94>)
 8002f1c:	e001      	b.n	8002f22 <I2SEx_RxISR_I2SExt+0x1a>
 8002f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f22:	68d8      	ldr	r0, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	1c99      	adds	r1, r3, #2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f2e:	b282      	uxth	r2, r0
 8002f30:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d121      	bne.n	8002f8e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <I2SEx_RxISR_I2SExt+0x90>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <I2SEx_RxISR_I2SExt+0x50>
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <I2SEx_RxISR_I2SExt+0x94>)
 8002f56:	e001      	b.n	8002f5c <I2SEx_RxISR_I2SExt+0x54>
 8002f58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	490d      	ldr	r1, [pc, #52]	; (8002f98 <I2SEx_RxISR_I2SExt+0x90>)
 8002f64:	428b      	cmp	r3, r1
 8002f66:	d101      	bne.n	8002f6c <I2SEx_RxISR_I2SExt+0x64>
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <I2SEx_RxISR_I2SExt+0x94>)
 8002f6a:	e001      	b.n	8002f70 <I2SEx_RxISR_I2SExt+0x68>
 8002f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f74:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff03 	bl	8002d94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40003800 	.word	0x40003800
 8002f9c:	40003400 	.word	0x40003400

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e22d      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d075      	beq.n	80030aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	4ba3      	ldr	r3, [pc, #652]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fca:	4ba0      	ldr	r3, [pc, #640]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d112      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b9d      	ldr	r3, [pc, #628]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe2:	d10b      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	4b99      	ldr	r3, [pc, #612]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d05b      	beq.n	80030a8 <HAL_RCC_OscConfig+0x108>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d157      	bne.n	80030a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e208      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x74>
 8003006:	4b91      	ldr	r3, [pc, #580]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a90      	ldr	r2, [pc, #576]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e01d      	b.n	8003050 <HAL_RCC_OscConfig+0xb0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x98>
 800301e:	4b8b      	ldr	r3, [pc, #556]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a8a      	ldr	r2, [pc, #552]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a87      	ldr	r2, [pc, #540]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0xb0>
 8003038:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a83      	ldr	r2, [pc, #524]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800303e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b81      	ldr	r3, [pc, #516]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a80      	ldr	r2, [pc, #512]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fd fa9c 	bl	8000594 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003060:	f7fd fa98 	bl	8000594 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1cd      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0xc0>
 800307e:	e014      	b.n	80030aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fd fa88 	bl	8000594 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7fd fa84 	bl	8000594 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1b9      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0xe8>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d063      	beq.n	800317e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c2:	4b62      	ldr	r3, [pc, #392]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d11c      	bne.n	8003108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b5f      	ldr	r3, [pc, #380]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x152>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e18d      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b56      	ldr	r3, [pc, #344]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4952      	ldr	r1, [pc, #328]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	e03a      	b.n	800317e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_RCC_OscConfig+0x2b0>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fd fa3d 	bl	8000594 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311e:	f7fd fa39 	bl	8000594 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e16e      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4940      	ldr	r1, [pc, #256]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]
 8003150:	e015      	b.n	800317e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003152:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <HAL_RCC_OscConfig+0x2b0>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd fa1c 	bl	8000594 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003160:	f7fd fa18 	bl	8000594 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e14d      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d030      	beq.n	80031ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_RCC_OscConfig+0x2b4>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fd f9fc 	bl	8000594 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a0:	f7fd f9f8 	bl	8000594 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e12d      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x200>
 80031be:	e015      	b.n	80031ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCC_OscConfig+0x2b4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd f9e5 	bl	8000594 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fd f9e1 	bl	8000594 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e116      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a0 	beq.w	800333a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x2b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d121      	bne.n	800327a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_RCC_OscConfig+0x2b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_RCC_OscConfig+0x2b8>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fd f9a7 	bl	8000594 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	e011      	b.n	800326e <HAL_RCC_OscConfig+0x2ce>
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
 8003258:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fd f99a 	bl	8000594 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0cf      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x478>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d106      	bne.n	8003290 <HAL_RCC_OscConfig+0x2f0>
 8003282:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	e01c      	b.n	80032ca <HAL_RCC_OscConfig+0x32a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x312>
 8003298:	4b60      	ldr	r3, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a5f      	ldr	r2, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a5c      	ldr	r2, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e00b      	b.n	80032ca <HAL_RCC_OscConfig+0x32a>
 80032b2:	4b5a      	ldr	r3, [pc, #360]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a59      	ldr	r2, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b57      	ldr	r3, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fd f95f 	bl	8000594 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd f95b 	bl	8000594 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e08e      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCC_OscConfig+0x33a>
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fd f949 	bl	8000594 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fd f945 	bl	8000594 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e078      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a3a      	ldr	r2, [pc, #232]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d064      	beq.n	800340c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b08      	cmp	r3, #8
 800334c:	d05c      	beq.n	8003408 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d141      	bne.n	80033da <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_RCC_OscConfig+0x480>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fd f91a 	bl	8000594 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fd f916 	bl	8000594 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04b      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	491d      	ldr	r1, [pc, #116]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <HAL_RCC_OscConfig+0x480>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fd f8ef 	bl	8000594 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fd f8eb 	bl	8000594 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e020      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x41a>
 80033d8:	e018      	b.n	800340c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_RCC_OscConfig+0x480>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd f8d8 	bl	8000594 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fd f8d4 	bl	8000594 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e009      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x47c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x448>
 8003406:	e001      	b.n	800340c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40007000 	.word	0x40007000
 800341c:	40023800 	.word	0x40023800
 8003420:	42470060 	.word	0x42470060

08003424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0ca      	b.n	80035ce <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCC_ClockConfig+0x1b4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d90c      	bls.n	8003460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b62      	ldr	r3, [pc, #392]	; (80035d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b6      	b.n	80035ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003478:	4b58      	ldr	r3, [pc, #352]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a57      	ldr	r2, [pc, #348]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800347e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003490:	4b52      	ldr	r3, [pc, #328]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a51      	ldr	r2, [pc, #324]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349c:	4b4f      	ldr	r3, [pc, #316]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	494c      	ldr	r1, [pc, #304]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d044      	beq.n	8003544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d119      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e07d      	b.n	80035ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06d      	b.n	80035ce <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e065      	b.n	80035ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b36      	ldr	r3, [pc, #216]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4933      	ldr	r1, [pc, #204]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003514:	f7fd f83e 	bl	8000594 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fd f83a 	bl	8000594 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e04d      	b.n	80035ce <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d20c      	bcs.n	800356c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <HAL_RCC_ClockConfig+0x1b4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e030      	b.n	80035ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4915      	ldr	r1, [pc, #84]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	490d      	ldr	r1, [pc, #52]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035aa:	f000 f81d 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035ae:	4601      	mov	r1, r0
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	fa21 f303 	lsr.w	r3, r1, r3
 80035c2:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7fc ffa0 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0800725c 	.word	0x0800725c
 80035e4:	20000028 	.word	0x20000028

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	2300      	movs	r3, #0
 80035f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035fe:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d007      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x32>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d008      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x38>
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 80b4 	bne.w	800377c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b5e      	ldr	r3, [pc, #376]	; (8003790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003616:	60bb      	str	r3, [r7, #8]
       break;
 8003618:	e0b3      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800361c:	60bb      	str	r3, [r7, #8]
      break;
 800361e:	e0b0      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003620:	4b5a      	ldr	r3, [pc, #360]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003628:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04a      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b55      	ldr	r3, [pc, #340]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	f04f 0400 	mov.w	r4, #0
 8003640:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	ea03 0501 	and.w	r5, r3, r1
 800364c:	ea04 0602 	and.w	r6, r4, r2
 8003650:	4629      	mov	r1, r5
 8003652:	4632      	mov	r2, r6
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	f04f 0400 	mov.w	r4, #0
 800365c:	0154      	lsls	r4, r2, #5
 800365e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003662:	014b      	lsls	r3, r1, #5
 8003664:	4619      	mov	r1, r3
 8003666:	4622      	mov	r2, r4
 8003668:	1b49      	subs	r1, r1, r5
 800366a:	eb62 0206 	sbc.w	r2, r2, r6
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	f04f 0400 	mov.w	r4, #0
 8003676:	0194      	lsls	r4, r2, #6
 8003678:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800367c:	018b      	lsls	r3, r1, #6
 800367e:	1a5b      	subs	r3, r3, r1
 8003680:	eb64 0402 	sbc.w	r4, r4, r2
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	00e2      	lsls	r2, r4, #3
 800368e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003692:	00d9      	lsls	r1, r3, #3
 8003694:	460b      	mov	r3, r1
 8003696:	4614      	mov	r4, r2
 8003698:	195b      	adds	r3, r3, r5
 800369a:	eb44 0406 	adc.w	r4, r4, r6
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	0262      	lsls	r2, r4, #9
 80036a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036ac:	0259      	lsls	r1, r3, #9
 80036ae:	460b      	mov	r3, r1
 80036b0:	4614      	mov	r4, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	4621      	mov	r1, r4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	461a      	mov	r2, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	f7fc fd82 	bl	80001c8 <__aeabi_uldivmod>
 80036c4:	4603      	mov	r3, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e049      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036cc:	4b2f      	ldr	r3, [pc, #188]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	ea03 0501 	and.w	r5, r3, r1
 80036e2:	ea04 0602 	and.w	r6, r4, r2
 80036e6:	4629      	mov	r1, r5
 80036e8:	4632      	mov	r2, r6
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	f04f 0400 	mov.w	r4, #0
 80036f2:	0154      	lsls	r4, r2, #5
 80036f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036f8:	014b      	lsls	r3, r1, #5
 80036fa:	4619      	mov	r1, r3
 80036fc:	4622      	mov	r2, r4
 80036fe:	1b49      	subs	r1, r1, r5
 8003700:	eb62 0206 	sbc.w	r2, r2, r6
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	0194      	lsls	r4, r2, #6
 800370e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003712:	018b      	lsls	r3, r1, #6
 8003714:	1a5b      	subs	r3, r3, r1
 8003716:	eb64 0402 	sbc.w	r4, r4, r2
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	00e2      	lsls	r2, r4, #3
 8003724:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003728:	00d9      	lsls	r1, r3, #3
 800372a:	460b      	mov	r3, r1
 800372c:	4614      	mov	r4, r2
 800372e:	195b      	adds	r3, r3, r5
 8003730:	eb44 0406 	adc.w	r4, r4, r6
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	02a2      	lsls	r2, r4, #10
 800373e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003742:	0299      	lsls	r1, r3, #10
 8003744:	460b      	mov	r3, r1
 8003746:	4614      	mov	r4, r2
 8003748:	4618      	mov	r0, r3
 800374a:	4621      	mov	r1, r4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f04f 0400 	mov.w	r4, #0
 8003752:	461a      	mov	r2, r3
 8003754:	4623      	mov	r3, r4
 8003756:	f7fc fd37 	bl	80001c8 <__aeabi_uldivmod>
 800375a:	4603      	mov	r3, r0
 800375c:	460c      	mov	r4, r1
 800375e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	3301      	adds	r3, #1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	60bb      	str	r3, [r7, #8]
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800377e:	60bb      	str	r3, [r7, #8]
      break;
 8003780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003782:	68bb      	ldr	r3, [r7, #8]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	007a1200 	.word	0x007a1200

08003798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000028 	.word	0x20000028

080037b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b4:	f7ff fff0 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037b8:	4601      	mov	r1, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4a03      	ldr	r2, [pc, #12]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	0800726c 	.word	0x0800726c

080037d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037dc:	f7ff ffdc 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037e0:	4601      	mov	r1, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0b5b      	lsrs	r3, r3, #13
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4a03      	ldr	r2, [pc, #12]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ee:	5cd3      	ldrb	r3, [r2, r3]
 80037f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	0800726c 	.word	0x0800726c

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003824:	2b00      	cmp	r3, #0
 8003826:	d035      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003828:	4b62      	ldr	r3, [pc, #392]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800382e:	f7fc feb1 	bl	8000594 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003836:	f7fc fead 	bl	8000594 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0b0      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003848:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	019a      	lsls	r2, r3, #6
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	071b      	lsls	r3, r3, #28
 8003860:	4955      	ldr	r1, [pc, #340]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003868:	4b52      	ldr	r3, [pc, #328]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800386e:	f7fc fe91 	bl	8000594 <HAL_GetTick>
 8003872:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003876:	f7fc fe8d 	bl	8000594 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e090      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003888:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8083 	beq.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a43      	ldr	r2, [pc, #268]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038be:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a3e      	ldr	r2, [pc, #248]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ca:	f7fc fe63 	bl	8000594 <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038d2:	f7fc fe5f 	bl	8000594 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e062      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f0:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02f      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	429a      	cmp	r2, r3
 800390c:	d028      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003916:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d114      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003936:	f7fc fe2d 	bl	8000594 <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7fc fe29 	bl	8000594 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e02a      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ee      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396c:	d10d      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	490d      	ldr	r1, [pc, #52]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
 8003988:	e005      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003990:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003994:	6093      	str	r3, [r2, #8]
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	4905      	ldr	r1, [pc, #20]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	42470068 	.word	0x42470068
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42470e40 	.word	0x42470e40

080039c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d13d      	bne.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80039e2:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039ea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d12f      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80039f6:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80039f8:	617b      	str	r3, [r7, #20]
          break;
 80039fa:	e02f      	b.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a08:	d108      	bne.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a0a:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e007      	b.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a46:	0f1b      	lsrs	r3, r3, #28
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
          break;
 8003a54:	e002      	b.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
          break;
 8003a5a:	bf00      	nop
        }
      }
      break;
 8003a5c:	bf00      	nop
    }
  }
  return frequency;
 8003a5e:	697b      	ldr	r3, [r7, #20]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00bb8000 	.word	0x00bb8000
 8003a74:	007a1200 	.word	0x007a1200
 8003a78:	00f42400 	.word	0x00f42400

08003a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e056      	b.n	8003b3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f002 fec5 	bl	8006838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	ea42 0103 	orr.w	r1, r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	f003 0104 	and.w	r1, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e03f      	b.n	8003bd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f002 feac 	bl	80068c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f9b1 	bl	8003ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b088      	sub	sp, #32
 8003be2:	af02      	add	r7, sp, #8
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	f040 8083 	bne.w	8003d06 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_UART_Transmit+0x2e>
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e07b      	b.n	8003d08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Transmit+0x40>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e074      	b.n	8003d08 <HAL_UART_Transmit+0x12a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2221      	movs	r2, #33	; 0x21
 8003c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c34:	f7fc fcae 	bl	8000594 <HAL_GetTick>
 8003c38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c46:	e042      	b.n	8003cce <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d122      	bne.n	8003ca6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f8f6 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e046      	b.n	8003d08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	e017      	b.n	8003cce <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	e013      	b.n	8003cce <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f8d3 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e023      	b.n	8003d08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	60ba      	str	r2, [r7, #8]
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1b7      	bne.n	8003c48 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f8ba 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00a      	b.n	8003d08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	f040 8090 	bne.w	8003e52 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_UART_Receive+0x2e>
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e088      	b.n	8003e54 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Receive+0x40>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e081      	b.n	8003e54 <HAL_UART_Receive+0x144>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2222      	movs	r2, #34	; 0x22
 8003d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d66:	f7fc fc15 	bl	8000594 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d78:	e05c      	b.n	8003e34 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d90:	d12b      	bne.n	8003dea <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2120      	movs	r1, #32
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f85d 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e053      	b.n	8003e54 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10c      	bne.n	8003dd2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3302      	adds	r3, #2
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	e030      	b.n	8003e34 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	e024      	b.n	8003e34 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2120      	movs	r1, #32
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f831 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e027      	b.n	8003e54 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d108      	bne.n	8003e1e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	60ba      	str	r2, [r7, #8]
 8003e18:	b2ca      	uxtb	r2, r1
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e00a      	b.n	8003e34 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1c59      	adds	r1, r3, #1
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d19d      	bne.n	8003d7a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6c:	e02c      	b.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d028      	beq.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7c:	f7fc fb8a 	bl	8000594 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d21d      	bcs.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e00f      	b.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d0c3      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f30:	f023 030c 	bic.w	r3, r3, #12
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	68f9      	ldr	r1, [r7, #12]
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	f040 80e4 	bne.w	8004128 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4aab      	ldr	r2, [pc, #684]	; (8004214 <UART_SetConfig+0x324>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <UART_SetConfig+0x84>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4aaa      	ldr	r2, [pc, #680]	; (8004218 <UART_SetConfig+0x328>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d16c      	bne.n	800404e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f74:	f7ff fc30 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009a      	lsls	r2, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	4aa3      	ldr	r2, [pc, #652]	; (800421c <UART_SetConfig+0x32c>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	011c      	lsls	r4, r3, #4
 8003f98:	f7ff fc1e 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009a      	lsls	r2, r3, #2
 8003fa6:	441a      	add	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fb2:	f7ff fc11 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	4a93      	ldr	r2, [pc, #588]	; (800421c <UART_SetConfig+0x32c>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2264      	movs	r2, #100	; 0x64
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	1aeb      	subs	r3, r5, r3
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a8e      	ldr	r2, [pc, #568]	; (800421c <UART_SetConfig+0x32c>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fee:	441c      	add	r4, r3
 8003ff0:	f7ff fbf2 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009a      	lsls	r2, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fbb2 f5f3 	udiv	r5, r2, r3
 800400a:	f7ff fbe5 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 800400e:	4602      	mov	r2, r0
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009a      	lsls	r2, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	4a7d      	ldr	r2, [pc, #500]	; (800421c <UART_SetConfig+0x32c>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2264      	movs	r2, #100	; 0x64
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	1aeb      	subs	r3, r5, r3
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	3332      	adds	r3, #50	; 0x32
 8004038:	4a78      	ldr	r2, [pc, #480]	; (800421c <UART_SetConfig+0x32c>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	f003 0207 	and.w	r2, r3, #7
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4422      	add	r2, r4
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	e154      	b.n	80042f8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800404e:	f7ff fbaf 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004052:	4602      	mov	r2, r0
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009a      	lsls	r2, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	4a6c      	ldr	r2, [pc, #432]	; (800421c <UART_SetConfig+0x32c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	011c      	lsls	r4, r3, #4
 8004072:	f7ff fb9d 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004076:	4602      	mov	r2, r0
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009a      	lsls	r2, r3, #2
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fbb2 f5f3 	udiv	r5, r2, r3
 800408c:	f7ff fb90 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004090:	4602      	mov	r2, r0
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	009a      	lsls	r2, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	4a5d      	ldr	r2, [pc, #372]	; (800421c <UART_SetConfig+0x32c>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2264      	movs	r2, #100	; 0x64
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	1aeb      	subs	r3, r5, r3
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	3332      	adds	r3, #50	; 0x32
 80040ba:	4a58      	ldr	r2, [pc, #352]	; (800421c <UART_SetConfig+0x32c>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c8:	441c      	add	r4, r3
 80040ca:	f7ff fb71 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 80040ce:	4602      	mov	r2, r0
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009a      	lsls	r2, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80040e4:	f7ff fb64 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	009a      	lsls	r2, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	4a47      	ldr	r2, [pc, #284]	; (800421c <UART_SetConfig+0x32c>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	2264      	movs	r2, #100	; 0x64
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	1aeb      	subs	r3, r5, r3
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	3332      	adds	r3, #50	; 0x32
 8004112:	4a42      	ldr	r2, [pc, #264]	; (800421c <UART_SetConfig+0x32c>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	f003 0207 	and.w	r2, r3, #7
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4422      	add	r2, r4
 8004124:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004126:	e0e7      	b.n	80042f8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a39      	ldr	r2, [pc, #228]	; (8004214 <UART_SetConfig+0x324>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <UART_SetConfig+0x24c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a38      	ldr	r2, [pc, #224]	; (8004218 <UART_SetConfig+0x328>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d171      	bne.n	8004220 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800413c:	f7ff fb4c 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004140:	4602      	mov	r2, r0
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009a      	lsls	r2, r3, #2
 800414a:	441a      	add	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	4a31      	ldr	r2, [pc, #196]	; (800421c <UART_SetConfig+0x32c>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	011c      	lsls	r4, r3, #4
 8004160:	f7ff fb3a 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004164:	4602      	mov	r2, r0
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	009a      	lsls	r2, r3, #2
 800416e:	441a      	add	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	fbb2 f5f3 	udiv	r5, r2, r3
 800417a:	f7ff fb2d 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 800417e:	4602      	mov	r2, r0
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	441a      	add	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	4a21      	ldr	r2, [pc, #132]	; (800421c <UART_SetConfig+0x32c>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2264      	movs	r2, #100	; 0x64
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	1aeb      	subs	r3, r5, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <UART_SetConfig+0x32c>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	441c      	add	r4, r3
 80041b6:	f7ff fb0f 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009a      	lsls	r2, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80041d0:	f7ff fb02 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009a      	lsls	r2, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <UART_SetConfig+0x32c>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2264      	movs	r2, #100	; 0x64
 80041f4:	fb02 f303 	mul.w	r3, r2, r3
 80041f8:	1aeb      	subs	r3, r5, r3
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <UART_SetConfig+0x32c>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4422      	add	r2, r4
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	e071      	b.n	80042f8 <UART_SetConfig+0x408>
 8004214:	40011000 	.word	0x40011000
 8004218:	40011400 	.word	0x40011400
 800421c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004220:	f7ff fac6 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004224:	4602      	mov	r2, r0
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009a      	lsls	r2, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	4a31      	ldr	r2, [pc, #196]	; (8004300 <UART_SetConfig+0x410>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	011c      	lsls	r4, r3, #4
 8004244:	f7ff fab4 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004248:	4602      	mov	r2, r0
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	009a      	lsls	r2, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	fbb2 f5f3 	udiv	r5, r2, r3
 800425e:	f7ff faa7 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 8004262:	4602      	mov	r2, r0
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009a      	lsls	r2, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a21      	ldr	r2, [pc, #132]	; (8004300 <UART_SetConfig+0x410>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2264      	movs	r2, #100	; 0x64
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	1aeb      	subs	r3, r5, r3
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	3332      	adds	r3, #50	; 0x32
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <UART_SetConfig+0x410>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004298:	441c      	add	r4, r3
 800429a:	f7ff fa89 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 800429e:	4602      	mov	r2, r0
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80042b4:	f7ff fa7c 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009a      	lsls	r2, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <UART_SetConfig+0x410>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2264      	movs	r2, #100	; 0x64
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	1aeb      	subs	r3, r5, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	; 0x32
 80042e2:	4a07      	ldr	r2, [pc, #28]	; (8004300 <UART_SetConfig+0x410>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4422      	add	r2, r4
 80042f4:	609a      	str	r2, [r3, #8]
}
 80042f6:	e7ff      	b.n	80042f8 <UART_SetConfig+0x408>
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004300:	51eb851f 	.word	0x51eb851f

08004304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004304:	b084      	sub	sp, #16
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	f107 001c 	add.w	r0, r7, #28
 8004312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	2b01      	cmp	r3, #1
 800431a:	d122      	bne.n	8004362 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f94a 	bl	80045f0 <USB_CoreReset>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e01a      	b.n	8004398 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f93e 	bl	80045f0 <USB_CoreReset>
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
 800438a:	e005      	b.n	8004398 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10b      	bne.n	80043b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f043 0206 	orr.w	r2, r3, #6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c2:	b004      	add	sp, #16
 80043c4:	4770      	bx	lr

080043c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f043 0201 	orr.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f023 0201 	bic.w	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d106      	bne.n	8004436 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e00b      	b.n	800444e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e001      	b.n	800444e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e003      	b.n	8004456 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800444e:	2032      	movs	r0, #50	; 0x32
 8004450:	f7fc f8ac 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <USB_FlushTxFifo+0x48>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e006      	b.n	800449a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d0f0      	beq.n	800447a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	00030d40 	.word	0x00030d40

080044ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2210      	movs	r2, #16
 80044bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <USB_FlushRxFifo+0x40>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e006      	b.n	80044de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d0f0      	beq.n	80044be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	00030d40 	.word	0x00030d40

080044f0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	4611      	mov	r1, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	460b      	mov	r3, r1
 8004500:	71fb      	strb	r3, [r7, #7]
 8004502:	4613      	mov	r3, r2
 8004504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800450e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11a      	bne.n	800454c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004516:	88bb      	ldrh	r3, [r7, #4]
 8004518:	3303      	adds	r3, #3
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e00f      	b.n	8004544 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	031a      	lsls	r2, r3, #12
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004530:	461a      	mov	r2, r3
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3304      	adds	r3, #4
 800453c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	3301      	adds	r3, #1
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	429a      	cmp	r2, r3
 800454a:	d3eb      	bcc.n	8004524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3724      	adds	r7, #36	; 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800455a:	b480      	push	{r7}
 800455c:	b089      	sub	sp, #36	; 0x24
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	4613      	mov	r3, r2
 8004566:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	3303      	adds	r3, #3
 8004574:	089b      	lsrs	r3, r3, #2
 8004576:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	e00b      	b.n	8004596 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	601a      	str	r2, [r3, #0]
    pDest++;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3304      	adds	r3, #4
 800458e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3301      	adds	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d3ef      	bcc.n	800457e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800459e:	69fb      	ldr	r3, [r7, #28]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3724      	adds	r7, #36	; 0x24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80045c4:	68fb      	ldr	r3, [r7, #12]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0301 	and.w	r3, r3, #1
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a13      	ldr	r2, [pc, #76]	; (8004654 <USB_CoreReset+0x64>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e01b      	b.n	8004646 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	daf2      	bge.n	80045fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f043 0201 	orr.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <USB_CoreReset+0x64>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e006      	b.n	8004646 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d0f0      	beq.n	8004626 <USB_CoreReset+0x36>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	00030d40 	.word	0x00030d40

08004658 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004658:	b084      	sub	sp, #16
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	f107 001c 	add.w	r0, r7, #28
 8004666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004674:	461a      	mov	r2, r3
 8004676:	2300      	movs	r3, #0
 8004678:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d10a      	bne.n	80046c6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	e014      	b.n	80046f0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d4:	f023 0304 	bic.w	r3, r3, #4
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e009      	b.n	80046f0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ea:	f023 0304 	bic.w	r3, r3, #4
 80046ee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80046f0:	2110      	movs	r1, #16
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff feb4 	bl	8004460 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fed7 	bl	80044ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e015      	b.n	8004730 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004710:	461a      	mov	r2, r3
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004724:	461a      	mov	r2, r3
 8004726:	2300      	movs	r3, #0
 8004728:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3301      	adds	r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	429a      	cmp	r2, r3
 8004736:	d3e5      	bcc.n	8004704 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004738:	2101      	movs	r1, #1
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f882 	bl	8004844 <USB_DriveVbus>

  HAL_Delay(200U);
 8004740:	20c8      	movs	r0, #200	; 0xc8
 8004742:	f7fb ff33 	bl	80005ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f04f 32ff 	mov.w	r2, #4294967295
 8004752:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00b      	beq.n	8004778 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004766:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a14      	ldr	r2, [pc, #80]	; (80047bc <USB_HostInit+0x164>)
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <USB_HostInit+0x168>)
 8004772:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004776:	e009      	b.n	800478c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <USB_HostInit+0x16c>)
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <USB_HostInit+0x170>)
 8004788:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <USB_HostInit+0x174>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b6:	b004      	add	sp, #16
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	01000200 	.word	0x01000200
 80047c0:	00e00300 	.word	0x00e00300
 80047c4:	00600080 	.word	0x00600080
 80047c8:	004000e0 	.word	0x004000e0
 80047cc:	a3200008 	.word	0xa3200008

080047d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	68f9      	ldr	r1, [r7, #12]
 8004804:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004818:	461a      	mov	r2, r3
 800481a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800481e:	6053      	str	r3, [r2, #4]
 8004820:	e009      	b.n	8004836 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d106      	bne.n	8004836 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800482e:	461a      	mov	r2, r3
 8004830:	f241 7370 	movw	r3, #6000	; 0x1770
 8004834:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004868:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <USB_DriveVbus+0x44>
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d106      	bne.n	8004888 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004882:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004886:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004892:	d109      	bne.n	80048a8 <USB_DriveVbus+0x64>
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	b29b      	uxth	r3, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	70fb      	strb	r3, [r7, #3]
 80048ea:	460b      	mov	r3, r1
 80048ec:	70bb      	strb	r3, [r7, #2]
 80048ee:	4613      	mov	r3, r2
 80048f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	461a      	mov	r2, r3
 8004908:	f04f 33ff 	mov.w	r3, #4294967295
 800490c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800490e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004912:	2b03      	cmp	r3, #3
 8004914:	d87e      	bhi.n	8004a14 <USB_HC_Init+0x13c>
 8004916:	a201      	add	r2, pc, #4	; (adr r2, 800491c <USB_HC_Init+0x44>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	0800492d 	.word	0x0800492d
 8004920:	080049d7 	.word	0x080049d7
 8004924:	0800492d 	.word	0x0800492d
 8004928:	08004999 	.word	0x08004999
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	f240 439d 	movw	r3, #1181	; 0x49d
 800493e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004940:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004944:	2b00      	cmp	r3, #0
 8004946:	da10      	bge.n	800496a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	440a      	add	r2, r1
 800495e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004966:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004968:	e057      	b.n	8004a1a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d051      	beq.n	8004a1a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4413      	add	r3, r2
 800497e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	440a      	add	r2, r1
 800498c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004990:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004994:	60d3      	str	r3, [r2, #12]
      break;
 8004996:	e040      	b.n	8004a1a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a4:	461a      	mov	r2, r3
 80049a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80049aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80049ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da34      	bge.n	8004a1e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80049d4:	e023      	b.n	8004a1e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	461a      	mov	r2, r3
 80049e4:	f240 2325 	movw	r3, #549	; 0x225
 80049e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80049ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da17      	bge.n	8004a22 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a0c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004a10:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004a12:	e006      	b.n	8004a22 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
      break;
 8004a18:	e004      	b.n	8004a24 <USB_HC_Init+0x14c>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <USB_HC_Init+0x14c>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <USB_HC_Init+0x14c>
      break;
 8004a22:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	2101      	movs	r1, #1
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004a4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da03      	bge.n	8004a5e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	e001      	b.n	8004a62 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d103      	bne.n	8004a72 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e001      	b.n	8004a76 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a76:	787b      	ldrb	r3, [r7, #1]
 8004a78:	059b      	lsls	r3, r3, #22
 8004a7a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a7e:	78bb      	ldrb	r3, [r7, #2]
 8004a80:	02db      	lsls	r3, r3, #11
 8004a82:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a86:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a8c:	049b      	lsls	r3, r3, #18
 8004a8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a9a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	0159      	lsls	r1, r3, #5
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ab2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004ab4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d10f      	bne.n	8004adc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ada:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08c      	sub	sp, #48	; 0x30
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b08:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d028      	beq.n	8004b68 <USB_HC_StartXfer+0x7c>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	791b      	ldrb	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d124      	bne.n	8004b68 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <USB_HC_StartXfer+0x50>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	795b      	ldrb	r3, [r3, #5]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fa2e 	bl	8004f94 <USB_DoPing>
      return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e112      	b.n	8004d62 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d112      	bne.n	8004b68 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b5c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004b60:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d018      	beq.n	8004ba2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	8912      	ldrh	r2, [r2, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	8912      	ldrh	r2, [r2, #8]
 8004b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b84:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004b86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b88:	8b7b      	ldrh	r3, [r7, #26]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d90b      	bls.n	8004ba6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004b8e:	8b7b      	ldrh	r3, [r7, #26]
 8004b90:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	8912      	ldrh	r2, [r2, #8]
 8004b98:	fb02 f203 	mul.w	r2, r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	611a      	str	r2, [r3, #16]
 8004ba0:	e001      	b.n	8004ba6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	78db      	ldrb	r3, [r3, #3]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d006      	beq.n	8004bbc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004bae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	8912      	ldrh	r2, [r2, #8]
 8004bb4:	fb02 f203 	mul.w	r2, r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bc6:	04d9      	lsls	r1, r3, #19
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <USB_HC_StartXfer+0x280>)
 8004bca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bcc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	7a9b      	ldrb	r3, [r3, #10]
 8004bd2:	075b      	lsls	r3, r3, #29
 8004bd4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bd8:	69f9      	ldr	r1, [r7, #28]
 8004bda:	0148      	lsls	r0, r1, #5
 8004bdc:	6a39      	ldr	r1, [r7, #32]
 8004bde:	4401      	add	r1, r0
 8004be0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004be4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004be6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	68d9      	ldr	r1, [r3, #12]
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfe:	460a      	mov	r2, r1
 8004c00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	7e7b      	ldrb	r3, [r7, #25]
 8004c4a:	075b      	lsls	r3, r3, #29
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	0148      	lsls	r0, r1, #5
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	4401      	add	r1, r0
 8004c54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a41      	ldr	r2, [pc, #260]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c6c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c6e:	4b40      	ldr	r3, [pc, #256]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c76:	4a3e      	ldr	r2, [pc, #248]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c78:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	78db      	ldrb	r3, [r3, #3]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d006      	beq.n	8004c90 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	4a39      	ldr	r2, [pc, #228]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e005      	b.n	8004c9c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004c90:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c98:	4a35      	ldr	r2, [pc, #212]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c9a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c9c:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ca4:	4a32      	ldr	r2, [pc, #200]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004ca6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <USB_HC_StartXfer+0x284>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d14e      	bne.n	8004d60 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	78db      	ldrb	r3, [r3, #3]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d14a      	bne.n	8004d60 <USB_HC_StartXfer+0x274>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d046      	beq.n	8004d60 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	79db      	ldrb	r3, [r3, #7]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d830      	bhi.n	8004d3c <USB_HC_StartXfer+0x250>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <USB_HC_StartXfer+0x1f4>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004d15 	.word	0x08004d15
 8004ce8:	08004cf1 	.word	0x08004cf1
 8004cec:	08004d15 	.word	0x08004d15
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	3303      	adds	r3, #3
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004cfa:	8afa      	ldrh	r2, [r7, #22]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d91c      	bls.n	8004d40 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	619a      	str	r2, [r3, #24]
          }
          break;
 8004d12:	e015      	b.n	8004d40 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	3303      	adds	r3, #3
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004d1e:	8afa      	ldrh	r2, [r7, #22]
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90a      	bls.n	8004d44 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	619a      	str	r2, [r3, #24]
          }
          break;
 8004d3a:	e003      	b.n	8004d44 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004d3c:	bf00      	nop
 8004d3e:	e002      	b.n	8004d46 <USB_HC_StartXfer+0x25a>
          break;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <USB_HC_StartXfer+0x25a>
          break;
 8004d44:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	785a      	ldrb	r2, [r3, #1]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	b298      	uxth	r0, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4603      	mov	r3, r0
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff fbc8 	bl	80044f0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3728      	adds	r7, #40	; 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	1ff80000 	.word	0x1ff80000
 8004d70:	200000ac 	.word	0x200000ac

08004d74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	b29b      	uxth	r3, r3
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	0c9b      	lsrs	r3, r3, #18
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <USB_HC_Halt+0x3a>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d16c      	bne.n	8004eaa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dee:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d143      	bne.n	8004e84 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e3a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e5a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e68:	d81d      	bhi.n	8004ea6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e80:	d0ec      	beq.n	8004e5c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e82:	e080      	b.n	8004f86 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ea2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ea4:	e06f      	b.n	8004f86 <USB_HC_Halt+0x1f0>
          break;
 8004ea6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ea8:	e06d      	b.n	8004f86 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ec8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d143      	bne.n	8004f62 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ef8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f18:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f38:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f46:	d81d      	bhi.n	8004f84 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f5e:	d0ec      	beq.n	8004f3a <USB_HC_Halt+0x1a4>
 8004f60:	e011      	b.n	8004f86 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e000      	b.n	8004f86 <USB_HC_Halt+0x1f0>
          break;
 8004f84:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	04da      	lsls	r2, r3, #19
 8004fb0:	4b15      	ldr	r3, [pc, #84]	; (8005008 <USB_DoPing+0x74>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fc4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fdc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fe4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	1ff80000 	.word	0x1ff80000

0800500c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff f9e3 	bl	80043e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005022:	2110      	movs	r1, #16
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fa1b 	bl	8004460 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff fa3e 	bl	80044ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	e01f      	b.n	8005076 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800504c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005054:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800505c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3301      	adds	r3, #1
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b0f      	cmp	r3, #15
 800507a:	d9dc      	bls.n	8005036 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e034      	b.n	80050ec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005098:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	461a      	mov	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3301      	adds	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c8:	d80c      	bhi.n	80050e4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e0:	d0ec      	beq.n	80050bc <USB_StopHost+0xb0>
 80050e2:	e000      	b.n	80050e6 <USB_StopHost+0xda>
        break;
 80050e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3301      	adds	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d9c7      	bls.n	8005082 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f8:	461a      	mov	r2, r3
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f04f 32ff 	mov.w	r2, #4294967295
 8005106:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff f95c 	bl	80043c6 <USB_EnableGlobalInt>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af04      	add	r7, sp, #16
 800511e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005120:	2302      	movs	r3, #2
 8005122:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005124:	2301      	movs	r3, #1
 8005126:	2202      	movs	r2, #2
 8005128:	2102      	movs	r1, #2
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fc3a 	bl	80059a4 <USBH_FindInterface>
 8005130:	4603      	mov	r3, r0
 8005132:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	2bff      	cmp	r3, #255	; 0xff
 8005138:	f000 812a 	beq.w	8005390 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fc13 	bl	800596c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800514c:	2050      	movs	r0, #80	; 0x50
 800514e:	f001 ffa5 	bl	800709c <malloc>
 8005152:	4603      	mov	r3, r0
 8005154:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	211a      	movs	r1, #26
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b25b      	sxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	da15      	bge.n	80051a4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005178:	7bbb      	ldrb	r3, [r7, #14]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	211a      	movs	r1, #26
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	211a      	movs	r1, #26
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800519e:	881a      	ldrh	r2, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 ff9f 	bl	80060ee <USBH_AllocPipe>
 80051b0:	4603      	mov	r3, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	7819      	ldrb	r1, [r3, #0]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	7858      	ldrb	r0, [r3, #1]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	8952      	ldrh	r2, [r2, #10]
 80051d0:	9202      	str	r2, [sp, #8]
 80051d2:	2203      	movs	r2, #3
 80051d4:	9201      	str	r2, [sp, #4]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4623      	mov	r3, r4
 80051da:	4602      	mov	r2, r0
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 ff57 	bl	8006090 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f001 fe86 	bl	8006efc <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80051f0:	2300      	movs	r3, #0
 80051f2:	2200      	movs	r2, #0
 80051f4:	210a      	movs	r1, #10
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fbd4 	bl	80059a4 <USBH_FindInterface>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	2bff      	cmp	r3, #255	; 0xff
 8005204:	f000 80c4 	beq.w	8005390 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	211a      	movs	r1, #26
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	4413      	add	r3, r2
 8005214:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	b25b      	sxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	da16      	bge.n	800524e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	211a      	movs	r1, #26
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	211a      	movs	r1, #26
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	4413      	add	r3, r2
 8005242:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005246:	881a      	ldrh	r2, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	835a      	strh	r2, [r3, #26]
 800524c:	e015      	b.n	800527a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	211a      	movs	r1, #26
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800525e:	781a      	ldrb	r2, [r3, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005264:	7bbb      	ldrb	r3, [r7, #14]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	211a      	movs	r1, #26
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	4413      	add	r3, r2
 8005270:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005274:	881a      	ldrh	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	211a      	movs	r1, #26
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	f203 3352 	addw	r3, r3, #850	; 0x352
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b25b      	sxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	da16      	bge.n	80052c0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	211a      	movs	r1, #26
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	f203 3352 	addw	r3, r3, #850	; 0x352
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	211a      	movs	r1, #26
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80052b8:	881a      	ldrh	r2, [r3, #0]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	835a      	strh	r2, [r3, #26]
 80052be:	e015      	b.n	80052ec <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	211a      	movs	r1, #26
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	f203 3352 	addw	r3, r3, #850	; 0x352
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80052d6:	7bbb      	ldrb	r3, [r7, #14]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	211a      	movs	r1, #26
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80052e6:	881a      	ldrh	r2, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	7b9b      	ldrb	r3, [r3, #14]
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fefb 	bl	80060ee <USBH_AllocPipe>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	7bdb      	ldrb	r3, [r3, #15]
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fef1 	bl	80060ee <USBH_AllocPipe>
 800530c:	4603      	mov	r3, r0
 800530e:	461a      	mov	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	7b59      	ldrb	r1, [r3, #13]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	7b98      	ldrb	r0, [r3, #14]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	8b12      	ldrh	r2, [r2, #24]
 800532c:	9202      	str	r2, [sp, #8]
 800532e:	2202      	movs	r2, #2
 8005330:	9201      	str	r2, [sp, #4]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	4623      	mov	r3, r4
 8005336:	4602      	mov	r2, r0
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fea9 	bl	8006090 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	7b19      	ldrb	r1, [r3, #12]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	7bd8      	ldrb	r0, [r3, #15]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	8b52      	ldrh	r2, [r2, #26]
 8005356:	9202      	str	r2, [sp, #8]
 8005358:	2202      	movs	r2, #2
 800535a:	9201      	str	r2, [sp, #4]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	4623      	mov	r3, r4
 8005360:	4602      	mov	r2, r0
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fe94 	bl	8006090 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	7b5b      	ldrb	r3, [r3, #13]
 8005374:	2200      	movs	r2, #0
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 fdbf 	bl	8006efc <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	7b1b      	ldrb	r3, [r3, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 fdb8 	bl	8006efc <USBH_LL_SetToggle>
      status = USBH_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}

0800539a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00e      	beq.n	80053d2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fe87 	bl	80060ce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 feaf 	bl	800612a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	7b1b      	ldrb	r3, [r3, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00e      	beq.n	80053f8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	7b1b      	ldrb	r3, [r3, #12]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fe74 	bl	80060ce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fe9c 	bl	800612a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	7b5b      	ldrb	r3, [r3, #13]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	7b5b      	ldrb	r3, [r3, #13]
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fe61 	bl	80060ce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	7b5b      	ldrb	r3, [r3, #13]
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fe89 	bl	800612a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	4618      	mov	r0, r3
 8005434:	f001 fe3a 	bl	80070ac <free>
    phost->pActiveClass->pData = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800543e:	2200      	movs	r2, #0
 8005440:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005454:	2302      	movs	r3, #2
 8005456:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	3340      	adds	r3, #64	; 0x40
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f8b2 	bl	80055d2 <GetLineCoding>
 800546e:	4603      	mov	r3, r0
 8005470:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800547e:	2102      	movs	r1, #2
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
  }
  return status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d877      	bhi.n	80055a4 <USBH_CDC_Process+0x114>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <USBH_CDC_Process+0x2c>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054d1 	.word	0x080054d1
 80054c0:	080054d7 	.word	0x080054d7
 80054c4:	08005507 	.word	0x08005507
 80054c8:	0800557b 	.word	0x0800557b
 80054cc:	08005589 	.word	0x08005589
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]
    break;
 80054d4:	e06d      	b.n	80055b2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f897 	bl	8005610 <SetLineCoding>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80054e6:	7bbb      	ldrb	r3, [r7, #14]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80054f4:	e058      	b.n	80055a8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80054f6:	7bbb      	ldrb	r3, [r7, #14]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d055      	beq.n	80055a8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2204      	movs	r2, #4
 8005500:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005504:	e050      	b.n	80055a8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3340      	adds	r3, #64	; 0x40
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f860 	bl	80055d2 <GetLineCoding>
 8005512:	4603      	mov	r3, r0
 8005514:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d126      	bne.n	800556a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552e:	791b      	ldrb	r3, [r3, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d13b      	bne.n	80055ac <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005540:	429a      	cmp	r2, r3
 8005542:	d133      	bne.n	80055ac <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005550:	429a      	cmp	r2, r3
 8005552:	d12b      	bne.n	80055ac <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800555e:	429a      	cmp	r2, r3
 8005560:	d124      	bne.n	80055ac <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f95a 	bl	800581c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005568:	e020      	b.n	80055ac <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d01d      	beq.n	80055ac <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2204      	movs	r2, #4
 8005574:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005578:	e018      	b.n	80055ac <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f867 	bl	800564e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f8dc 	bl	800573e <CDC_ProcessReception>
    break;
 8005586:	e014      	b.n	80055b2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005588:	2100      	movs	r1, #0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fb08 	bl	8005ba0 <USBH_ClrFeature>
 8005590:	4603      	mov	r3, r0
 8005592:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80055a2:	e005      	b.n	80055b0 <USBH_CDC_Process+0x120>

  default:
    break;
 80055a4:	bf00      	nop
 80055a6:	e004      	b.n	80055b2 <USBH_CDC_Process+0x122>
    break;
 80055a8:	bf00      	nop
 80055aa:	e002      	b.n	80055b2 <USBH_CDC_Process+0x122>
    break;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <USBH_CDC_Process+0x122>
    break;
 80055b0:	bf00      	nop

  }

  return status;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	22a1      	movs	r2, #161	; 0xa1
 80055e0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2221      	movs	r2, #33	; 0x21
 80055e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2207      	movs	r2, #7
 80055f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2207      	movs	r2, #7
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 faf1 	bl	8005be8 <USBH_CtlReq>
 8005606:	4603      	mov	r3, r0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2221      	movs	r2, #33	; 0x21
 800561e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2207      	movs	r2, #7
 8005636:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2207      	movs	r2, #7
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fad2 	bl	8005be8 <USBH_CtlReq>
 8005644:	4603      	mov	r3, r0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af02      	add	r7, sp, #8
 8005654:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005660:	2300      	movs	r3, #0
 8005662:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800566a:	2b01      	cmp	r3, #1
 800566c:	d002      	beq.n	8005674 <CDC_ProcessTransmission+0x26>
 800566e:	2b02      	cmp	r3, #2
 8005670:	d025      	beq.n	80056be <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005672:	e060      	b.n	8005736 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	8b12      	ldrh	r2, [r2, #24]
 800567c:	4293      	cmp	r3, r2
 800567e:	d90c      	bls.n	800569a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	69d9      	ldr	r1, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8b1a      	ldrh	r2, [r3, #24]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	7b58      	ldrb	r0, [r3, #13]
 800568c:	2301      	movs	r3, #1
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	4603      	mov	r3, r0
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fcb9 	bl	800600a <USBH_BulkSendData>
 8005698:	e00c      	b.n	80056b4 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	7b58      	ldrb	r0, [r3, #13]
 80056a8:	2301      	movs	r3, #1
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	4603      	mov	r3, r0
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fcab 	bl	800600a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80056bc:	e03b      	b.n	8005736 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	7b5b      	ldrb	r3, [r3, #13]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 fbef 	bl	8006ea8 <USBH_LL_GetURBState>
 80056ca:	4603      	mov	r3, r0
 80056cc:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d128      	bne.n	8005726 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	8b12      	ldrh	r2, [r2, #24]
 80056dc:	4293      	cmp	r3, r2
 80056de:	d90e      	bls.n	80056fe <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	8b12      	ldrh	r2, [r2, #24]
 80056e8:	1a9a      	subs	r2, r3, r2
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	8b12      	ldrh	r2, [r2, #24]
 80056f6:	441a      	add	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	61da      	str	r2, [r3, #28]
 80056fc:	e002      	b.n	8005704 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005714:	e00e      	b.n	8005734 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f868 	bl	80057f4 <USBH_CDC_TransmitCallback>
    break;
 8005724:	e006      	b.n	8005734 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d103      	bne.n	8005734 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005734:	bf00      	nop
  }
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005750:	2300      	movs	r3, #0
 8005752:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800575a:	2b03      	cmp	r3, #3
 800575c:	d002      	beq.n	8005764 <CDC_ProcessReception+0x26>
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00e      	beq.n	8005780 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005762:	e043      	b.n	80057ec <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	6a19      	ldr	r1, [r3, #32]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	8b5a      	ldrh	r2, [r3, #26]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	7b1b      	ldrb	r3, [r3, #12]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fc6f 	bl	8006054 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2204      	movs	r2, #4
 800577a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800577e:	e035      	b.n	80057ec <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	7b1b      	ldrb	r3, [r3, #12]
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fb8e 	bl	8006ea8 <USBH_LL_GetURBState>
 800578c:	4603      	mov	r3, r0
 800578e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d129      	bne.n	80057ea <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	7b1b      	ldrb	r3, [r3, #12]
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 faf1 	bl	8006d84 <USBH_LL_GetLastXferSize>
 80057a2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d016      	beq.n	80057dc <CDC_ProcessReception+0x9e>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	8b5b      	ldrh	r3, [r3, #26]
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d910      	bls.n	80057dc <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1ad2      	subs	r2, r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	441a      	add	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2203      	movs	r2, #3
 80057d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80057da:	e006      	b.n	80057ea <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f80f 	bl	8005808 <USBH_CDC_ReceiveCallback>
    break;
 80057ea:	bf00      	nop
  }
}
 80057ec:	bf00      	nop
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005844:	2302      	movs	r3, #2
 8005846:	e019      	b.n	800587c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	79fa      	ldrb	r2, [r7, #7]
 800584c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f80f 	bl	8005884 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f001 fa13 	bl	8006ca0 <USBH_LL_Init>

  return USBH_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005890:	e008      	b.n	80058a4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	32e0      	adds	r2, #224	; 0xe0
 8005898:	2100      	movs	r1, #0
 800589a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b0e      	cmp	r3, #14
 80058a8:	d9f3      	bls.n	8005892 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e009      	b.n	80058c4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ca:	d3f1      	bcc.n	80058b0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10f      	bne.n	8005954 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	33dc      	adds	r3, #220	; 0xdc
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
 8005952:	e004      	b.n	800595e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005954:	2302      	movs	r3, #2
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	e001      	b.n	800595e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800595a:	2302      	movs	r3, #2
 800595c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800595e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	429a      	cmp	r2, r3
 8005986:	d204      	bcs.n	8005992 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005990:	e001      	b.n	8005996 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005992:	2302      	movs	r3, #2
 8005994:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	70fb      	strb	r3, [r7, #3]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70bb      	strb	r3, [r7, #2]
 80059ba:	4613      	mov	r3, r2
 80059bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80059cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80059ce:	e025      	b.n	8005a1c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	221a      	movs	r2, #26
 80059d4:	fb02 f303 	mul.w	r3, r2, r3
 80059d8:	3308      	adds	r3, #8
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	3302      	adds	r3, #2
 80059e0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	795b      	ldrb	r3, [r3, #5]
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d002      	beq.n	80059f2 <USBH_FindInterface+0x4e>
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	2bff      	cmp	r3, #255	; 0xff
 80059f0:	d111      	bne.n	8005a16 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80059f6:	78ba      	ldrb	r2, [r7, #2]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d002      	beq.n	8005a02 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80059fc:	78bb      	ldrb	r3, [r7, #2]
 80059fe:	2bff      	cmp	r3, #255	; 0xff
 8005a00:	d109      	bne.n	8005a16 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005a06:	787a      	ldrb	r2, [r7, #1]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d002      	beq.n	8005a12 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a0c:	787b      	ldrb	r3, [r7, #1]
 8005a0e:	2bff      	cmp	r3, #255	; 0xff
 8005a10:	d101      	bne.n	8005a16 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	e006      	b.n	8005a24 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d9d6      	bls.n	80059d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005a22:	23ff      	movs	r3, #255	; 0xff
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 f96d 	bl	8006d18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fa44 	bl	8006ece <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f804 	bl	8005a92 <USBH_HandleSof>
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b0b      	cmp	r3, #11
 8005aa2:	d10a      	bne.n	8005aba <USBH_HandleSof+0x28>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
  }
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005ad2:	bf00      	nop
}
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005aee:	bf00      	nop
}
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10f      	bne.n	8005b2c <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00e      	beq.n	8005b3c <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b24:	2104      	movs	r1, #4
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
 8005b2a:	e007      	b.n	8005b3c <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d102      	bne.n	8005b3c <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f001 f8fd 	bl	8006d4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	791b      	ldrb	r3, [r3, #4]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fae5 	bl	800612a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	795b      	ldrb	r3, [r3, #5]
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fadf 	bl	800612a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b84:	2105      	movs	r1, #5
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 f8c4 	bl	8006d18 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2203      	movs	r2, #3
 8005b94:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	789b      	ldrb	r3, [r3, #2]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10f      	bne.n	8005bd4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f805 	bl	8005be8 <USBH_CtlReq>
 8005bde:	4603      	mov	r3, r0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	789b      	ldrb	r3, [r3, #2]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d002      	beq.n	8005c08 <USBH_CtlReq+0x20>
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d00f      	beq.n	8005c26 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005c06:	e034      	b.n	8005c72 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8005c20:	2301      	movs	r3, #1
 8005c22:	75fb      	strb	r3, [r7, #23]
    break;
 8005c24:	e025      	b.n	8005c72 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 f828 	bl	8005c7c <USBH_HandleControl>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d108      	bne.n	8005c48 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]
    break;
 8005c46:	e013      	b.n	8005c70 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d108      	bne.n	8005c60 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	75fb      	strb	r3, [r7, #23]
    break;
 8005c5e:	e007      	b.n	8005c70 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d104      	bne.n	8005c70 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	75fb      	strb	r3, [r7, #23]
    break;
 8005c70:	bf00      	nop
  }
  return status;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7e1b      	ldrb	r3, [r3, #24]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	2b0a      	cmp	r3, #10
 8005c94:	f200 814c 	bhi.w	8005f30 <USBH_HandleControl+0x2b4>
 8005c98:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <USBH_HandleControl+0x24>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005ce7 	.word	0x08005ce7
 8005ca8:	08005d51 	.word	0x08005d51
 8005cac:	08005d77 	.word	0x08005d77
 8005cb0:	08005daf 	.word	0x08005daf
 8005cb4:	08005ddb 	.word	0x08005ddb
 8005cb8:	08005e2d 	.word	0x08005e2d
 8005cbc:	08005e4f 	.word	0x08005e4f
 8005cc0:	08005e8b 	.word	0x08005e8b
 8005cc4:	08005eb3 	.word	0x08005eb3
 8005cc8:	08005ef1 	.word	0x08005ef1
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f103 0110 	add.w	r1, r3, #16
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	795b      	ldrb	r3, [r3, #5]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f939 	bl	8005f50 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	761a      	strb	r2, [r3, #24]
    break;
 8005ce4:	e12f      	b.n	8005f46 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	795b      	ldrb	r3, [r3, #5]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f8db 	bl	8006ea8 <USBH_LL_GetURBState>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d11e      	bne.n	8005d3a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	7c1b      	ldrb	r3, [r3, #16]
 8005d00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d04:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8adb      	ldrh	r3, [r3, #22]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8005d0e:	7b7b      	ldrb	r3, [r7, #13]
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d103      	bne.n	8005d1c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2203      	movs	r2, #3
 8005d18:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d1a:	e10b      	b.n	8005f34 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2205      	movs	r2, #5
 8005d20:	761a      	strb	r2, [r3, #24]
    break;
 8005d22:	e107      	b.n	8005f34 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8005d24:	7b7b      	ldrb	r3, [r7, #13]
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d103      	bne.n	8005d32 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2209      	movs	r2, #9
 8005d2e:	761a      	strb	r2, [r3, #24]
    break;
 8005d30:	e100      	b.n	8005f34 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2207      	movs	r2, #7
 8005d36:	761a      	strb	r2, [r3, #24]
    break;
 8005d38:	e0fc      	b.n	8005f34 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005d3a:	7bbb      	ldrb	r3, [r7, #14]
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d003      	beq.n	8005d48 <USBH_HandleControl+0xcc>
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	f040 80f6 	bne.w	8005f34 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	220b      	movs	r2, #11
 8005d4c:	761a      	strb	r2, [r3, #24]
    break;
 8005d4e:	e0f1      	b.n	8005f34 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6899      	ldr	r1, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	899a      	ldrh	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	791b      	ldrb	r3, [r3, #4]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f930 	bl	8005fce <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	761a      	strb	r2, [r3, #24]
    break;
 8005d74:	e0e7      	b.n	8005f46 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	791b      	ldrb	r3, [r3, #4]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 f893 	bl	8006ea8 <USBH_LL_GetURBState>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d102      	bne.n	8005d92 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2209      	movs	r2, #9
 8005d90:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	d102      	bne.n	8005d9e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d9c:	e0cc      	b.n	8005f38 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	f040 80c9 	bne.w	8005f38 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	220b      	movs	r2, #11
 8005daa:	761a      	strb	r2, [r3, #24]
    break;
 8005dac:	e0c4      	b.n	8005f38 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6899      	ldr	r1, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	899a      	ldrh	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	7958      	ldrb	r0, [r3, #5]
 8005dba:	2301      	movs	r3, #1
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f8df 	bl	8005f84 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2206      	movs	r2, #6
 8005dd6:	761a      	strb	r2, [r3, #24]
    break;
 8005dd8:	e0b5      	b.n	8005f46 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	795b      	ldrb	r3, [r3, #5]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 f861 	bl	8006ea8 <USBH_LL_GetURBState>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005dea:	7bbb      	ldrb	r3, [r7, #14]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d103      	bne.n	8005df8 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2207      	movs	r2, #7
 8005df4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005df6:	e0a1      	b.n	8005f3c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d105      	bne.n	8005e0a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	220c      	movs	r2, #12
 8005e02:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005e04:	2303      	movs	r3, #3
 8005e06:	73fb      	strb	r3, [r7, #15]
    break;
 8005e08:	e098      	b.n	8005f3c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d103      	bne.n	8005e18 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2205      	movs	r2, #5
 8005e14:	761a      	strb	r2, [r3, #24]
    break;
 8005e16:	e091      	b.n	8005f3c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	f040 808e 	bne.w	8005f3c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	220b      	movs	r2, #11
 8005e24:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005e26:	2302      	movs	r3, #2
 8005e28:	73fb      	strb	r3, [r7, #15]
    break;
 8005e2a:	e087      	b.n	8005f3c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	791b      	ldrb	r3, [r3, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8ca 	bl	8005fce <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	761a      	strb	r2, [r3, #24]

    break;
 8005e4c:	e07b      	b.n	8005f46 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	791b      	ldrb	r3, [r3, #4]
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 f827 	bl	8006ea8 <USBH_LL_GetURBState>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d105      	bne.n	8005e70 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	220d      	movs	r2, #13
 8005e68:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e6e:	e067      	b.n	8005f40 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8005e70:	7bbb      	ldrb	r3, [r7, #14]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d103      	bne.n	8005e7e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	220b      	movs	r2, #11
 8005e7a:	761a      	strb	r2, [r3, #24]
    break;
 8005e7c:	e060      	b.n	8005f40 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	2b05      	cmp	r3, #5
 8005e82:	d15d      	bne.n	8005f40 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8005e84:	2303      	movs	r3, #3
 8005e86:	73fb      	strb	r3, [r7, #15]
    break;
 8005e88:	e05a      	b.n	8005f40 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	795a      	ldrb	r2, [r3, #5]
 8005e8e:	2301      	movs	r3, #1
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	2200      	movs	r2, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f873 	bl	8005f84 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	220a      	movs	r2, #10
 8005eae:	761a      	strb	r2, [r3, #24]
    break;
 8005eb0:	e049      	b.n	8005f46 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	795b      	ldrb	r3, [r3, #5]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fff5 	bl	8006ea8 <USBH_LL_GetURBState>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d105      	bne.n	8005ed4 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	220d      	movs	r2, #13
 8005ed0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8005ed2:	e037      	b.n	8005f44 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d103      	bne.n	8005ee2 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2209      	movs	r2, #9
 8005ede:	761a      	strb	r2, [r3, #24]
    break;
 8005ee0:	e030      	b.n	8005f44 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d12d      	bne.n	8005f44 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	220b      	movs	r2, #11
 8005eec:	761a      	strb	r2, [r3, #24]
    break;
 8005eee:	e029      	b.n	8005f44 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7e5b      	ldrb	r3, [r3, #25]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	765a      	strb	r2, [r3, #25]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	7e5b      	ldrb	r3, [r3, #25]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d809      	bhi.n	8005f18 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 ff22 	bl	8006d4e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8005f16:	e016      	b.n	8005f46 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f1e:	2106      	movs	r1, #6
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8005f2e:	e00a      	b.n	8005f46 <USBH_HandleControl+0x2ca>

  default:
    break;
 8005f30:	bf00      	nop
 8005f32:	e008      	b.n	8005f46 <USBH_HandleControl+0x2ca>
    break;
 8005f34:	bf00      	nop
 8005f36:	e006      	b.n	8005f46 <USBH_HandleControl+0x2ca>
    break;
 8005f38:	bf00      	nop
 8005f3a:	e004      	b.n	8005f46 <USBH_HandleControl+0x2ca>
    break;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <USBH_HandleControl+0x2ca>
    break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <USBH_HandleControl+0x2ca>
    break;
 8005f44:	bf00      	nop
  }
  return status;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af04      	add	r7, sp, #16
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005f5e:	79f9      	ldrb	r1, [r7, #7]
 8005f60:	2300      	movs	r3, #0
 8005f62:	9303      	str	r3, [sp, #12]
 8005f64:	2308      	movs	r3, #8
 8005f66:	9302      	str	r3, [sp, #8]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	2200      	movs	r2, #0
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 ff66 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af04      	add	r7, sp, #16
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	460b      	mov	r3, r1
 8005f94:	80fb      	strh	r3, [r7, #6]
 8005f96:	4613      	mov	r3, r2
 8005f98:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005fa8:	7979      	ldrb	r1, [r7, #5]
 8005faa:	7e3b      	ldrb	r3, [r7, #24]
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	9302      	str	r3, [sp, #8]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 ff41 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b088      	sub	sp, #32
 8005fd2:	af04      	add	r7, sp, #16
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	461a      	mov	r2, r3
 8005fdc:	460b      	mov	r3, r1
 8005fde:	80fb      	strh	r3, [r7, #6]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005fe4:	7979      	ldrb	r1, [r7, #5]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9303      	str	r3, [sp, #12]
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	9302      	str	r3, [sp, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 ff23 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006000:	2300      	movs	r3, #0

}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b088      	sub	sp, #32
 800600e:	af04      	add	r7, sp, #16
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	4611      	mov	r1, r2
 8006016:	461a      	mov	r2, r3
 8006018:	460b      	mov	r3, r1
 800601a:	80fb      	strh	r3, [r7, #6]
 800601c:	4613      	mov	r3, r2
 800601e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800602e:	7979      	ldrb	r1, [r7, #5]
 8006030:	7e3b      	ldrb	r3, [r7, #24]
 8006032:	9303      	str	r3, [sp, #12]
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	9302      	str	r3, [sp, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	2301      	movs	r3, #1
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2302      	movs	r3, #2
 8006042:	2200      	movs	r2, #0
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fefe 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af04      	add	r7, sp, #16
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4611      	mov	r1, r2
 8006060:	461a      	mov	r2, r3
 8006062:	460b      	mov	r3, r1
 8006064:	80fb      	strh	r3, [r7, #6]
 8006066:	4613      	mov	r3, r2
 8006068:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800606a:	7979      	ldrb	r1, [r7, #5]
 800606c:	2300      	movs	r3, #0
 800606e:	9303      	str	r3, [sp, #12]
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	9302      	str	r3, [sp, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	2301      	movs	r3, #1
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2302      	movs	r3, #2
 800607e:	2201      	movs	r2, #1
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fee0 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af04      	add	r7, sp, #16
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	4608      	mov	r0, r1
 800609a:	4611      	mov	r1, r2
 800609c:	461a      	mov	r2, r3
 800609e:	4603      	mov	r3, r0
 80060a0:	70fb      	strb	r3, [r7, #3]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70bb      	strb	r3, [r7, #2]
 80060a6:	4613      	mov	r3, r2
 80060a8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80060aa:	7878      	ldrb	r0, [r7, #1]
 80060ac:	78ba      	ldrb	r2, [r7, #2]
 80060ae:	78f9      	ldrb	r1, [r7, #3]
 80060b0:	8b3b      	ldrh	r3, [r7, #24]
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	7d3b      	ldrb	r3, [r7, #20]
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	7c3b      	ldrb	r3, [r7, #16]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	4603      	mov	r3, r0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fe73 	bl	8006daa <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80060c4:	2300      	movs	r3, #0

}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fe92 	bl	8006e08 <USBH_LL_ClosePipe>

  return USBH_OK;
 80060e4:	2300      	movs	r3, #0

}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f831 	bl	8006162 <USBH_GetFreePipe>
 8006100:	4603      	mov	r3, r0
 8006102:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006104:	89fb      	ldrh	r3, [r7, #14]
 8006106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610a:	4293      	cmp	r3, r2
 800610c:	d007      	beq.n	800611e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	89fa      	ldrh	r2, [r7, #14]
 8006112:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	32e0      	adds	r2, #224	; 0xe0
 800611a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800611e:	89fb      	ldrh	r3, [r7, #14]
 8006120:	b2db      	uxtb	r3, r3
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	2b0a      	cmp	r3, #10
 800613a:	d80b      	bhi.n	8006154 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	32e0      	adds	r2, #224	; 0xe0
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	32e0      	adds	r2, #224	; 0xe0
 8006150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]
 8006172:	e00e      	b.n	8006192 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006174:	7bfa      	ldrb	r2, [r7, #15]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	32e0      	adds	r2, #224	; 0xe0
 800617a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	b29b      	uxth	r3, r3
 800618a:	e007      	b.n	800619c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	3301      	adds	r3, #1
 8006190:	73fb      	strb	r3, [r7, #15]
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b0a      	cmp	r3, #10
 8006196:	d9ed      	bls.n	8006174 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006198:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80061ae:	f7fa f98b 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061b2:	f000 f823 	bl	80061fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061b6:	f000 f961 	bl	800647c <MX_GPIO_Init>
  MX_I2C1_Init();
 80061ba:	f000 f8a1 	bl	8006300 <MX_I2C1_Init>
  MX_I2S3_Init();
 80061be:	f000 f8cd 	bl	800635c <MX_I2S3_Init>
  MX_SPI1_Init();
 80061c2:	f000 f8fb 	bl	80063bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80061c6:	f000 fc61 	bl	8006a8c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80061ca:	f000 f92d 	bl	8006428 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  //UART_HandleTypeDef s_UARTHandle = UART_HandleTypeDef();

  while(1){
	  char buffer[1];
	  if (HAL_UART_Receive(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY) == HAL_OK){
 80061ce:	1d39      	adds	r1, r7, #4
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	2201      	movs	r2, #1
 80061d6:	4808      	ldr	r0, [pc, #32]	; (80061f8 <main+0x50>)
 80061d8:	f7fd fd9a 	bl	8003d10 <HAL_UART_Receive>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f5      	bne.n	80061ce <main+0x26>
		  HAL_Delay(100);
 80061e2:	2064      	movs	r0, #100	; 0x64
 80061e4:	f7fa f9e2 	bl	80005ac <HAL_Delay>
		  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80061e8:	1d39      	adds	r1, r7, #4
 80061ea:	f04f 33ff 	mov.w	r3, #4294967295
 80061ee:	2201      	movs	r2, #1
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <main+0x50>)
 80061f2:	f7fd fcf4 	bl	8003bde <HAL_UART_Transmit>
  while(1){
 80061f6:	e7ea      	b.n	80061ce <main+0x26>
 80061f8:	20000170 	.word	0x20000170

080061fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b098      	sub	sp, #96	; 0x60
 8006200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006206:	2230      	movs	r2, #48	; 0x30
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f000 ff56 	bl	80070bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006210:	f107 031c 	add.w	r3, r7, #28
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	60da      	str	r2, [r3, #12]
 800621e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006220:	f107 030c 	add.w	r3, r7, #12
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	609a      	str	r2, [r3, #8]
 800622c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <SystemClock_Config+0xfc>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	4a30      	ldr	r2, [pc, #192]	; (80062f8 <SystemClock_Config+0xfc>)
 8006238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623c:	6413      	str	r3, [r2, #64]	; 0x40
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <SystemClock_Config+0xfc>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800624a:	2300      	movs	r3, #0
 800624c:	607b      	str	r3, [r7, #4]
 800624e:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <SystemClock_Config+0x100>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <SystemClock_Config+0x100>)
 8006254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	4b28      	ldr	r3, [pc, #160]	; (80062fc <SystemClock_Config+0x100>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006266:	2301      	movs	r3, #1
 8006268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800626a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006270:	2302      	movs	r3, #2
 8006272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006278:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800627a:	2308      	movs	r3, #8
 800627c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800627e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006282:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006284:	2302      	movs	r3, #2
 8006286:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006288:	2307      	movs	r3, #7
 800628a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800628c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006290:	4618      	mov	r0, r3
 8006292:	f7fc fe85 	bl	8002fa0 <HAL_RCC_OscConfig>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800629c:	f000 f9ec 	bl	8006678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062a0:	230f      	movs	r3, #15
 80062a2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062a4:	2302      	movs	r3, #2
 80062a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062a8:	2300      	movs	r3, #0
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80062ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80062b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80062b8:	f107 031c 	add.w	r3, r7, #28
 80062bc:	2105      	movs	r1, #5
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fd f8b0 	bl	8003424 <HAL_RCC_ClockConfig>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80062ca:	f000 f9d5 	bl	8006678 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80062ce:	2301      	movs	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80062d2:	23c0      	movs	r3, #192	; 0xc0
 80062d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80062d6:	2302      	movs	r3, #2
 80062d8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062da:	f107 030c 	add.w	r3, r7, #12
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fd fa8e 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80062ea:	f000 f9c5 	bl	8006678 <Error_Handler>
  }
}
 80062ee:	bf00      	nop
 80062f0:	3760      	adds	r7, #96	; 0x60
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800
 80062fc:	40007000 	.word	0x40007000

08006300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <MX_I2C1_Init+0x50>)
 8006306:	4a13      	ldr	r2, [pc, #76]	; (8006354 <MX_I2C1_Init+0x54>)
 8006308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <MX_I2C1_Init+0x50>)
 800630c:	4a12      	ldr	r2, [pc, #72]	; (8006358 <MX_I2C1_Init+0x58>)
 800630e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <MX_I2C1_Init+0x50>)
 8006312:	2200      	movs	r2, #0
 8006314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <MX_I2C1_Init+0x50>)
 8006318:	2200      	movs	r2, #0
 800631a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <MX_I2C1_Init+0x50>)
 800631e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <MX_I2C1_Init+0x50>)
 8006326:	2200      	movs	r2, #0
 8006328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <MX_I2C1_Init+0x50>)
 800632c:	2200      	movs	r2, #0
 800632e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <MX_I2C1_Init+0x50>)
 8006332:	2200      	movs	r2, #0
 8006334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006336:	4b06      	ldr	r3, [pc, #24]	; (8006350 <MX_I2C1_Init+0x50>)
 8006338:	2200      	movs	r2, #0
 800633a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800633c:	4804      	ldr	r0, [pc, #16]	; (8006350 <MX_I2C1_Init+0x50>)
 800633e:	f7fc f867 	bl	8002410 <HAL_I2C_Init>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006348:	f000 f996 	bl	8006678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800634c:	bf00      	nop
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200000c4 	.word	0x200000c4
 8006354:	40005400 	.word	0x40005400
 8006358:	000186a0 	.word	0x000186a0

0800635c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8006360:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <MX_I2S3_Init+0x54>)
 8006362:	4a14      	ldr	r2, [pc, #80]	; (80063b4 <MX_I2S3_Init+0x58>)
 8006364:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <MX_I2S3_Init+0x54>)
 8006368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800636e:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <MX_I2S3_Init+0x54>)
 8006370:	2200      	movs	r2, #0
 8006372:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8006374:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <MX_I2S3_Init+0x54>)
 8006376:	2200      	movs	r2, #0
 8006378:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800637a:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <MX_I2S3_Init+0x54>)
 800637c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006380:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <MX_I2S3_Init+0x54>)
 8006384:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <MX_I2S3_Init+0x5c>)
 8006386:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <MX_I2S3_Init+0x54>)
 800638a:	2200      	movs	r2, #0
 800638c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800638e:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <MX_I2S3_Init+0x54>)
 8006390:	2200      	movs	r2, #0
 8006392:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8006394:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <MX_I2S3_Init+0x54>)
 8006396:	2200      	movs	r2, #0
 8006398:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800639a:	4805      	ldr	r0, [pc, #20]	; (80063b0 <MX_I2S3_Init+0x54>)
 800639c:	f7fc f960 	bl	8002660 <HAL_I2S_Init>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80063a6:	f000 f967 	bl	8006678 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	200001b0 	.word	0x200001b0
 80063b4:	40003c00 	.word	0x40003c00
 80063b8:	00017700 	.word	0x00017700

080063bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80063c0:	4b17      	ldr	r3, [pc, #92]	; (8006420 <MX_SPI1_Init+0x64>)
 80063c2:	4a18      	ldr	r2, [pc, #96]	; (8006424 <MX_SPI1_Init+0x68>)
 80063c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80063c6:	4b16      	ldr	r3, [pc, #88]	; (8006420 <MX_SPI1_Init+0x64>)
 80063c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80063cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <MX_SPI1_Init+0x64>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80063d4:	4b12      	ldr	r3, [pc, #72]	; (8006420 <MX_SPI1_Init+0x64>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063da:	4b11      	ldr	r3, [pc, #68]	; (8006420 <MX_SPI1_Init+0x64>)
 80063dc:	2200      	movs	r2, #0
 80063de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063e0:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <MX_SPI1_Init+0x64>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80063e6:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <MX_SPI1_Init+0x64>)
 80063e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <MX_SPI1_Init+0x64>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <MX_SPI1_Init+0x64>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <MX_SPI1_Init+0x64>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <MX_SPI1_Init+0x64>)
 8006402:	2200      	movs	r2, #0
 8006404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <MX_SPI1_Init+0x64>)
 8006408:	220a      	movs	r2, #10
 800640a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800640c:	4804      	ldr	r0, [pc, #16]	; (8006420 <MX_SPI1_Init+0x64>)
 800640e:	f7fd fb35 	bl	8003a7c <HAL_SPI_Init>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006418:	f000 f92e 	bl	8006678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800641c:	bf00      	nop
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000118 	.word	0x20000118
 8006424:	40013000 	.word	0x40013000

08006428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800642c:	4b11      	ldr	r3, [pc, #68]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 800642e:	4a12      	ldr	r2, [pc, #72]	; (8006478 <MX_USART2_UART_Init+0x50>)
 8006430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 8006434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800643a:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 800643c:	2200      	movs	r2, #0
 800643e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 8006442:	2200      	movs	r2, #0
 8006444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 8006448:	2200      	movs	r2, #0
 800644a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 800644e:	220c      	movs	r2, #12
 8006450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006452:	4b08      	ldr	r3, [pc, #32]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 8006454:	2200      	movs	r2, #0
 8006456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 800645a:	2200      	movs	r2, #0
 800645c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800645e:	4805      	ldr	r0, [pc, #20]	; (8006474 <MX_USART2_UART_Init+0x4c>)
 8006460:	f7fd fb70 	bl	8003b44 <HAL_UART_Init>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800646a:	f000 f905 	bl	8006678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000170 	.word	0x20000170
 8006478:	40004400 	.word	0x40004400

0800647c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08c      	sub	sp, #48	; 0x30
 8006480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006482:	f107 031c 	add.w	r3, r7, #28
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	609a      	str	r2, [r3, #8]
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	4b71      	ldr	r3, [pc, #452]	; (800665c <MX_GPIO_Init+0x1e0>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	4a70      	ldr	r2, [pc, #448]	; (800665c <MX_GPIO_Init+0x1e0>)
 800649c:	f043 0310 	orr.w	r3, r3, #16
 80064a0:	6313      	str	r3, [r2, #48]	; 0x30
 80064a2:	4b6e      	ldr	r3, [pc, #440]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	4b6a      	ldr	r3, [pc, #424]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	4a69      	ldr	r2, [pc, #420]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064b8:	f043 0304 	orr.w	r3, r3, #4
 80064bc:	6313      	str	r3, [r2, #48]	; 0x30
 80064be:	4b67      	ldr	r3, [pc, #412]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	4b63      	ldr	r3, [pc, #396]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	4a62      	ldr	r2, [pc, #392]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d8:	6313      	str	r3, [r2, #48]	; 0x30
 80064da:	4b60      	ldr	r3, [pc, #384]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	4b5c      	ldr	r3, [pc, #368]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	4a5b      	ldr	r2, [pc, #364]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6313      	str	r3, [r2, #48]	; 0x30
 80064f6:	4b59      	ldr	r3, [pc, #356]	; (800665c <MX_GPIO_Init+0x1e0>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	4b55      	ldr	r3, [pc, #340]	; (800665c <MX_GPIO_Init+0x1e0>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	4a54      	ldr	r2, [pc, #336]	; (800665c <MX_GPIO_Init+0x1e0>)
 800650c:	f043 0302 	orr.w	r3, r3, #2
 8006510:	6313      	str	r3, [r2, #48]	; 0x30
 8006512:	4b52      	ldr	r3, [pc, #328]	; (800665c <MX_GPIO_Init+0x1e0>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	4b4e      	ldr	r3, [pc, #312]	; (800665c <MX_GPIO_Init+0x1e0>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	4a4d      	ldr	r2, [pc, #308]	; (800665c <MX_GPIO_Init+0x1e0>)
 8006528:	f043 0308 	orr.w	r3, r3, #8
 800652c:	6313      	str	r3, [r2, #48]	; 0x30
 800652e:	4b4b      	ldr	r3, [pc, #300]	; (800665c <MX_GPIO_Init+0x1e0>)
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800653a:	2200      	movs	r2, #0
 800653c:	2108      	movs	r1, #8
 800653e:	4848      	ldr	r0, [pc, #288]	; (8006660 <MX_GPIO_Init+0x1e4>)
 8006540:	f7fa fb02 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8006544:	2201      	movs	r2, #1
 8006546:	2101      	movs	r1, #1
 8006548:	4846      	ldr	r0, [pc, #280]	; (8006664 <MX_GPIO_Init+0x1e8>)
 800654a:	f7fa fafd 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800654e:	2200      	movs	r2, #0
 8006550:	f24f 0110 	movw	r1, #61456	; 0xf010
 8006554:	4844      	ldr	r0, [pc, #272]	; (8006668 <MX_GPIO_Init+0x1ec>)
 8006556:	f7fa faf7 	bl	8000b48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800655a:	2308      	movs	r3, #8
 800655c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800655e:	2301      	movs	r3, #1
 8006560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006562:	2300      	movs	r3, #0
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006566:	2300      	movs	r3, #0
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800656a:	f107 031c 	add.w	r3, r7, #28
 800656e:	4619      	mov	r1, r3
 8006570:	483b      	ldr	r0, [pc, #236]	; (8006660 <MX_GPIO_Init+0x1e4>)
 8006572:	f7fa f94f 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8006576:	2301      	movs	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800657a:	2301      	movs	r3, #1
 800657c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006582:	2300      	movs	r3, #0
 8006584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006586:	f107 031c 	add.w	r3, r7, #28
 800658a:	4619      	mov	r1, r3
 800658c:	4835      	ldr	r0, [pc, #212]	; (8006664 <MX_GPIO_Init+0x1e8>)
 800658e:	f7fa f941 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8006592:	2308      	movs	r3, #8
 8006594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006596:	2302      	movs	r3, #2
 8006598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	2300      	movs	r3, #0
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659e:	2300      	movs	r3, #0
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80065a2:	2305      	movs	r3, #5
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80065a6:	f107 031c 	add.w	r3, r7, #28
 80065aa:	4619      	mov	r1, r3
 80065ac:	482d      	ldr	r0, [pc, #180]	; (8006664 <MX_GPIO_Init+0x1e8>)
 80065ae:	f7fa f931 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80065b2:	2301      	movs	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80065b6:	4b2d      	ldr	r3, [pc, #180]	; (800666c <MX_GPIO_Init+0x1f0>)
 80065b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80065be:	f107 031c 	add.w	r3, r7, #28
 80065c2:	4619      	mov	r1, r3
 80065c4:	482a      	ldr	r0, [pc, #168]	; (8006670 <MX_GPIO_Init+0x1f4>)
 80065c6:	f7fa f925 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80065ca:	2304      	movs	r3, #4
 80065cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80065d6:	f107 031c 	add.w	r3, r7, #28
 80065da:	4619      	mov	r1, r3
 80065dc:	4825      	ldr	r0, [pc, #148]	; (8006674 <MX_GPIO_Init+0x1f8>)
 80065de:	f7fa f919 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80065e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e8:	2302      	movs	r3, #2
 80065ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065f0:	2300      	movs	r3, #0
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80065f4:	2305      	movs	r3, #5
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80065f8:	f107 031c 	add.w	r3, r7, #28
 80065fc:	4619      	mov	r1, r3
 80065fe:	481d      	ldr	r0, [pc, #116]	; (8006674 <MX_GPIO_Init+0x1f8>)
 8006600:	f7fa f908 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8006604:	f24f 0310 	movw	r3, #61456	; 0xf010
 8006608:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800660a:	2301      	movs	r3, #1
 800660c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006612:	2300      	movs	r3, #0
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006616:	f107 031c 	add.w	r3, r7, #28
 800661a:	4619      	mov	r1, r3
 800661c:	4812      	ldr	r0, [pc, #72]	; (8006668 <MX_GPIO_Init+0x1ec>)
 800661e:	f7fa f8f9 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8006622:	2320      	movs	r3, #32
 8006624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006626:	2300      	movs	r3, #0
 8006628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662a:	2300      	movs	r3, #0
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800662e:	f107 031c 	add.w	r3, r7, #28
 8006632:	4619      	mov	r1, r3
 8006634:	480c      	ldr	r0, [pc, #48]	; (8006668 <MX_GPIO_Init+0x1ec>)
 8006636:	f7fa f8ed 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800663a:	2302      	movs	r3, #2
 800663c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800663e:	4b0b      	ldr	r3, [pc, #44]	; (800666c <MX_GPIO_Init+0x1f0>)
 8006640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8006646:	f107 031c 	add.w	r3, r7, #28
 800664a:	4619      	mov	r1, r3
 800664c:	4804      	ldr	r0, [pc, #16]	; (8006660 <MX_GPIO_Init+0x1e4>)
 800664e:	f7fa f8e1 	bl	8000814 <HAL_GPIO_Init>

}
 8006652:	bf00      	nop
 8006654:	3730      	adds	r7, #48	; 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40023800 	.word	0x40023800
 8006660:	40021000 	.word	0x40021000
 8006664:	40020800 	.word	0x40020800
 8006668:	40020c00 	.word	0x40020c00
 800666c:	10120000 	.word	0x10120000
 8006670:	40020000 	.word	0x40020000
 8006674:	40020400 	.word	0x40020400

08006678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800668e:	2300      	movs	r3, #0
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <HAL_MspInit+0x4c>)
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	4a0f      	ldr	r2, [pc, #60]	; (80066d4 <HAL_MspInit+0x4c>)
 8006698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800669c:	6453      	str	r3, [r2, #68]	; 0x44
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <HAL_MspInit+0x4c>)
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a6:	607b      	str	r3, [r7, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	603b      	str	r3, [r7, #0]
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <HAL_MspInit+0x4c>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <HAL_MspInit+0x4c>)
 80066b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <HAL_MspInit+0x4c>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80066c6:	2007      	movs	r0, #7
 80066c8:	f7fa f862 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40023800 	.word	0x40023800

080066d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	609a      	str	r2, [r3, #8]
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <HAL_I2C_MspInit+0x84>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d12c      	bne.n	8006754 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	4b18      	ldr	r3, [pc, #96]	; (8006760 <HAL_I2C_MspInit+0x88>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	4a17      	ldr	r2, [pc, #92]	; (8006760 <HAL_I2C_MspInit+0x88>)
 8006704:	f043 0302 	orr.w	r3, r3, #2
 8006708:	6313      	str	r3, [r2, #48]	; 0x30
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <HAL_I2C_MspInit+0x88>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8006716:	f44f 7310 	mov.w	r3, #576	; 0x240
 800671a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800671c:	2312      	movs	r3, #18
 800671e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006720:	2301      	movs	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006724:	2300      	movs	r3, #0
 8006726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006728:	2304      	movs	r3, #4
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	4619      	mov	r1, r3
 8006732:	480c      	ldr	r0, [pc, #48]	; (8006764 <HAL_I2C_MspInit+0x8c>)
 8006734:	f7fa f86e 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <HAL_I2C_MspInit+0x88>)
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	4a07      	ldr	r2, [pc, #28]	; (8006760 <HAL_I2C_MspInit+0x88>)
 8006742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006746:	6413      	str	r3, [r2, #64]	; 0x40
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_I2C_MspInit+0x88>)
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006754:	bf00      	nop
 8006756:	3728      	adds	r7, #40	; 0x28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40005400 	.word	0x40005400
 8006760:	40023800 	.word	0x40023800
 8006764:	40020400 	.word	0x40020400

08006768 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006770:	f107 0314 	add.w	r3, r7, #20
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	60da      	str	r2, [r3, #12]
 800677e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a28      	ldr	r2, [pc, #160]	; (8006828 <HAL_I2S_MspInit+0xc0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d14a      	bne.n	8006820 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	4b27      	ldr	r3, [pc, #156]	; (800682c <HAL_I2S_MspInit+0xc4>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	4a26      	ldr	r2, [pc, #152]	; (800682c <HAL_I2S_MspInit+0xc4>)
 8006794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006798:	6413      	str	r3, [r2, #64]	; 0x40
 800679a:	4b24      	ldr	r3, [pc, #144]	; (800682c <HAL_I2S_MspInit+0xc4>)
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	4b20      	ldr	r3, [pc, #128]	; (800682c <HAL_I2S_MspInit+0xc4>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	4a1f      	ldr	r2, [pc, #124]	; (800682c <HAL_I2S_MspInit+0xc4>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6313      	str	r3, [r2, #48]	; 0x30
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <HAL_I2S_MspInit+0xc4>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	4b19      	ldr	r3, [pc, #100]	; (800682c <HAL_I2S_MspInit+0xc4>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_I2S_MspInit+0xc4>)
 80067cc:	f043 0304 	orr.w	r3, r3, #4
 80067d0:	6313      	str	r3, [r2, #48]	; 0x30
 80067d2:	4b16      	ldr	r3, [pc, #88]	; (800682c <HAL_I2S_MspInit+0xc4>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	60bb      	str	r3, [r7, #8]
 80067dc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80067de:	2310      	movs	r3, #16
 80067e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e2:	2302      	movs	r3, #2
 80067e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ea:	2300      	movs	r3, #0
 80067ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80067ee:	2306      	movs	r3, #6
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80067f2:	f107 0314 	add.w	r3, r7, #20
 80067f6:	4619      	mov	r1, r3
 80067f8:	480d      	ldr	r0, [pc, #52]	; (8006830 <HAL_I2S_MspInit+0xc8>)
 80067fa:	f7fa f80b 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80067fe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8006802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006804:	2302      	movs	r3, #2
 8006806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006808:	2300      	movs	r3, #0
 800680a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800680c:	2300      	movs	r3, #0
 800680e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006810:	2306      	movs	r3, #6
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006814:	f107 0314 	add.w	r3, r7, #20
 8006818:	4619      	mov	r1, r3
 800681a:	4806      	ldr	r0, [pc, #24]	; (8006834 <HAL_I2S_MspInit+0xcc>)
 800681c:	f7f9 fffa 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006820:	bf00      	nop
 8006822:	3728      	adds	r7, #40	; 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40003c00 	.word	0x40003c00
 800682c:	40023800 	.word	0x40023800
 8006830:	40020000 	.word	0x40020000
 8006834:	40020800 	.word	0x40020800

08006838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006840:	f107 0314 	add.w	r3, r7, #20
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a19      	ldr	r2, [pc, #100]	; (80068bc <HAL_SPI_MspInit+0x84>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d12b      	bne.n	80068b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <HAL_SPI_MspInit+0x88>)
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <HAL_SPI_MspInit+0x88>)
 8006864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006868:	6453      	str	r3, [r2, #68]	; 0x44
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <HAL_SPI_MspInit+0x88>)
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <HAL_SPI_MspInit+0x88>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <HAL_SPI_MspInit+0x88>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6313      	str	r3, [r2, #48]	; 0x30
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <HAL_SPI_MspInit+0x88>)
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8006892:	23e0      	movs	r3, #224	; 0xe0
 8006894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006896:	2302      	movs	r3, #2
 8006898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689e:	2300      	movs	r3, #0
 80068a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80068a2:	2305      	movs	r3, #5
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	4619      	mov	r1, r3
 80068ac:	4805      	ldr	r0, [pc, #20]	; (80068c4 <HAL_SPI_MspInit+0x8c>)
 80068ae:	f7f9 ffb1 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80068b2:	bf00      	nop
 80068b4:	3728      	adds	r7, #40	; 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40013000 	.word	0x40013000
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40020000 	.word	0x40020000

080068c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <HAL_UART_MspInit+0x84>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d12b      	bne.n	8006942 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	4b18      	ldr	r3, [pc, #96]	; (8006950 <HAL_UART_MspInit+0x88>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	4a17      	ldr	r2, [pc, #92]	; (8006950 <HAL_UART_MspInit+0x88>)
 80068f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f8:	6413      	str	r3, [r2, #64]	; 0x40
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <HAL_UART_MspInit+0x88>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <HAL_UART_MspInit+0x88>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	4a10      	ldr	r2, [pc, #64]	; (8006950 <HAL_UART_MspInit+0x88>)
 8006910:	f043 0301 	orr.w	r3, r3, #1
 8006914:	6313      	str	r3, [r2, #48]	; 0x30
 8006916:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <HAL_UART_MspInit+0x88>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006922:	230c      	movs	r3, #12
 8006924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006926:	2302      	movs	r3, #2
 8006928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800692a:	2301      	movs	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800692e:	2303      	movs	r3, #3
 8006930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006932:	2307      	movs	r3, #7
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	4619      	mov	r1, r3
 800693c:	4805      	ldr	r0, [pc, #20]	; (8006954 <HAL_UART_MspInit+0x8c>)
 800693e:	f7f9 ff69 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006942:	bf00      	nop
 8006944:	3728      	adds	r7, #40	; 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40004400 	.word	0x40004400
 8006950:	40023800 	.word	0x40023800
 8006954:	40020000 	.word	0x40020000

08006958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006966:	b480      	push	{r7}
 8006968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800696a:	e7fe      	b.n	800696a <HardFault_Handler+0x4>

0800696c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006970:	e7fe      	b.n	8006970 <MemManage_Handler+0x4>

08006972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006972:	b480      	push	{r7}
 8006974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006976:	e7fe      	b.n	8006976 <BusFault_Handler+0x4>

08006978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800697c:	e7fe      	b.n	800697c <UsageFault_Handler+0x4>

0800697e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800697e:	b480      	push	{r7}
 8006980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006982:	bf00      	nop
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800699a:	b480      	push	{r7}
 800699c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800699e:	bf00      	nop
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069ac:	f7f9 fdde 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069b0:	bf00      	nop
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80069b8:	4802      	ldr	r0, [pc, #8]	; (80069c4 <OTG_FS_IRQHandler+0x10>)
 80069ba:	f7fa fb63 	bl	8001084 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200005c4 	.word	0x200005c4

080069c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80069d0:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <_sbrk+0x50>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d102      	bne.n	80069de <_sbrk+0x16>
		heap_end = &end;
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <_sbrk+0x50>)
 80069da:	4a10      	ldr	r2, [pc, #64]	; (8006a1c <_sbrk+0x54>)
 80069dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80069de:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <_sbrk+0x50>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <_sbrk+0x50>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4413      	add	r3, r2
 80069ec:	466a      	mov	r2, sp
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d907      	bls.n	8006a02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80069f2:	f000 fb29 	bl	8007048 <__errno>
 80069f6:	4602      	mov	r2, r0
 80069f8:	230c      	movs	r3, #12
 80069fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006a00:	e006      	b.n	8006a10 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <_sbrk+0x50>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	4a03      	ldr	r2, [pc, #12]	; (8006a18 <_sbrk+0x50>)
 8006a0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200000b0 	.word	0x200000b0
 8006a1c:	20000890 	.word	0x20000890

08006a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a24:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <SystemInit+0x60>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2a:	4a15      	ldr	r2, [pc, #84]	; (8006a80 <SystemInit+0x60>)
 8006a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006a34:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <SystemInit+0x64>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <SystemInit+0x64>)
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006a40:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <SystemInit+0x64>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <SystemInit+0x64>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <SystemInit+0x64>)
 8006a4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006a56:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <SystemInit+0x64>)
 8006a58:	4a0b      	ldr	r2, [pc, #44]	; (8006a88 <SystemInit+0x68>)
 8006a5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <SystemInit+0x64>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <SystemInit+0x64>)
 8006a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <SystemInit+0x64>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <SystemInit+0x60>)
 8006a70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a74:	609a      	str	r2, [r3, #8]
#endif
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	e000ed00 	.word	0xe000ed00
 8006a84:	40023800 	.word	0x40023800
 8006a88:	24003010 	.word	0x24003010

08006a8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006a90:	2201      	movs	r2, #1
 8006a92:	490e      	ldr	r1, [pc, #56]	; (8006acc <MX_USB_HOST_Init+0x40>)
 8006a94:	480e      	ldr	r0, [pc, #56]	; (8006ad0 <MX_USB_HOST_Init+0x44>)
 8006a96:	f7fe fecb 	bl	8005830 <USBH_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006aa0:	f7ff fdea 	bl	8006678 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006aa4:	490b      	ldr	r1, [pc, #44]	; (8006ad4 <MX_USB_HOST_Init+0x48>)
 8006aa6:	480a      	ldr	r0, [pc, #40]	; (8006ad0 <MX_USB_HOST_Init+0x44>)
 8006aa8:	f7fe ff35 	bl	8005916 <USBH_RegisterClass>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006ab2:	f7ff fde1 	bl	8006678 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006ab6:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <MX_USB_HOST_Init+0x44>)
 8006ab8:	f7fe ffba 	bl	8005a30 <USBH_Start>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006ac2:	f7ff fdd9 	bl	8006678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	08006ad9 	.word	0x08006ad9
 8006ad0:	200001f8 	.word	0x200001f8
 8006ad4:	20000008 	.word	0x20000008

08006ad8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d819      	bhi.n	8006b20 <USBH_UserProcess+0x48>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <USBH_UserProcess+0x1c>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b19 	.word	0x08006b19
 8006b04:	08006b09 	.word	0x08006b09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006b08:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <USBH_UserProcess+0x58>)
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	701a      	strb	r2, [r3, #0]
  break;
 8006b0e:	e008      	b.n	8006b22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <USBH_UserProcess+0x58>)
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
  break;
 8006b16:	e004      	b.n	8006b22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <USBH_UserProcess+0x58>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
  break;
 8006b1e:	e000      	b.n	8006b22 <USBH_UserProcess+0x4a>

  default:
  break;
 8006b20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	200000b4 	.word	0x200000b4

08006b34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b3c:	f107 0314 	add.w	r3, r7, #20
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b54:	d147      	bne.n	8006be6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	613b      	str	r3, [r7, #16]
 8006b5a:	4b25      	ldr	r3, [pc, #148]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	6313      	str	r3, [r2, #48]	; 0x30
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006b80:	f107 0314 	add.w	r3, r7, #20
 8006b84:	4619      	mov	r1, r3
 8006b86:	481b      	ldr	r0, [pc, #108]	; (8006bf4 <HAL_HCD_MspInit+0xc0>)
 8006b88:	f7f9 fe44 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006b8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b92:	2302      	movs	r3, #2
 8006b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba2:	f107 0314 	add.w	r3, r7, #20
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4812      	ldr	r0, [pc, #72]	; (8006bf4 <HAL_HCD_MspInit+0xc0>)
 8006baa:	f7f9 fe33 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bae:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb2:	4a0f      	ldr	r2, [pc, #60]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	6353      	str	r3, [r2, #52]	; 0x34
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2043      	movs	r0, #67	; 0x43
 8006bdc:	f7f9 fde3 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006be0:	2043      	movs	r0, #67	; 0x43
 8006be2:	f7f9 fdfc 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006be6:	bf00      	nop
 8006be8:	3728      	adds	r7, #40	; 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	40020000 	.word	0x40020000

08006bf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe ff31 	bl	8005a6e <USBH_LL_IncTimer>
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe ff69 	bl	8005afa <USBH_LL_Connect>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe ff81 	bl	8005b46 <USBH_LL_Disconnect>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe ff23 	bl	8005ac2 <USBH_LL_PortEnabled>
} 
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe ff23 	bl	8005ade <USBH_LL_PortDisabled>
} 
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d12a      	bne.n	8006d08 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006cb2:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a15      	ldr	r2, [pc, #84]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cbe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cc2:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cc8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006cca:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <USBH_LL_Init+0x74>)
 8006ccc:	2208      	movs	r2, #8
 8006cce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006cd0:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cde:	2202      	movs	r2, #2
 8006ce0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <USBH_LL_Init+0x74>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ce8:	480a      	ldr	r0, [pc, #40]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cea:	f7f9 ff46 	bl	8000b7a <HAL_HCD_Init>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006cf4:	f7ff fcc0 	bl	8006678 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006cf8:	4806      	ldr	r0, [pc, #24]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cfa:	f7fa fb33 	bl	8001364 <HAL_HCD_GetCurrentFrame>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fe fea4 	bl	8005a50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	200005c4 	.word	0x200005c4

08006d18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fa faae 	bl	8001290 <HAL_HCD_Start>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f912 	bl	8006f64 <USBH_Get_USB_Status>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fa fab6 	bl	80012d6 <HAL_HCD_Stop>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 f8f7 	bl	8006f64 <USBH_Get_USB_Status>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fa facd 	bl	800133a <HAL_HCD_HC_GetXferCount>
 8006da0:	4603      	mov	r3, r0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006daa:	b590      	push	{r4, r7, lr}
 8006dac:	b089      	sub	sp, #36	; 0x24
 8006dae:	af04      	add	r7, sp, #16
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	4608      	mov	r0, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	461a      	mov	r2, r3
 8006db8:	4603      	mov	r3, r0
 8006dba:	70fb      	strb	r3, [r7, #3]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70bb      	strb	r3, [r7, #2]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006dd2:	787c      	ldrb	r4, [r7, #1]
 8006dd4:	78ba      	ldrb	r2, [r7, #2]
 8006dd6:	78f9      	ldrb	r1, [r7, #3]
 8006dd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4623      	mov	r3, r4
 8006dea:	f7f9 ff28 	bl	8000c3e <HAL_HCD_HC_Init>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f8b5 	bl	8006f64 <USBH_Get_USB_Status>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd90      	pop	{r4, r7, pc}

08006e08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e22:	78fa      	ldrb	r2, [r7, #3]
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7f9 ffa1 	bl	8000d6e <HAL_HCD_HC_Halt>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f896 	bl	8006f64 <USBH_Get_USB_Status>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006e46:	b590      	push	{r4, r7, lr}
 8006e48:	b089      	sub	sp, #36	; 0x24
 8006e4a:	af04      	add	r7, sp, #16
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	70fb      	strb	r3, [r7, #3]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70bb      	strb	r3, [r7, #2]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006e6e:	787c      	ldrb	r4, [r7, #1]
 8006e70:	78ba      	ldrb	r2, [r7, #2]
 8006e72:	78f9      	ldrb	r1, [r7, #3]
 8006e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e7c:	9302      	str	r3, [sp, #8]
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	4623      	mov	r3, r4
 8006e8a:	f7f9 ff93 	bl	8000db4 <HAL_HCD_HC_SubmitRequest>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 f865 	bl	8006f64 <USBH_Get_USB_Status>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fa fa26 	bl	8001310 <HAL_HCD_HC_GetURBState>
 8006ec4:	4603      	mov	r3, r0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d103      	bne.n	8006eec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f868 	bl	8006fbc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006eec:	20c8      	movs	r0, #200	; 0xc8
 8006eee:	f7f9 fb5d 	bl	80005ac <HAL_Delay>
  return USBH_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f12:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	440b      	add	r3, r1
 8006f22:	333b      	adds	r3, #59	; 0x3b
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	68f9      	ldr	r1, [r7, #12]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	440b      	add	r3, r1
 8006f38:	3350      	adds	r3, #80	; 0x50
 8006f3a:	78ba      	ldrb	r2, [r7, #2]
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e009      	b.n	8006f54 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	440b      	add	r3, r1
 8006f4e:	3351      	adds	r3, #81	; 0x51
 8006f50:	78ba      	ldrb	r2, [r7, #2]
 8006f52:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d817      	bhi.n	8006fa8 <USBH_Get_USB_Status+0x44>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <USBH_Get_USB_Status+0x1c>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006f97 	.word	0x08006f97
 8006f88:	08006f9d 	.word	0x08006f9d
 8006f8c:	08006fa3 	.word	0x08006fa3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]
    break;
 8006f94:	e00b      	b.n	8006fae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006f96:	2302      	movs	r3, #2
 8006f98:	73fb      	strb	r3, [r7, #15]
    break;
 8006f9a:	e008      	b.n	8006fae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa0:	e005      	b.n	8006fae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa6:	e002      	b.n	8006fae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	73fb      	strb	r3, [r7, #15]
    break;
 8006fac:	bf00      	nop
  }
  return usb_status;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	73fb      	strb	r3, [r7, #15]
 8006fd4:	e001      	b.n	8006fda <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	2101      	movs	r1, #1
 8006fe0:	4803      	ldr	r0, [pc, #12]	; (8006ff0 <MX_DriverVbusFS+0x34>)
 8006fe2:	f7f9 fdb1 	bl	8000b48 <HAL_GPIO_WritePin>
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	40020800 	.word	0x40020800

08006ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800702c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006ff8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ffa:	e003      	b.n	8007004 <LoopCopyDataInit>

08006ffc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006ffe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007000:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007002:	3104      	adds	r1, #4

08007004 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007004:	480b      	ldr	r0, [pc, #44]	; (8007034 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007008:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800700a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800700c:	d3f6      	bcc.n	8006ffc <CopyDataInit>
  ldr  r2, =_sbss
 800700e:	4a0b      	ldr	r2, [pc, #44]	; (800703c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007010:	e002      	b.n	8007018 <LoopFillZerobss>

08007012 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007012:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007014:	f842 3b04 	str.w	r3, [r2], #4

08007018 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007018:	4b09      	ldr	r3, [pc, #36]	; (8007040 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800701a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800701c:	d3f9      	bcc.n	8007012 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800701e:	f7ff fcff 	bl	8006a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007022:	f000 f817 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007026:	f7ff f8bf 	bl	80061a8 <main>
  bx  lr    
 800702a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800702c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007030:	08007284 	.word	0x08007284
  ldr  r0, =_sdata
 8007034:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007038:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800703c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8007040:	2000088c 	.word	0x2000088c

08007044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007044:	e7fe      	b.n	8007044 <ADC_IRQHandler>
	...

08007048 <__errno>:
 8007048:	4b01      	ldr	r3, [pc, #4]	; (8007050 <__errno+0x8>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	2000002c 	.word	0x2000002c

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4e0d      	ldr	r6, [pc, #52]	; (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705a:	1ba4      	subs	r4, r4, r6
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2500      	movs	r5, #0
 8007060:	42a5      	cmp	r5, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4e0b      	ldr	r6, [pc, #44]	; (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <__libc_init_array+0x44>)
 8007068:	f000 f8ea 	bl	8007240 <_init>
 800706c:	1ba4      	subs	r4, r4, r6
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2500      	movs	r5, #0
 8007072:	42a5      	cmp	r5, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800707c:	4798      	blx	r3
 800707e:	3501      	adds	r5, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007086:	4798      	blx	r3
 8007088:	3501      	adds	r5, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	0800727c 	.word	0x0800727c
 8007090:	0800727c 	.word	0x0800727c
 8007094:	0800727c 	.word	0x0800727c
 8007098:	08007280 	.word	0x08007280

0800709c <malloc>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <malloc+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f000 b861 	b.w	8007168 <_malloc_r>
 80070a6:	bf00      	nop
 80070a8:	2000002c 	.word	0x2000002c

080070ac <free>:
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <free+0xc>)
 80070ae:	4601      	mov	r1, r0
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f000 b80b 	b.w	80070cc <_free_r>
 80070b6:	bf00      	nop
 80070b8:	2000002c 	.word	0x2000002c

080070bc <memset>:
 80070bc:	4402      	add	r2, r0
 80070be:	4603      	mov	r3, r0
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d100      	bne.n	80070c6 <memset+0xa>
 80070c4:	4770      	bx	lr
 80070c6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ca:	e7f9      	b.n	80070c0 <memset+0x4>

080070cc <_free_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4605      	mov	r5, r0
 80070d0:	2900      	cmp	r1, #0
 80070d2:	d045      	beq.n	8007160 <_free_r+0x94>
 80070d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d8:	1f0c      	subs	r4, r1, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bfb8      	it	lt
 80070de:	18e4      	addlt	r4, r4, r3
 80070e0:	f000 f8ac 	bl	800723c <__malloc_lock>
 80070e4:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <_free_r+0x98>)
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	4610      	mov	r0, r2
 80070ea:	b933      	cbnz	r3, 80070fa <_free_r+0x2e>
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	6014      	str	r4, [r2, #0]
 80070f0:	4628      	mov	r0, r5
 80070f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f6:	f000 b8a2 	b.w	800723e <__malloc_unlock>
 80070fa:	42a3      	cmp	r3, r4
 80070fc:	d90c      	bls.n	8007118 <_free_r+0x4c>
 80070fe:	6821      	ldr	r1, [r4, #0]
 8007100:	1862      	adds	r2, r4, r1
 8007102:	4293      	cmp	r3, r2
 8007104:	bf04      	itt	eq
 8007106:	681a      	ldreq	r2, [r3, #0]
 8007108:	685b      	ldreq	r3, [r3, #4]
 800710a:	6063      	str	r3, [r4, #4]
 800710c:	bf04      	itt	eq
 800710e:	1852      	addeq	r2, r2, r1
 8007110:	6022      	streq	r2, [r4, #0]
 8007112:	6004      	str	r4, [r0, #0]
 8007114:	e7ec      	b.n	80070f0 <_free_r+0x24>
 8007116:	4613      	mov	r3, r2
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	b10a      	cbz	r2, 8007120 <_free_r+0x54>
 800711c:	42a2      	cmp	r2, r4
 800711e:	d9fa      	bls.n	8007116 <_free_r+0x4a>
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	1858      	adds	r0, r3, r1
 8007124:	42a0      	cmp	r0, r4
 8007126:	d10b      	bne.n	8007140 <_free_r+0x74>
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	4401      	add	r1, r0
 800712c:	1858      	adds	r0, r3, r1
 800712e:	4282      	cmp	r2, r0
 8007130:	6019      	str	r1, [r3, #0]
 8007132:	d1dd      	bne.n	80070f0 <_free_r+0x24>
 8007134:	6810      	ldr	r0, [r2, #0]
 8007136:	6852      	ldr	r2, [r2, #4]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	4401      	add	r1, r0
 800713c:	6019      	str	r1, [r3, #0]
 800713e:	e7d7      	b.n	80070f0 <_free_r+0x24>
 8007140:	d902      	bls.n	8007148 <_free_r+0x7c>
 8007142:	230c      	movs	r3, #12
 8007144:	602b      	str	r3, [r5, #0]
 8007146:	e7d3      	b.n	80070f0 <_free_r+0x24>
 8007148:	6820      	ldr	r0, [r4, #0]
 800714a:	1821      	adds	r1, r4, r0
 800714c:	428a      	cmp	r2, r1
 800714e:	bf04      	itt	eq
 8007150:	6811      	ldreq	r1, [r2, #0]
 8007152:	6852      	ldreq	r2, [r2, #4]
 8007154:	6062      	str	r2, [r4, #4]
 8007156:	bf04      	itt	eq
 8007158:	1809      	addeq	r1, r1, r0
 800715a:	6021      	streq	r1, [r4, #0]
 800715c:	605c      	str	r4, [r3, #4]
 800715e:	e7c7      	b.n	80070f0 <_free_r+0x24>
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	200000b8 	.word	0x200000b8

08007168 <_malloc_r>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	1ccd      	adds	r5, r1, #3
 800716c:	f025 0503 	bic.w	r5, r5, #3
 8007170:	3508      	adds	r5, #8
 8007172:	2d0c      	cmp	r5, #12
 8007174:	bf38      	it	cc
 8007176:	250c      	movcc	r5, #12
 8007178:	2d00      	cmp	r5, #0
 800717a:	4606      	mov	r6, r0
 800717c:	db01      	blt.n	8007182 <_malloc_r+0x1a>
 800717e:	42a9      	cmp	r1, r5
 8007180:	d903      	bls.n	800718a <_malloc_r+0x22>
 8007182:	230c      	movs	r3, #12
 8007184:	6033      	str	r3, [r6, #0]
 8007186:	2000      	movs	r0, #0
 8007188:	bd70      	pop	{r4, r5, r6, pc}
 800718a:	f000 f857 	bl	800723c <__malloc_lock>
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <_malloc_r+0xac>)
 8007190:	6814      	ldr	r4, [r2, #0]
 8007192:	4621      	mov	r1, r4
 8007194:	b991      	cbnz	r1, 80071bc <_malloc_r+0x54>
 8007196:	4c20      	ldr	r4, [pc, #128]	; (8007218 <_malloc_r+0xb0>)
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	b91b      	cbnz	r3, 80071a4 <_malloc_r+0x3c>
 800719c:	4630      	mov	r0, r6
 800719e:	f000 f83d 	bl	800721c <_sbrk_r>
 80071a2:	6020      	str	r0, [r4, #0]
 80071a4:	4629      	mov	r1, r5
 80071a6:	4630      	mov	r0, r6
 80071a8:	f000 f838 	bl	800721c <_sbrk_r>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d124      	bne.n	80071fa <_malloc_r+0x92>
 80071b0:	230c      	movs	r3, #12
 80071b2:	6033      	str	r3, [r6, #0]
 80071b4:	4630      	mov	r0, r6
 80071b6:	f000 f842 	bl	800723e <__malloc_unlock>
 80071ba:	e7e4      	b.n	8007186 <_malloc_r+0x1e>
 80071bc:	680b      	ldr	r3, [r1, #0]
 80071be:	1b5b      	subs	r3, r3, r5
 80071c0:	d418      	bmi.n	80071f4 <_malloc_r+0x8c>
 80071c2:	2b0b      	cmp	r3, #11
 80071c4:	d90f      	bls.n	80071e6 <_malloc_r+0x7e>
 80071c6:	600b      	str	r3, [r1, #0]
 80071c8:	50cd      	str	r5, [r1, r3]
 80071ca:	18cc      	adds	r4, r1, r3
 80071cc:	4630      	mov	r0, r6
 80071ce:	f000 f836 	bl	800723e <__malloc_unlock>
 80071d2:	f104 000b 	add.w	r0, r4, #11
 80071d6:	1d23      	adds	r3, r4, #4
 80071d8:	f020 0007 	bic.w	r0, r0, #7
 80071dc:	1ac3      	subs	r3, r0, r3
 80071de:	d0d3      	beq.n	8007188 <_malloc_r+0x20>
 80071e0:	425a      	negs	r2, r3
 80071e2:	50e2      	str	r2, [r4, r3]
 80071e4:	e7d0      	b.n	8007188 <_malloc_r+0x20>
 80071e6:	428c      	cmp	r4, r1
 80071e8:	684b      	ldr	r3, [r1, #4]
 80071ea:	bf16      	itet	ne
 80071ec:	6063      	strne	r3, [r4, #4]
 80071ee:	6013      	streq	r3, [r2, #0]
 80071f0:	460c      	movne	r4, r1
 80071f2:	e7eb      	b.n	80071cc <_malloc_r+0x64>
 80071f4:	460c      	mov	r4, r1
 80071f6:	6849      	ldr	r1, [r1, #4]
 80071f8:	e7cc      	b.n	8007194 <_malloc_r+0x2c>
 80071fa:	1cc4      	adds	r4, r0, #3
 80071fc:	f024 0403 	bic.w	r4, r4, #3
 8007200:	42a0      	cmp	r0, r4
 8007202:	d005      	beq.n	8007210 <_malloc_r+0xa8>
 8007204:	1a21      	subs	r1, r4, r0
 8007206:	4630      	mov	r0, r6
 8007208:	f000 f808 	bl	800721c <_sbrk_r>
 800720c:	3001      	adds	r0, #1
 800720e:	d0cf      	beq.n	80071b0 <_malloc_r+0x48>
 8007210:	6025      	str	r5, [r4, #0]
 8007212:	e7db      	b.n	80071cc <_malloc_r+0x64>
 8007214:	200000b8 	.word	0x200000b8
 8007218:	200000bc 	.word	0x200000bc

0800721c <_sbrk_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4c06      	ldr	r4, [pc, #24]	; (8007238 <_sbrk_r+0x1c>)
 8007220:	2300      	movs	r3, #0
 8007222:	4605      	mov	r5, r0
 8007224:	4608      	mov	r0, r1
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	f7ff fbce 	bl	80069c8 <_sbrk>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_sbrk_r+0x1a>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	b103      	cbz	r3, 8007236 <_sbrk_r+0x1a>
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20000888 	.word	0x20000888

0800723c <__malloc_lock>:
 800723c:	4770      	bx	lr

0800723e <__malloc_unlock>:
 800723e:	4770      	bx	lr

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
