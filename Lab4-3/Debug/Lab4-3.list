
Lab4-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af0  08009af0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af8  08009af8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  08009b90  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08009b90  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0de  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e2f  00000000  00000000  0003e19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00041fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001748  00000000  00000000  000438c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002621a  00000000  00000000  00045008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015c7f  00000000  00000000  0006b222  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d83db  00000000  00000000  00080ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015927c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  001592f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a80 	.word	0x08009a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009a80 	.word	0x08009a80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fd07 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f008 f848 	bl	8008648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd1f 	bl	8001026 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fce7 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000c0 	.word	0x200000c0

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000c0 	.word	0x200000c0

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f007 ffe6 	bl	8008698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fa92 	bl	8000c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000742:	2b01      	cmp	r3, #1
 8000744:	d101      	bne.n	800074a <HAL_ADC_Start+0x1a>
 8000746:	2302      	movs	r3, #2
 8000748:	e0a5      	b.n	8000896 <HAL_ADC_Start+0x166>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b01      	cmp	r3, #1
 800075e:	d018      	beq.n	8000792 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <HAL_ADC_Start+0x174>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <HAL_ADC_Start+0x178>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9a      	lsrs	r2, r3, #18
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000784:	e002      	b.n	800078c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d179      	bne.n	8000894 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007de:	d106      	bne.n	80007ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e4:	f023 0206 	bic.w	r2, r3, #6
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_ADC_Start+0x17c>)
 80007fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d12a      	bne.n	800086c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_ADC_Start+0x180>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d015      	beq.n	800084c <HAL_ADC_Start+0x11c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_ADC_Start+0x184>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d105      	bne.n	8000836 <HAL_ADC_Start+0x106>
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_ADC_Start+0x17c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_ADC_Start+0x188>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d129      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_ADC_Start+0x17c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d823      	bhi.n	8000894 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11c      	bne.n	8000894 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	e013      	b.n	8000894 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_ADC_Start+0x180>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10e      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d107      	bne.n	8000894 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	40012300 	.word	0x40012300
 80008b0:	40012000 	.word	0x40012000
 80008b4:	40012100 	.word	0x40012100
 80008b8:	40012200 	.word	0x40012200

080008bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d8:	d113      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e8:	d10b      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f043 0220 	orr.w	r2, r3, #32
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e05c      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000902:	f7ff fea3 	bl	800064c <HAL_GetTick>
 8000906:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000908:	e01a      	b.n	8000940 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000910:	d016      	beq.n	8000940 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d007      	beq.n	8000928 <HAL_ADC_PollForConversion+0x6c>
 8000918:	f7ff fe98 	bl	800064c <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d20b      	bcs.n	8000940 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f043 0204 	orr.w	r2, r3, #4
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e03d      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1dd      	bne.n	800090a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f06f 0212 	mvn.w	r2, #18
 8000956:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d123      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000976:	2b00      	cmp	r3, #0
 8000978:	d11f      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000992:	2b00      	cmp	r3, #0
 8000994:	d111      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d105      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d101      	bne.n	80009fc <HAL_ADC_ConfigChannel+0x1c>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e105      	b.n	8000c08 <HAL_ADC_ConfigChannel+0x228>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b09      	cmp	r3, #9
 8000a0a:	d925      	bls.n	8000a58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68d9      	ldr	r1, [r3, #12]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b1e      	subs	r3, #30
 8000a22:	2207      	movs	r2, #7
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	400a      	ands	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68d9      	ldr	r1, [r3, #12]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	4603      	mov	r3, r0
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4403      	add	r3, r0
 8000a4a:	3b1e      	subs	r3, #30
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	e022      	b.n	8000a9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6919      	ldr	r1, [r3, #16]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	400a      	ands	r2, r1
 8000a7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6919      	ldr	r1, [r3, #16]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	4603      	mov	r3, r0
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4403      	add	r3, r0
 8000a94:	409a      	lsls	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d824      	bhi.n	8000af0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3b05      	subs	r3, #5
 8000ab8:	221f      	movs	r2, #31
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	3b05      	subs	r3, #5
 8000ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	e04c      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d824      	bhi.n	8000b42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	3b23      	subs	r3, #35	; 0x23
 8000b0a:	221f      	movs	r2, #31
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43da      	mvns	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	400a      	ands	r2, r1
 8000b18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	3b23      	subs	r3, #35	; 0x23
 8000b34:	fa00 f203 	lsl.w	r2, r0, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b40:	e023      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	3b41      	subs	r3, #65	; 0x41
 8000b54:	221f      	movs	r2, #31
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	400a      	ands	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b41      	subs	r3, #65	; 0x41
 8000b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_ADC_ConfigChannel+0x234>)
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b12      	cmp	r3, #18
 8000b9e:	d105      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d123      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b10      	cmp	r3, #16
 8000bbc:	d003      	beq.n	8000bc6 <HAL_ADC_ConfigChannel+0x1e6>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b11      	cmp	r3, #17
 8000bc4:	d11b      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	d111      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_ADC_ConfigChannel+0x23c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_ADC_ConfigChannel+0x240>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	0c9a      	lsrs	r2, r3, #18
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf0:	e002      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f9      	bne.n	8000bf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40012300 	.word	0x40012300
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	20000028 	.word	0x20000028
 8000c20:	431bde83 	.word	0x431bde83

08000c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c2c:	4b79      	ldr	r3, [pc, #484]	; (8000e14 <ADC_Init+0x1f0>)
 8000c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6859      	ldr	r1, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	021a      	lsls	r2, r3, #8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6859      	ldr	r1, [r3, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6899      	ldr	r1, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	4a58      	ldr	r2, [pc, #352]	; (8000e18 <ADC_Init+0x1f4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d022      	beq.n	8000d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6899      	ldr	r1, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6899      	ldr	r1, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	e00f      	b.n	8000d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0202 	bic.w	r2, r2, #2
 8000d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6899      	ldr	r1, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e1b      	ldrb	r3, [r3, #24]
 8000d3c:	005a      	lsls	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01b      	beq.n	8000d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	035a      	lsls	r2, r3, #13
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	e007      	b.n	8000d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	051a      	lsls	r2, r3, #20
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dda:	025a      	lsls	r2, r3, #9
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6899      	ldr	r1, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	029a      	lsls	r2, r3, #10
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	609a      	str	r2, [r3, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40012300 	.word	0x40012300
 8000e18:	0f000001 	.word	0x0f000001

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e16b      	b.n	8001334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 815a 	bne.w	800132e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x4a>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b12      	cmp	r3, #18
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	69b9      	ldr	r1, [r7, #24]
 80010ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0203 	and.w	r2, r3, #3
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d00b      	beq.n	8001126 <HAL_GPIO_Init+0xe6>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800111a:	2b11      	cmp	r3, #17
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b12      	cmp	r3, #18
 8001124:	d130      	bne.n	8001188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 0201 	and.w	r2, r3, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b4 	beq.w	800132e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x310>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x314>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x318>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x31c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x320>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x324>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x328>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_GPIO_Init+0x32c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20a>
 8001246:	2307      	movs	r3, #7
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124a:	2308      	movs	r3, #8
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4934      	ldr	r1, [pc, #208]	; (800134c <HAL_GPIO_Init+0x30c>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001286:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d4:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_GPIO_Init+0x330>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae90 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	3724      	adds	r7, #36	; 0x24
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a8:	b08f      	sub	sp, #60	; 0x3c
 80013aa:	af0a      	add	r7, sp, #40	; 0x28
 80013ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e054      	b.n	8001462 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f007 fc38 	bl	8008c48 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 f8f2 	bl	80055e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	687e      	ldr	r6, [r7, #4]
 8001404:	466d      	mov	r5, sp
 8001406:	f106 0410 	add.w	r4, r6, #16
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001416:	e885 0003 	stmia.w	r5, {r0, r1}
 800141a:	1d33      	adds	r3, r6, #4
 800141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f004 f86c 	bl	80054fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f004 f8e9 	bl	8005602 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	687e      	ldr	r6, [r7, #4]
 8001438:	466d      	mov	r5, sp
 800143a:	f106 0410 	add.w	r4, r6, #16
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144a:	e885 0003 	stmia.w	r5, {r0, r1}
 800144e:	1d33      	adds	r3, r6, #4
 8001450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f004 f9fc 	bl	8005850 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b089      	sub	sp, #36	; 0x24
 800146e:	af04      	add	r7, sp, #16
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	4608      	mov	r0, r1
 8001474:	4611      	mov	r1, r2
 8001476:	461a      	mov	r2, r3
 8001478:	4603      	mov	r3, r0
 800147a:	70fb      	strb	r3, [r7, #3]
 800147c:	460b      	mov	r3, r1
 800147e:	70bb      	strb	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_HCD_HC_Init+0x28>
 800148e:	2302      	movs	r3, #2
 8001490:	e07f      	b.n	8001592 <HAL_HCD_HC_Init+0x128>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800149a:	78fa      	ldrb	r2, [r7, #3]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	333d      	adds	r3, #61	; 0x3d
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3338      	adds	r3, #56	; 0x38
 80014be:	787a      	ldrb	r2, [r7, #1]
 80014c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3340      	adds	r3, #64	; 0x40
 80014d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3339      	adds	r3, #57	; 0x39
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	333f      	adds	r3, #63	; 0x3f
 80014fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	78bb      	ldrb	r3, [r7, #2]
 8001504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	333a      	adds	r3, #58	; 0x3a
 8001518:	4602      	mov	r2, r0
 800151a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800151c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001520:	2b00      	cmp	r3, #0
 8001522:	da0a      	bge.n	800153a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	333b      	adds	r3, #59	; 0x3b
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e009      	b.n	800154e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	333b      	adds	r3, #59	; 0x3b
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	333c      	adds	r3, #60	; 0x3c
 800155e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001562:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	787c      	ldrb	r4, [r7, #1]
 800156a:	78ba      	ldrb	r2, [r7, #2]
 800156c:	78f9      	ldrb	r1, [r7, #3]
 800156e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4623      	mov	r3, r4
 8001580:	f004 fae8 	bl	8005b54 <USB_HC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}

0800159a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_HCD_HC_Halt+0x1e>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e00f      	b.n	80015d8 <HAL_HCD_HC_Halt+0x3e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fd22 	bl	8006012 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	70fb      	strb	r3, [r7, #3]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70bb      	strb	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	333b      	adds	r3, #59	; 0x3b
 800160a:	78ba      	ldrb	r2, [r7, #2]
 800160c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	333f      	adds	r3, #63	; 0x3f
 800161e:	787a      	ldrb	r2, [r7, #1]
 8001620:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001622:	7c3b      	ldrb	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3342      	adds	r3, #66	; 0x42
 8001638:	2203      	movs	r2, #3
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e009      	b.n	8001652 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3342      	adds	r3, #66	; 0x42
 800164e:	2202      	movs	r2, #2
 8001650:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001652:	787b      	ldrb	r3, [r7, #1]
 8001654:	2b03      	cmp	r3, #3
 8001656:	f200 80d6 	bhi.w	8001806 <HAL_HCD_HC_SubmitRequest+0x226>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <HAL_HCD_HC_SubmitRequest+0x80>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001671 	.word	0x08001671
 8001664:	080017f1 	.word	0x080017f1
 8001668:	080016dd 	.word	0x080016dd
 800166c:	08001767 	.word	0x08001767
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001670:	7c3b      	ldrb	r3, [r7, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f040 80c9 	bne.w	800180a <HAL_HCD_HC_SubmitRequest+0x22a>
 8001678:	78bb      	ldrb	r3, [r7, #2]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80c5 	bne.w	800180a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001680:	8b3b      	ldrh	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3351      	adds	r3, #81	; 0x51
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3351      	adds	r3, #81	; 0x51
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	3342      	adds	r3, #66	; 0x42
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016c4:	e0a1      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	e096      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d120      	bne.n	8001724 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3351      	adds	r3, #81	; 0x51
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10a      	bne.n	800170e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3342      	adds	r3, #66	; 0x42
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800170c:	e07e      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3342      	adds	r3, #66	; 0x42
 800171e:	2202      	movs	r2, #2
 8001720:	701a      	strb	r2, [r3, #0]
      break;
 8001722:	e073      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3350      	adds	r3, #80	; 0x50
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3342      	adds	r3, #66	; 0x42
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
      break;
 800174e:	e05d      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3342      	adds	r3, #66	; 0x42
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
      break;
 8001764:	e052      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d120      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3351      	adds	r3, #81	; 0x51
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10a      	bne.n	8001798 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3342      	adds	r3, #66	; 0x42
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001796:	e039      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3342      	adds	r3, #66	; 0x42
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
      break;
 80017ac:	e02e      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	3350      	adds	r3, #80	; 0x50
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10a      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3342      	adds	r3, #66	; 0x42
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      break;
 80017d8:	e018      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e00d      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3342      	adds	r3, #66	; 0x42
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      break;
 8001804:	e002      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800180a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3344      	adds	r3, #68	; 0x44
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	8b39      	ldrh	r1, [r7, #24]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4403      	add	r3, r0
 8001830:	3348      	adds	r3, #72	; 0x48
 8001832:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	335c      	adds	r3, #92	; 0x5c
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	334c      	adds	r3, #76	; 0x4c
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	3339      	adds	r3, #57	; 0x39
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	335d      	adds	r3, #93	; 0x5d
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	3338      	adds	r3, #56	; 0x38
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	18d1      	adds	r1, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	f004 fa62 	bl	8005d68 <USB_HC_StartXfer>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop

080018b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 ff7f 	bl	80057ca <USB_GetMode>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	f040 80f1 	bne.w	8001ab6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 ff63 	bl	80057a4 <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80e7 	beq.w	8001ab4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 ff5a 	bl	80057a4 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018fa:	d104      	bne.n	8001906 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 ff4a 	bl	80057a4 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800191a:	d104      	bne.n	8001926 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 ff3a 	bl	80057a4 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 ff2a 	bl	80057a4 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d103      	bne.n	8001962 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 ff1c 	bl	80057a4 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001976:	d117      	bne.n	80019a8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001986:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800198a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f007 f9d9 	bl	8008d44 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f004 f815 	bl	80059c8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 fef9 	bl	80057a4 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d102      	bne.n	80019c4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f001 f8c8 	bl	8002b54 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 feeb 	bl	80057a4 <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d106      	bne.n	80019e6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f007 f997 	bl	8008d0c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2208      	movs	r2, #8
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 feda 	bl	80057a4 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019fa:	d138      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 faf5 	bl	8005ff0 <USB_HC_ReadInterrupt>
 8001a06:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e025      	b.n	8001a5a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d018      	beq.n	8001a54 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a38:	d106      	bne.n	8001a48 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f8cf 	bl	8001be4 <HCD_HC_IN_IRQHandler>
 8001a46:	e005      	b.n	8001a54 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fc5f 	bl	8002312 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3d4      	bcc.n	8001a0e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fe96 	bl	80057a4 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d101      	bne.n	8001a86 <HAL_HCD_IRQHandler+0x1d6>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_HCD_IRQHandler+0x1d8>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d014      	beq.n	8001ab6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0210 	bic.w	r2, r2, #16
 8001a9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 ffad 	bl	80029fc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0210 	orr.w	r2, r2, #16
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	e000      	b.n	8001ab6 <HAL_HCD_IRQHandler+0x206>
      return;
 8001ab4:	bf00      	nop
    }
  }
}
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_HCD_Start+0x16>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e013      	b.n	8001afa <HAL_HCD_Start+0x3e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fd6d 	bl	80055be <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 ffd0 	bl	8005a90 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_HCD_Stop+0x16>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e00d      	b.n	8001b34 <HAL_HCD_Stop+0x32>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 fbaf 	bl	8006288 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 ff77 	bl	8005a3c <USB_ResetPort>
 8001b4e:	4603      	mov	r3, r0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	335c      	adds	r3, #92	; 0x5c
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	334c      	adds	r3, #76	; 0x4c
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 ffb9 	bl	8005b30 <USB_GetCurrentFrame>
 8001bbe:	4603      	mov	r3, r0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 ff94 	bl	8005b02 <USB_GetHostSpeed>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d119      	bne.n	8001c48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c20:	461a      	mov	r2, r3
 8001c22:	2304      	movs	r3, #4
 8001c24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	0151      	lsls	r1, r2, #5
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	440a      	add	r2, r1
 8001c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	60d3      	str	r3, [r2, #12]
 8001c46:	e095      	b.n	8001d74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d109      	bne.n	8001c72 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	6093      	str	r3, [r2, #8]
 8001c70:	e080      	b.n	8001d74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d134      	bne.n	8001cf2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	0151      	lsls	r1, r2, #5
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	440a      	add	r2, r1
 8001c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
 8001ca6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	335d      	adds	r3, #93	; 0x5d
 8001cb8:	2205      	movs	r2, #5
 8001cba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2310      	movs	r3, #16
 8001ccc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2308      	movs	r3, #8
 8001cde:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 f991 	bl	8006012 <USB_HC_Halt>
 8001cf0:	e040      	b.n	8001d74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d08:	d134      	bne.n	8001d74 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	0151      	lsls	r1, r2, #5
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	440a      	add	r2, r1
 8001d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 f96c 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	461a      	mov	r2, r3
 8001d48:	2310      	movs	r3, #16
 8001d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	335d      	adds	r3, #93	; 0x5d
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d72:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8a:	d122      	bne.n	8001dd2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	0151      	lsls	r1, r2, #5
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	440a      	add	r2, r1
 8001da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 f92b 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dce:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001dd0:	e29b      	b.n	800230a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	f040 80c1 	bne.w	8001f6c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01b      	beq.n	8001e2a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	3348      	adds	r3, #72	; 0x48
 8001e02:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0159      	lsls	r1, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e16:	1ad1      	subs	r1, r2, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4403      	add	r3, r0
 8001e26:	334c      	adds	r3, #76	; 0x4c
 8001e28:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	335d      	adds	r3, #93	; 0x5d
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3358      	adds	r3, #88	; 0x58
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2301      	movs	r3, #1
 8001e62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	333f      	adds	r3, #63	; 0x3f
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	333f      	adds	r3, #63	; 0x3f
 8001e8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d121      	bne.n	8001ed4 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	0151      	lsls	r1, r2, #5
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	440a      	add	r2, r1
 8001ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 f8a9 	bl	8006012 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2310      	movs	r3, #16
 8001ed0:	6093      	str	r3, [r2, #8]
 8001ed2:	e034      	b.n	8001f3e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	333f      	adds	r3, #63	; 0x3f
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d129      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	0151      	lsls	r1, r2, #5
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	440a      	add	r2, r1
 8001f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f08:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	335c      	adds	r3, #92	; 0x5c
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	b2d8      	uxtb	r0, r3
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	335c      	adds	r3, #92	; 0x5c
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4601      	mov	r1, r0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f006 ff11 	bl	8008d60 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3350      	adds	r3, #80	; 0x50
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2d8      	uxtb	r0, r3
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3350      	adds	r3, #80	; 0x50
 8001f66:	4602      	mov	r2, r0
 8001f68:	701a      	strb	r2, [r3, #0]
}
 8001f6a:	e1ce      	b.n	800230a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	f040 80f1 	bne.w	8002166 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	0151      	lsls	r1, r2, #5
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	440a      	add	r2, r1
 8001f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9e:	f023 0302 	bic.w	r3, r3, #2
 8001fa2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	335d      	adds	r3, #93	; 0x5d
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10a      	bne.n	8001fd0 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	335c      	adds	r3, #92	; 0x5c
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e0b0      	b.n	8002132 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	335d      	adds	r3, #93	; 0x5d
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10a      	bne.n	8001ffc <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	335c      	adds	r3, #92	; 0x5c
 8001ff6:	2205      	movs	r2, #5
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e09a      	b.n	8002132 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	335d      	adds	r3, #93	; 0x5d
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b06      	cmp	r3, #6
 8002010:	d00a      	beq.n	8002028 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	335d      	adds	r3, #93	; 0x5d
 8002022:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002024:	2b08      	cmp	r3, #8
 8002026:	d156      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	3358      	adds	r3, #88	; 0x58
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4403      	add	r3, r0
 800204a:	3358      	adds	r3, #88	; 0x58
 800204c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	3358      	adds	r3, #88	; 0x58
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d914      	bls.n	800208e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3358      	adds	r3, #88	; 0x58
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	335c      	adds	r3, #92	; 0x5c
 8002088:	2204      	movs	r2, #4
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e009      	b.n	80020a2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	335c      	adds	r3, #92	; 0x5c
 800209e:	2202      	movs	r2, #2
 80020a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e02d      	b.n	8002132 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	335d      	adds	r3, #93	; 0x5d
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d122      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002116:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800211e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2302      	movs	r3, #2
 8002142:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	b2d8      	uxtb	r0, r3
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	335c      	adds	r3, #92	; 0x5c
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4601      	mov	r1, r0
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f006 fdfe 	bl	8008d60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002164:	e0d1      	b.n	800230a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d13e      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	0151      	lsls	r1, r2, #5
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	440a      	add	r2, r1
 8002192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	3358      	adds	r3, #88	; 0x58
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1c59      	adds	r1, r3, #1
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4403      	add	r3, r0
 80021be:	3358      	adds	r3, #88	; 0x58
 80021c0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	335d      	adds	r3, #93	; 0x5d
 80021d2:	2206      	movs	r2, #6
 80021d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 ff16 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	461a      	mov	r2, r3
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	6093      	str	r3, [r2, #8]
}
 80021f8:	e087      	b.n	800230a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b10      	cmp	r3, #16
 800220e:	d17c      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	333f      	adds	r3, #63	; 0x3f
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d122      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	3358      	adds	r3, #88	; 0x58
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	0151      	lsls	r1, r2, #5
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	440a      	add	r2, r1
 8002250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fed4 	bl	8006012 <USB_HC_Halt>
 800226a:	e045      	b.n	80022f8 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	333f      	adds	r3, #63	; 0x3f
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	333f      	adds	r3, #63	; 0x3f
 8002292:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002294:	2b02      	cmp	r3, #2
 8002296:	d12f      	bne.n	80022f8 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	3358      	adds	r3, #88	; 0x58
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d121      	bne.n	80022f8 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	335d      	adds	r3, #93	; 0x5d
 80022c4:	2203      	movs	r2, #3
 80022c6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	0151      	lsls	r1, r2, #5
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	440a      	add	r2, r1
 80022de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fe8d 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	2310      	movs	r3, #16
 8002308:	6093      	str	r3, [r2, #8]
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b04      	cmp	r3, #4
 8002340:	d119      	bne.n	8002376 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	461a      	mov	r2, r3
 8002350:	2304      	movs	r3, #4
 8002352:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	0151      	lsls	r1, r2, #5
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	440a      	add	r2, r1
 800236a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002374:	e33e      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b20      	cmp	r3, #32
 800238a:	d141      	bne.n	8002410 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	461a      	mov	r2, r3
 800239a:	2320      	movs	r3, #32
 800239c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	333d      	adds	r3, #61	; 0x3d
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	f040 831f 	bne.w	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	333d      	adds	r3, #61	; 0x3d
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	335c      	adds	r3, #92	; 0x5c
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	0151      	lsls	r1, r2, #5
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	440a      	add	r2, r1
 80023f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fe02 	bl	8006012 <USB_HC_Halt>
}
 800240e:	e2f1      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d13f      	bne.n	80024a6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	335d      	adds	r3, #93	; 0x5d
 8002436:	2204      	movs	r2, #4
 8002438:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	333d      	adds	r3, #61	; 0x3d
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	3358      	adds	r3, #88	; 0x58
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	0151      	lsls	r1, r2, #5
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	440a      	add	r2, r1
 8002478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fdc0 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	461a      	mov	r2, r3
 80024a0:	2340      	movs	r3, #64	; 0x40
 80024a2:	6093      	str	r3, [r2, #8]
}
 80024a4:	e2a6      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024bc:	d122      	bne.n	8002504 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	0151      	lsls	r1, r2, #5
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	440a      	add	r2, r1
 80024d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 fd92 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	461a      	mov	r2, r3
 80024fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002500:	6093      	str	r3, [r2, #8]
}
 8002502:	e277      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d135      	bne.n	8002586 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	3358      	adds	r3, #88	; 0x58
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	440a      	add	r2, r1
 8002544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fd5a 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	461a      	mov	r2, r3
 800256c:	2301      	movs	r3, #1
 800256e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	335d      	adds	r3, #93	; 0x5d
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
}
 8002584:	e236      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b08      	cmp	r3, #8
 800259a:	d12b      	bne.n	80025f4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2308      	movs	r3, #8
 80025ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fd1a 	bl	8006012 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	335d      	adds	r3, #93	; 0x5d
 80025ee:	2205      	movs	r2, #5
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	e1ff      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b10      	cmp	r3, #16
 8002608:	d155      	bne.n	80026b6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	3358      	adds	r3, #88	; 0x58
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	335d      	adds	r3, #93	; 0x5d
 800262e:	2203      	movs	r2, #3
 8002630:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	333d      	adds	r3, #61	; 0x3d
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d114      	bne.n	8002672 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	333c      	adds	r3, #60	; 0x3c
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	333d      	adds	r3, #61	; 0x3d
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	0151      	lsls	r1, r2, #5
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	440a      	add	r2, r1
 8002688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fcb8 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	461a      	mov	r2, r3
 80026b0:	2310      	movs	r3, #16
 80026b2:	6093      	str	r3, [r2, #8]
}
 80026b4:	e19e      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d12b      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fc8b 	bl	8006012 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	335d      	adds	r3, #93	; 0x5d
 800270c:	2206      	movs	r2, #6
 800270e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	6093      	str	r3, [r2, #8]
}
 8002722:	e167      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d135      	bne.n	80027a8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	0151      	lsls	r1, r2, #5
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	440a      	add	r2, r1
 8002752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fc53 	bl	8006012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	2310      	movs	r3, #16
 800277c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002790:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	335d      	adds	r3, #93	; 0x5d
 80027a2:	2208      	movs	r2, #8
 80027a4:	701a      	strb	r2, [r3, #0]
}
 80027a6:	e125      	b.n	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 811a 	bne.w	80029f4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027da:	f023 0302 	bic.w	r3, r3, #2
 80027de:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	335d      	adds	r3, #93	; 0x5d
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d137      	bne.n	8002866 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	335c      	adds	r3, #92	; 0x5c
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	333f      	adds	r3, #63	; 0x3f
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d00b      	beq.n	8002838 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	333f      	adds	r3, #63	; 0x3f
 8002830:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002832:	2b03      	cmp	r3, #3
 8002834:	f040 80c5 	bne.w	80029c2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	3351      	adds	r3, #81	; 0x51
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2d8      	uxtb	r0, r3
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3351      	adds	r3, #81	; 0x51
 8002860:	4602      	mov	r2, r0
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e0ad      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	335d      	adds	r3, #93	; 0x5d
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d10a      	bne.n	8002892 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	335c      	adds	r3, #92	; 0x5c
 800288c:	2202      	movs	r2, #2
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e097      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	335d      	adds	r3, #93	; 0x5d
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d10a      	bne.n	80028be <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	335c      	adds	r3, #92	; 0x5c
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e081      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	335d      	adds	r3, #93	; 0x5d
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d10a      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	440b      	add	r3, r1
 80028e2:	335c      	adds	r3, #92	; 0x5c
 80028e4:	2205      	movs	r2, #5
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e06b      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	335d      	adds	r3, #93	; 0x5d
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d00a      	beq.n	8002916 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	335d      	adds	r3, #93	; 0x5d
 8002910:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002912:	2b08      	cmp	r3, #8
 8002914:	d155      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	3358      	adds	r3, #88	; 0x58
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1c59      	adds	r1, r3, #1
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4403      	add	r3, r0
 8002938:	3358      	adds	r3, #88	; 0x58
 800293a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	3358      	adds	r3, #88	; 0x58
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d914      	bls.n	800297c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3358      	adds	r3, #88	; 0x58
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	335c      	adds	r3, #92	; 0x5c
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e009      	b.n	8002990 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2302      	movs	r3, #2
 80029d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	b2d8      	uxtb	r0, r3
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	335c      	adds	r3, #92	; 0x5c
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4601      	mov	r1, r0
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f006 f9b6 	bl	8008d60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	0c5b      	lsrs	r3, r3, #17
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a30:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d003      	beq.n	8002a40 <HCD_RXQLVL_IRQHandler+0x44>
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	f000 8082 	beq.w	8002b42 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a3e:	e083      	b.n	8002b48 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d07f      	beq.n	8002b46 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	3344      	adds	r3, #68	; 0x44
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d074      	beq.n	8002b46 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3344      	adds	r3, #68	; 0x44
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	b292      	uxth	r2, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f002 fe6b 	bl	8005752 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3344      	adds	r3, #68	; 0x44
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	18d1      	adds	r1, r2, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4403      	add	r3, r0
 8002aa0:	3344      	adds	r3, #68	; 0x44
 8002aa2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	334c      	adds	r3, #76	; 0x4c
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	18d1      	adds	r1, r2, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4403      	add	r3, r0
 8002ac8:	334c      	adds	r3, #76	; 0x4c
 8002aca:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HCD_RXQLVL_IRQHandler+0x154>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d031      	beq.n	8002b46 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002af8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b00:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	3350      	adds	r3, #80	; 0x50
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2d8      	uxtb	r0, r3
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3350      	adds	r3, #80	; 0x50
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	701a      	strb	r2, [r3, #0]
      break;
 8002b40:	e001      	b.n	8002b46 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b46:	bf00      	nop
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3728      	adds	r7, #40	; 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	1ff80000 	.word	0x1ff80000

08002b54 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b80:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d113      	bne.n	8002bb4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10a      	bne.n	8002bac <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002ba4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f006 f8be 	bl	8008d28 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d147      	bne.n	8002c4e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d129      	bne.n	8002c24 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d113      	bne.n	8002c00 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be2:	d106      	bne.n	8002bf2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2102      	movs	r1, #2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 feec 	bl	80059c8 <USB_InitFSLSPClkSel>
 8002bf0:	e011      	b.n	8002c16 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f002 fee5 	bl	80059c8 <USB_InitFSLSPClkSel>
 8002bfe:	e00a      	b.n	8002c16 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d106      	bne.n	8002c16 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c14:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f006 f8b0 	bl	8008d7c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f006 f883 	bl	8008d28 <HAL_HCD_Connect_Callback>
 8002c22:	e014      	b.n	8002c4e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f006 f8b7 	bl	8008d98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c3c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c4c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d103      	bne.n	8002c60 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f043 0320 	orr.w	r3, r3, #32
 8002c5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e10f      	b.n	8002ea6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f005 fd40 	bl	8008720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	; 0x24
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f001 f9ac 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a7b      	ldr	r2, [pc, #492]	; (8002eb0 <HAL_I2C_Init+0x23c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d807      	bhi.n	8002cd8 <HAL_I2C_Init+0x64>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <HAL_I2C_Init+0x240>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e006      	b.n	8002ce6 <HAL_I2C_Init+0x72>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a77      	ldr	r2, [pc, #476]	; (8002eb8 <HAL_I2C_Init+0x244>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	bf94      	ite	ls
 8002ce0:	2301      	movls	r3, #1
 8002ce2:	2300      	movhi	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0db      	b.n	8002ea6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a72      	ldr	r2, [pc, #456]	; (8002ebc <HAL_I2C_Init+0x248>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a64      	ldr	r2, [pc, #400]	; (8002eb0 <HAL_I2C_Init+0x23c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <HAL_I2C_Init+0xb4>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	e009      	b.n	8002d3c <HAL_I2C_Init+0xc8>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_I2C_Init+0x24c>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4956      	ldr	r1, [pc, #344]	; (8002eb0 <HAL_I2C_Init+0x23c>)
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	d80d      	bhi.n	8002d78 <HAL_I2C_Init+0x104>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e59      	subs	r1, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	bf38      	it	cc
 8002d74:	2304      	movcc	r3, #4
 8002d76:	e04f      	b.n	8002e18 <HAL_I2C_Init+0x1a4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <HAL_I2C_Init+0x130>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	440b      	add	r3, r1
 8002d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e012      	b.n	8002dca <HAL_I2C_Init+0x156>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	0099      	lsls	r1, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Init+0x15e>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e022      	b.n	8002e18 <HAL_I2C_Init+0x1a4>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10e      	bne.n	8002df8 <HAL_I2C_Init+0x184>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1e58      	subs	r0, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	440b      	add	r3, r1
 8002de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dec:	3301      	adds	r3, #1
 8002dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df6:	e00f      	b.n	8002e18 <HAL_I2C_Init+0x1a4>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e58      	subs	r0, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	0099      	lsls	r1, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	6809      	ldr	r1, [r1, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6911      	ldr	r1, [r2, #16]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68d2      	ldr	r2, [r2, #12]
 8002e52:	4311      	orrs	r1, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	000186a0 	.word	0x000186a0
 8002eb4:	001e847f 	.word	0x001e847f
 8002eb8:	003d08ff 	.word	0x003d08ff
 8002ebc:	431bde83 	.word	0x431bde83
 8002ec0:	10624dd3 	.word	0x10624dd3

08002ec4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e128      	b.n	8003128 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a90      	ldr	r2, [pc, #576]	; (8003130 <HAL_I2S_Init+0x26c>)
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f005 fc5d 	bl	80087b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f0c:	f023 030f 	bic.w	r3, r3, #15
 8002f10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2202      	movs	r2, #2
 8002f18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d060      	beq.n	8002fe4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	e001      	b.n	8002f34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d802      	bhi.n	8002f42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f001 f970 	bl	8004228 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f48:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f52:	d125      	bne.n	8002fa0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	461a      	mov	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	3305      	adds	r3, #5
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e01f      	b.n	8002fbe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e00e      	b.n	8002fbe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	3305      	adds	r3, #5
 8002fbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4a5c      	ldr	r2, [pc, #368]	; (8003134 <HAL_I2S_Init+0x270>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e003      	b.n	8002fec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d902      	bls.n	8002ff8 <HAL_I2S_Init+0x134>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2bff      	cmp	r3, #255	; 0xff
 8002ff6:	d907      	bls.n	8003008 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e08f      	b.n	8003128 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	ea42 0103 	orr.w	r1, r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	430a      	orrs	r2, r1
 800301a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003026:	f023 030f 	bic.w	r3, r3, #15
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6851      	ldr	r1, [r2, #4]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68d2      	ldr	r2, [r2, #12]
 8003038:	4311      	orrs	r1, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6992      	ldr	r2, [r2, #24]
 800303e:	430a      	orrs	r2, r1
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d161      	bne.n	8003118 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a38      	ldr	r2, [pc, #224]	; (8003138 <HAL_I2S_Init+0x274>)
 8003058:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a37      	ldr	r2, [pc, #220]	; (800313c <HAL_I2S_Init+0x278>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_I2S_Init+0x1a4>
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_I2S_Init+0x27c>)
 8003066:	e001      	b.n	800306c <HAL_I2S_Init+0x1a8>
 8003068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	4932      	ldr	r1, [pc, #200]	; (800313c <HAL_I2S_Init+0x278>)
 8003074:	428a      	cmp	r2, r1
 8003076:	d101      	bne.n	800307c <HAL_I2S_Init+0x1b8>
 8003078:	4a31      	ldr	r2, [pc, #196]	; (8003140 <HAL_I2S_Init+0x27c>)
 800307a:	e001      	b.n	8003080 <HAL_I2S_Init+0x1bc>
 800307c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003080:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2b      	ldr	r2, [pc, #172]	; (800313c <HAL_I2S_Init+0x278>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_I2S_Init+0x1d4>
 8003094:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <HAL_I2S_Init+0x27c>)
 8003096:	e001      	b.n	800309c <HAL_I2S_Init+0x1d8>
 8003098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309c:	2202      	movs	r2, #2
 800309e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <HAL_I2S_Init+0x278>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_I2S_Init+0x1ea>
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_I2S_Init+0x27c>)
 80030ac:	e001      	b.n	80030b2 <HAL_I2S_Init+0x1ee>
 80030ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030be:	d003      	beq.n	80030c8 <HAL_I2S_Init+0x204>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	e001      	b.n	80030d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	b299      	uxth	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030ea:	4303      	orrs	r3, r0
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	430b      	orrs	r3, r1
 80030f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003100:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a0d      	ldr	r2, [pc, #52]	; (800313c <HAL_I2S_Init+0x278>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_I2S_Init+0x24c>
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_I2S_Init+0x27c>)
 800310e:	e001      	b.n	8003114 <HAL_I2S_Init+0x250>
 8003110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003114:	897a      	ldrh	r2, [r7, #10]
 8003116:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	0800323b 	.word	0x0800323b
 8003134:	cccccccd 	.word	0xcccccccd
 8003138:	08003351 	.word	0x08003351
 800313c:	40003800 	.word	0x40003800
 8003140:	40003400 	.word	0x40003400

08003144 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	881a      	ldrh	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ffb8 	bl	8003144 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	b292      	uxth	r2, r2
 80031f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	1c9a      	adds	r2, r3, #2
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10e      	bne.n	8003232 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003222:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ff93 	bl	8003158 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b04      	cmp	r3, #4
 8003254:	d13a      	bne.n	80032cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d109      	bne.n	8003274 <I2S_IRQHandler+0x3a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d102      	bne.n	8003274 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ffb4 	bl	80031dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d126      	bne.n	80032cc <I2S_IRQHandler+0x92>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b20      	cmp	r3, #32
 800328a:	d11f      	bne.n	80032cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800329a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f043 0202 	orr.w	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ff50 	bl	800316c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d136      	bne.n	8003346 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d109      	bne.n	80032f6 <I2S_IRQHandler+0xbc>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d102      	bne.n	80032f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff45 	bl	8003180 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d122      	bne.n	8003346 <I2S_IRQHandler+0x10c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d11b      	bne.n	8003346 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800331c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff13 	bl	800316c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4aa2      	ldr	r2, [pc, #648]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800336a:	4ba2      	ldr	r3, [pc, #648]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800336c:	e001      	b.n	8003372 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800336e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a9b      	ldr	r2, [pc, #620]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003388:	4b9a      	ldr	r3, [pc, #616]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800338a:	e001      	b.n	8003390 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800338c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d004      	beq.n	80033a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 8099 	bne.w	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d107      	bne.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f925 	bl	800360c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f9c8 	bl	800376c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d13a      	bne.n	800345c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d035      	beq.n	800345c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033fa:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033fc:	e001      	b.n	8003402 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4979      	ldr	r1, [pc, #484]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800340a:	428b      	cmp	r3, r1
 800340c:	d101      	bne.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800340e:	4b79      	ldr	r3, [pc, #484]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003410:	e001      	b.n	8003416 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800341a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800342a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fe88 	bl	800316c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b08      	cmp	r3, #8
 8003464:	f040 80be 	bne.w	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80b8 	beq.w	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003482:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a59      	ldr	r2, [pc, #356]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800348e:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003490:	e001      	b.n	8003496 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4954      	ldr	r1, [pc, #336]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800349e:	428b      	cmp	r3, r1
 80034a0:	d101      	bne.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034a2:	4b54      	ldr	r3, [pc, #336]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034a4:	e001      	b.n	80034aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f043 0204 	orr.w	r2, r3, #4
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fe4a 	bl	800316c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034d8:	e084      	b.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d107      	bne.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8be 	bl	8003670 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f8fd 	bl	8003708 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d12f      	bne.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02a      	beq.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003530:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800353c:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800353e:	e001      	b.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4929      	ldr	r1, [pc, #164]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800354c:	428b      	cmp	r3, r1
 800354e:	d101      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003552:	e001      	b.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003558:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800355c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fdfa 	bl	800316c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b08      	cmp	r3, #8
 8003580:	d131      	bne.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d02c      	beq.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003598:	e001      	b.n	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800359a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4912      	ldr	r1, [pc, #72]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035a6:	428b      	cmp	r3, r1
 80035a8:	d101      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035ac:	e001      	b.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80035ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f043 0204 	orr.w	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff fdc5 	bl	800316c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035e2:	e000      	b.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035e4:	bf00      	nop
}
 80035e6:	bf00      	nop
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40003800 	.word	0x40003800
 80035f4:	40003400 	.word	0x40003400

080035f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c99      	adds	r1, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6251      	str	r1, [r2, #36]	; 0x24
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d113      	bne.n	8003666 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ffc9 	bl	80035f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c99      	adds	r1, r3, #2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6251      	str	r1, [r2, #36]	; 0x24
 8003682:	8819      	ldrh	r1, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <I2SEx_TxISR_I2SExt+0x90>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <I2SEx_TxISR_I2SExt+0x22>
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <I2SEx_TxISR_I2SExt+0x94>)
 8003690:	e001      	b.n	8003696 <I2SEx_TxISR_I2SExt+0x26>
 8003692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003696:	460a      	mov	r2, r1
 8003698:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d121      	bne.n	80036f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <I2SEx_TxISR_I2SExt+0x90>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <I2SEx_TxISR_I2SExt+0x50>
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <I2SEx_TxISR_I2SExt+0x94>)
 80036be:	e001      	b.n	80036c4 <I2SEx_TxISR_I2SExt+0x54>
 80036c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	490d      	ldr	r1, [pc, #52]	; (8003700 <I2SEx_TxISR_I2SExt+0x90>)
 80036cc:	428b      	cmp	r3, r1
 80036ce:	d101      	bne.n	80036d4 <I2SEx_TxISR_I2SExt+0x64>
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <I2SEx_TxISR_I2SExt+0x94>)
 80036d2:	e001      	b.n	80036d8 <I2SEx_TxISR_I2SExt+0x68>
 80036d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff81 	bl	80035f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40003800 	.word	0x40003800
 8003704:	40003400 	.word	0x40003400

08003708 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68d8      	ldr	r0, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	1c99      	adds	r1, r3, #2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003720:	b282      	uxth	r2, r0
 8003722:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800374a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff4a 	bl	80035f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <I2SEx_RxISR_I2SExt+0x90>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <I2SEx_RxISR_I2SExt+0x16>
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <I2SEx_RxISR_I2SExt+0x94>)
 8003780:	e001      	b.n	8003786 <I2SEx_RxISR_I2SExt+0x1a>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003786:	68d8      	ldr	r0, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	1c99      	adds	r1, r3, #2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003792:	b282      	uxth	r2, r0
 8003794:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d121      	bne.n	80037f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <I2SEx_RxISR_I2SExt+0x90>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <I2SEx_RxISR_I2SExt+0x50>
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <I2SEx_RxISR_I2SExt+0x94>)
 80037ba:	e001      	b.n	80037c0 <I2SEx_RxISR_I2SExt+0x54>
 80037bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	490d      	ldr	r1, [pc, #52]	; (80037fc <I2SEx_RxISR_I2SExt+0x90>)
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d101      	bne.n	80037d0 <I2SEx_RxISR_I2SExt+0x64>
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <I2SEx_RxISR_I2SExt+0x94>)
 80037ce:	e001      	b.n	80037d4 <I2SEx_RxISR_I2SExt+0x68>
 80037d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff03 	bl	80035f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40003800 	.word	0x40003800
 8003800:	40003400 	.word	0x40003400

08003804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e22d      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d075      	beq.n	800390e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003822:	4ba3      	ldr	r3, [pc, #652]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b04      	cmp	r3, #4
 800382c:	d00c      	beq.n	8003848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382e:	4ba0      	ldr	r3, [pc, #640]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003836:	2b08      	cmp	r3, #8
 8003838:	d112      	bne.n	8003860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383a:	4b9d      	ldr	r3, [pc, #628]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003846:	d10b      	bne.n	8003860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	4b99      	ldr	r3, [pc, #612]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d05b      	beq.n	800390c <HAL_RCC_OscConfig+0x108>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d157      	bne.n	800390c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e208      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003868:	d106      	bne.n	8003878 <HAL_RCC_OscConfig+0x74>
 800386a:	4b91      	ldr	r3, [pc, #580]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a90      	ldr	r2, [pc, #576]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e01d      	b.n	80038b4 <HAL_RCC_OscConfig+0xb0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0x98>
 8003882:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a8a      	ldr	r2, [pc, #552]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a87      	ldr	r2, [pc, #540]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e00b      	b.n	80038b4 <HAL_RCC_OscConfig+0xb0>
 800389c:	4b84      	ldr	r3, [pc, #528]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a83      	ldr	r2, [pc, #524]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a80      	ldr	r2, [pc, #512]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fc fec6 	bl	800064c <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fc fec2 	bl	800064c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e1cd      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b76      	ldr	r3, [pc, #472]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0xc0>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fc feb2 	bl	800064c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fc feae 	bl	800064c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1b9      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	4b6c      	ldr	r3, [pc, #432]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0xe8>
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d063      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800391a:	4b65      	ldr	r3, [pc, #404]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003926:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392e:	2b08      	cmp	r3, #8
 8003930:	d11c      	bne.n	800396c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d116      	bne.n	800396c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	4b5c      	ldr	r3, [pc, #368]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x152>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e18d      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4952      	ldr	r1, [pc, #328]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	e03a      	b.n	80039e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003974:	4b4f      	ldr	r3, [pc, #316]	; (8003ab4 <HAL_RCC_OscConfig+0x2b0>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fc fe67 	bl	800064c <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003982:	f7fc fe63 	bl	800064c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e16e      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4940      	ldr	r1, [pc, #256]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	e015      	b.n	80039e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <HAL_RCC_OscConfig+0x2b0>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fc fe46 	bl	800064c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c4:	f7fc fe42 	bl	800064c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e14d      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d030      	beq.n	8003a50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_RCC_OscConfig+0x2b4>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fc fe26 	bl	800064c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a04:	f7fc fe22 	bl	800064c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e12d      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x200>
 8003a22:	e015      	b.n	8003a50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <HAL_RCC_OscConfig+0x2b4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7fc fe0f 	bl	800064c <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fc fe0b 	bl	800064c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e116      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a0 	beq.w	8003b9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_OscConfig+0x2b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d121      	bne.n	8003ade <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <HAL_RCC_OscConfig+0x2b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <HAL_RCC_OscConfig+0x2b8>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa6:	f7fc fdd1 	bl	800064c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	e011      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2ce>
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	42470000 	.word	0x42470000
 8003ab8:	42470e80 	.word	0x42470e80
 8003abc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac0:	f7fc fdc4 	bl	800064c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0cf      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCC_OscConfig+0x478>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2f0>
 8003ae6:	4b66      	ldr	r3, [pc, #408]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	6713      	str	r3, [r2, #112]	; 0x70
 8003af2:	e01c      	b.n	8003b2e <HAL_RCC_OscConfig+0x32a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d10c      	bne.n	8003b16 <HAL_RCC_OscConfig+0x312>
 8003afc:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a5f      	ldr	r2, [pc, #380]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a5c      	ldr	r2, [pc, #368]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	e00b      	b.n	8003b2e <HAL_RCC_OscConfig+0x32a>
 8003b16:	4b5a      	ldr	r3, [pc, #360]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	4a59      	ldr	r2, [pc, #356]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	6713      	str	r3, [r2, #112]	; 0x70
 8003b22:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a56      	ldr	r2, [pc, #344]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b28:	f023 0304 	bic.w	r3, r3, #4
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fc fd89 	bl	800064c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fc fd85 	bl	800064c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e08e      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b54:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ee      	beq.n	8003b3e <HAL_RCC_OscConfig+0x33a>
 8003b60:	e014      	b.n	8003b8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fc fd73 	bl	800064c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fc fd6f 	bl	800064c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e078      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b80:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ee      	bne.n	8003b6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b92:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a3a      	ldr	r2, [pc, #232]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d064      	beq.n	8003c70 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d05c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d141      	bne.n	8003c3e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_RCC_OscConfig+0x480>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fc fd44 	bl	800064c <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fc fd40 	bl	800064c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e04b      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	491d      	ldr	r1, [pc, #116]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c10:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <HAL_RCC_OscConfig+0x480>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fc fd19 	bl	800064c <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fc fd15 	bl	800064c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e020      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x41a>
 8003c3c:	e018      	b.n	8003c70 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_RCC_OscConfig+0x480>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fc fd02 	bl	800064c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fc fcfe 	bl	800064c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e009      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCC_OscConfig+0x47c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x448>
 8003c6a:	e001      	b.n	8003c70 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	40023800 	.word	0x40023800
 8003c84:	42470060 	.word	0x42470060

08003c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0ca      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b67      	ldr	r3, [pc, #412]	; (8003e3c <HAL_RCC_ClockConfig+0x1b4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d90c      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b64      	ldr	r3, [pc, #400]	; (8003e3c <HAL_RCC_ClockConfig+0x1b4>)
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b62      	ldr	r3, [pc, #392]	; (8003e3c <HAL_RCC_ClockConfig+0x1b4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b6      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b58      	ldr	r3, [pc, #352]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a57      	ldr	r2, [pc, #348]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4b52      	ldr	r3, [pc, #328]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a51      	ldr	r2, [pc, #324]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b4f      	ldr	r3, [pc, #316]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	494c      	ldr	r1, [pc, #304]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d044      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d119      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07d      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e06d      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e065      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4933      	ldr	r1, [pc, #204]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d78:	f7fc fc68 	bl	800064c <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fc fc64 	bl	800064c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e04d      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_RCC_ClockConfig+0x1b4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d20c      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_ClockConfig+0x1b4>)
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <HAL_RCC_ClockConfig+0x1b4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e030      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4915      	ldr	r1, [pc, #84]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	490d      	ldr	r1, [pc, #52]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e0e:	f000 f81d 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 8003e12:	4601      	mov	r1, r0
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	5cd3      	ldrb	r3, [r2, r3]
 8003e22:	fa21 f303 	lsr.w	r3, r1, r3
 8003e26:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f7fc fbca 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023c00 	.word	0x40023c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	08009aa4 	.word	0x08009aa4
 8003e48:	20000028 	.word	0x20000028

08003e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d007      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x32>
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d008      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x38>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80b4 	bne.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4b5e      	ldr	r3, [pc, #376]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e7a:	60bb      	str	r3, [r7, #8]
       break;
 8003e7c:	e0b3      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e80:	60bb      	str	r3, [r7, #8]
      break;
 8003e82:	e0b0      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4b5a      	ldr	r3, [pc, #360]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8e:	4b58      	ldr	r3, [pc, #352]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d04a      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b55      	ldr	r3, [pc, #340]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	f04f 0400 	mov.w	r4, #0
 8003ea4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	ea03 0501 	and.w	r5, r3, r1
 8003eb0:	ea04 0602 	and.w	r6, r4, r2
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4632      	mov	r2, r6
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	f04f 0400 	mov.w	r4, #0
 8003ec0:	0154      	lsls	r4, r2, #5
 8003ec2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ec6:	014b      	lsls	r3, r1, #5
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4622      	mov	r2, r4
 8003ecc:	1b49      	subs	r1, r1, r5
 8003ece:	eb62 0206 	sbc.w	r2, r2, r6
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	f04f 0400 	mov.w	r4, #0
 8003eda:	0194      	lsls	r4, r2, #6
 8003edc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ee0:	018b      	lsls	r3, r1, #6
 8003ee2:	1a5b      	subs	r3, r3, r1
 8003ee4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ee8:	f04f 0100 	mov.w	r1, #0
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	00e2      	lsls	r2, r4, #3
 8003ef2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ef6:	00d9      	lsls	r1, r3, #3
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4614      	mov	r4, r2
 8003efc:	195b      	adds	r3, r3, r5
 8003efe:	eb44 0406 	adc.w	r4, r4, r6
 8003f02:	f04f 0100 	mov.w	r1, #0
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	0262      	lsls	r2, r4, #9
 8003f0c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f10:	0259      	lsls	r1, r3, #9
 8003f12:	460b      	mov	r3, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	4621      	mov	r1, r4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f04f 0400 	mov.w	r4, #0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4623      	mov	r3, r4
 8003f24:	f7fc f9ac 	bl	8000280 <__aeabi_uldivmod>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e049      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f30:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	f04f 0400 	mov.w	r4, #0
 8003f3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	ea03 0501 	and.w	r5, r3, r1
 8003f46:	ea04 0602 	and.w	r6, r4, r2
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4632      	mov	r2, r6
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	0154      	lsls	r4, r2, #5
 8003f58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f5c:	014b      	lsls	r3, r1, #5
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4622      	mov	r2, r4
 8003f62:	1b49      	subs	r1, r1, r5
 8003f64:	eb62 0206 	sbc.w	r2, r2, r6
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	f04f 0400 	mov.w	r4, #0
 8003f70:	0194      	lsls	r4, r2, #6
 8003f72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f76:	018b      	lsls	r3, r1, #6
 8003f78:	1a5b      	subs	r3, r3, r1
 8003f7a:	eb64 0402 	sbc.w	r4, r4, r2
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	00e2      	lsls	r2, r4, #3
 8003f88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f8c:	00d9      	lsls	r1, r3, #3
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4614      	mov	r4, r2
 8003f92:	195b      	adds	r3, r3, r5
 8003f94:	eb44 0406 	adc.w	r4, r4, r6
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	02a2      	lsls	r2, r4, #10
 8003fa2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fa6:	0299      	lsls	r1, r3, #10
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4614      	mov	r4, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	4621      	mov	r1, r4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f04f 0400 	mov.w	r4, #0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4623      	mov	r3, r4
 8003fba:	f7fc f961 	bl	8000280 <__aeabi_uldivmod>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	60bb      	str	r3, [r7, #8]
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fe2:	60bb      	str	r3, [r7, #8]
      break;
 8003fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	007a1200 	.word	0x007a1200

08003ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004000:	4b03      	ldr	r3, [pc, #12]	; (8004010 <HAL_RCC_GetHCLKFreq+0x14>)
 8004002:	681b      	ldr	r3, [r3, #0]
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000028 	.word	0x20000028

08004014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004018:	f7ff fff0 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 800401c:	4601      	mov	r1, r0
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	0a9b      	lsrs	r3, r3, #10
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4a03      	ldr	r2, [pc, #12]	; (8004038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40023800 	.word	0x40023800
 8004038:	08009ab4 	.word	0x08009ab4

0800403c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004040:	f7ff ffdc 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004044:	4601      	mov	r1, r0
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	0b5b      	lsrs	r3, r3, #13
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	4a03      	ldr	r2, [pc, #12]	; (8004060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	08009ab4 	.word	0x08009ab4

08004064 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004088:	2b00      	cmp	r3, #0
 800408a:	d035      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800408c:	4b62      	ldr	r3, [pc, #392]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004092:	f7fc fadb 	bl	800064c <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800409a:	f7fc fad7 	bl	800064c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0b0      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040ac:	4b5b      	ldr	r3, [pc, #364]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	019a      	lsls	r2, r3, #6
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	071b      	lsls	r3, r3, #28
 80040c4:	4955      	ldr	r1, [pc, #340]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040d2:	f7fc fabb 	bl	800064c <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040da:	f7fc fab7 	bl	800064c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e090      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ec:	4b4b      	ldr	r3, [pc, #300]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8083 	beq.w	800420c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	4b44      	ldr	r3, [pc, #272]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	4a43      	ldr	r2, [pc, #268]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004114:	6413      	str	r3, [r2, #64]	; 0x40
 8004116:	4b41      	ldr	r3, [pc, #260]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3e      	ldr	r2, [pc, #248]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800412e:	f7fc fa8d 	bl	800064c <HAL_GetTick>
 8004132:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fc fa89 	bl	800064c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e062      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004148:	4b35      	ldr	r3, [pc, #212]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004154:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02f      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	429a      	cmp	r2, r3
 8004170:	d028      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b01      	cmp	r3, #1
 8004198:	d114      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800419a:	f7fc fa57 	bl	800064c <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fc fa53 	bl	800064c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e02a      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ee      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d0:	d10d      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e6:	490d      	ldr	r1, [pc, #52]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]
 80041ec:	e005      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041f8:	6093      	str	r3, [r2, #8]
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004206:	4905      	ldr	r1, [pc, #20]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	42470068 	.word	0x42470068
 800421c:	40023800 	.word	0x40023800
 8004220:	40007000 	.word	0x40007000
 8004224:	42470e40 	.word	0x42470e40

08004228 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d13d      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800424e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004256:	2b01      	cmp	r3, #1
 8004258:	d12f      	bne.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800425a:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800425c:	617b      	str	r3, [r7, #20]
          break;
 800425e:	e02f      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004260:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426c:	d108      	bne.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e007      	b.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042aa:	0f1b      	lsrs	r3, r3, #28
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	617b      	str	r3, [r7, #20]
          break;
 80042b8:	e002      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
          break;
 80042be:	bf00      	nop
        }
      }
      break;
 80042c0:	bf00      	nop
    }
  }
  return frequency;
 80042c2:	697b      	ldr	r3, [r7, #20]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40023800 	.word	0x40023800
 80042d4:	00bb8000 	.word	0x00bb8000
 80042d8:	007a1200 	.word	0x007a1200
 80042dc:	00f42400 	.word	0x00f42400

080042e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e056      	b.n	80043a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f004 fab7 	bl	8008880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004328:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	ea42 0103 	orr.w	r1, r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	0c1b      	lsrs	r3, r3, #16
 8004370:	f003 0104 	and.w	r1, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800438e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01d      	b.n	80043f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f004 fa9e 	bl	8008910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 f9fa 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e01d      	b.n	800444c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f815 	bl	8004454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 f9cf 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fc9a 	bl	8004db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <HAL_TIM_PWM_Start+0x74>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_PWM_Start+0x2c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <HAL_TIM_PWM_Start+0x78>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d101      	bne.n	8004498 <HAL_TIM_PWM_Start+0x30>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_TIM_PWM_Start+0x32>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b06      	cmp	r3, #6
 80044be:	d007      	beq.n	80044d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40010400 	.word	0x40010400

080044e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0b4      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x184>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	f200 809f 	bhi.w	8004654 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	08004551 	.word	0x08004551
 8004520:	08004655 	.word	0x08004655
 8004524:	08004655 	.word	0x08004655
 8004528:	08004655 	.word	0x08004655
 800452c:	08004591 	.word	0x08004591
 8004530:	08004655 	.word	0x08004655
 8004534:	08004655 	.word	0x08004655
 8004538:	08004655 	.word	0x08004655
 800453c:	080045d3 	.word	0x080045d3
 8004540:	08004655 	.word	0x08004655
 8004544:	08004655 	.word	0x08004655
 8004548:	08004655 	.word	0x08004655
 800454c:	08004613 	.word	0x08004613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f9e2 	bl	8004920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0208 	orr.w	r2, r2, #8
 800456a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0204 	bic.w	r2, r2, #4
 800457a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6999      	ldr	r1, [r3, #24]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	619a      	str	r2, [r3, #24]
      break;
 800458e:	e062      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fa32 	bl	8004a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6999      	ldr	r1, [r3, #24]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]
      break;
 80045d0:	e041      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fa87 	bl	8004aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0208 	orr.w	r2, r2, #8
 80045ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0204 	bic.w	r2, r2, #4
 80045fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69d9      	ldr	r1, [r3, #28]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	61da      	str	r2, [r3, #28]
      break;
 8004610:	e021      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fadb 	bl	8004bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69d9      	ldr	r1, [r3, #28]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	021a      	lsls	r2, r3, #8
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	61da      	str	r2, [r3, #28]
      break;
 8004652:	e000      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004654:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x18>
 8004684:	2302      	movs	r3, #2
 8004686:	e0a6      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d067      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0x120>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d80b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x6c>
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d073      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x140>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d802      	bhi.n	80046d2 <HAL_TIM_ConfigClockSource+0x62>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d06f      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046d0:	e078      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d06c      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x140>
 80046d6:	2b30      	cmp	r3, #48	; 0x30
 80046d8:	d06a      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046da:	e073      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046dc:	2b70      	cmp	r3, #112	; 0x70
 80046de:	d00d      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0x8c>
 80046e0:	2b70      	cmp	r3, #112	; 0x70
 80046e2:	d804      	bhi.n	80046ee <HAL_TIM_ConfigClockSource+0x7e>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d033      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xe0>
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d041      	beq.n	8004770 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80046ec:	e06a      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d066      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x152>
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f8:	d017      	beq.n	800472a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80046fa:	e063      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f000 fb32 	bl	8004d74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800471e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	609a      	str	r2, [r3, #8]
      break;
 8004728:	e04c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f000 fb1b 	bl	8004d74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474c:	609a      	str	r2, [r3, #8]
      break;
 800474e:	e039      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	461a      	mov	r2, r3
 800475e:	f000 fa8f 	bl	8004c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2150      	movs	r1, #80	; 0x50
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fae8 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 800476e:	e029      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	461a      	mov	r2, r3
 800477e:	f000 faae 	bl	8004cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2160      	movs	r1, #96	; 0x60
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fad8 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 800478e:	e019      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	461a      	mov	r2, r3
 800479e:	f000 fa6f 	bl	8004c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2140      	movs	r1, #64	; 0x40
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fac8 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 80047ae:	e009      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 fabf 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 80047c0:	e000      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a40      	ldr	r2, [pc, #256]	; (80048f4 <TIM_Base_SetConfig+0x114>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d00f      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3d      	ldr	r2, [pc, #244]	; (80048f8 <TIM_Base_SetConfig+0x118>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3c      	ldr	r2, [pc, #240]	; (80048fc <TIM_Base_SetConfig+0x11c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3b      	ldr	r2, [pc, #236]	; (8004900 <TIM_Base_SetConfig+0x120>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3a      	ldr	r2, [pc, #232]	; (8004904 <TIM_Base_SetConfig+0x124>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <TIM_Base_SetConfig+0x114>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d02b      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d027      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <TIM_Base_SetConfig+0x118>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d023      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2b      	ldr	r2, [pc, #172]	; (80048fc <TIM_Base_SetConfig+0x11c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01f      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2a      	ldr	r2, [pc, #168]	; (8004900 <TIM_Base_SetConfig+0x120>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01b      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a29      	ldr	r2, [pc, #164]	; (8004904 <TIM_Base_SetConfig+0x124>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d017      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a28      	ldr	r2, [pc, #160]	; (8004908 <TIM_Base_SetConfig+0x128>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <TIM_Base_SetConfig+0x12c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00f      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <TIM_Base_SetConfig+0x130>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00b      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a25      	ldr	r2, [pc, #148]	; (8004914 <TIM_Base_SetConfig+0x134>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a24      	ldr	r2, [pc, #144]	; (8004918 <TIM_Base_SetConfig+0x138>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a23      	ldr	r2, [pc, #140]	; (800491c <TIM_Base_SetConfig+0x13c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <TIM_Base_SetConfig+0x114>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0xf8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <TIM_Base_SetConfig+0x124>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d103      	bne.n	80048e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	615a      	str	r2, [r3, #20]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40010400 	.word	0x40010400
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800
 8004914:	40001800 	.word	0x40001800
 8004918:	40001c00 	.word	0x40001c00
 800491c:	40002000 	.word	0x40002000

08004920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f023 0201 	bic.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 0302 	bic.w	r3, r3, #2
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <TIM_OC1_SetConfig+0xd8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_OC1_SetConfig+0x64>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <TIM_OC1_SetConfig+0xdc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d10c      	bne.n	800499e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f023 0308 	bic.w	r3, r3, #8
 800498a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 0304 	bic.w	r3, r3, #4
 800499c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <TIM_OC1_SetConfig+0xd8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_OC1_SetConfig+0x8e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a14      	ldr	r2, [pc, #80]	; (80049fc <TIM_OC1_SetConfig+0xdc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d111      	bne.n	80049d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40010400 	.word	0x40010400

08004a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f023 0210 	bic.w	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f023 0320 	bic.w	r3, r3, #32
 8004a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <TIM_OC2_SetConfig+0xe4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_OC2_SetConfig+0x68>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <TIM_OC2_SetConfig+0xe8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10d      	bne.n	8004a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <TIM_OC2_SetConfig+0xe4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC2_SetConfig+0x94>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <TIM_OC2_SetConfig+0xe8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d113      	bne.n	8004abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40010400 	.word	0x40010400

08004aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <TIM_OC3_SetConfig+0xe0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_OC3_SetConfig+0x66>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <TIM_OC3_SetConfig+0xe4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10d      	bne.n	8004b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a16      	ldr	r2, [pc, #88]	; (8004bcc <TIM_OC3_SetConfig+0xe0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d003      	beq.n	8004b7e <TIM_OC3_SetConfig+0x92>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <TIM_OC3_SetConfig+0xe4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d113      	bne.n	8004ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	031b      	lsls	r3, r3, #12
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <TIM_OC4_SetConfig+0xa4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC4_SetConfig+0x68>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <TIM_OC4_SetConfig+0xa8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d109      	bne.n	8004c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40010400 	.word	0x40010400

08004c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 030a 	bic.w	r3, r3, #10
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0210 	bic.w	r2, r3, #16
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	031b      	lsls	r3, r3, #12
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f043 0307 	orr.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e032      	b.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e4e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e03f      	b.n	8004f1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f003 fd8a 	bl	80089c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f90b 	bl	80050e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b088      	sub	sp, #32
 8004f26:	af02      	add	r7, sp, #8
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	f040 8083 	bne.w	800504a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_UART_Transmit+0x2e>
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e07b      	b.n	800504c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Transmit+0x40>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e074      	b.n	800504c <HAL_UART_Transmit+0x12a>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2221      	movs	r2, #33	; 0x21
 8004f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f78:	f7fb fb68 	bl	800064c <HAL_GetTick>
 8004f7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f8a:	e042      	b.n	8005012 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d122      	bne.n	8004fea <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2180      	movs	r1, #128	; 0x80
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f850 	bl	8005054 <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e046      	b.n	800504c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3302      	adds	r3, #2
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	e017      	b.n	8005012 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	e013      	b.n	8005012 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f82d 	bl	8005054 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e023      	b.n	800504c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	60ba      	str	r2, [r7, #8]
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1b7      	bne.n	8004f8c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2200      	movs	r2, #0
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f814 	bl	8005054 <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e00a      	b.n	800504c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005064:	e02c      	b.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d028      	beq.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x30>
 8005074:	f7fb faea 	bl	800064c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	d21d      	bcs.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005092:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e00f      	b.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d0c3      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005128:	f023 030c 	bic.w	r3, r3, #12
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	68f9      	ldr	r1, [r7, #12]
 8005132:	430b      	orrs	r3, r1
 8005134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005154:	f040 80e4 	bne.w	8005320 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4aab      	ldr	r2, [pc, #684]	; (800540c <UART_SetConfig+0x324>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <UART_SetConfig+0x84>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4aaa      	ldr	r2, [pc, #680]	; (8005410 <UART_SetConfig+0x328>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d16c      	bne.n	8005246 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800516c:	f7fe ff66 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8005170:	4602      	mov	r2, r0
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009a      	lsls	r2, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	4aa3      	ldr	r2, [pc, #652]	; (8005414 <UART_SetConfig+0x32c>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	011c      	lsls	r4, r3, #4
 8005190:	f7fe ff54 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8005194:	4602      	mov	r2, r0
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009a      	lsls	r2, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80051aa:	f7fe ff47 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 80051ae:	4602      	mov	r2, r0
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	4a93      	ldr	r2, [pc, #588]	; (8005414 <UART_SetConfig+0x32c>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2264      	movs	r2, #100	; 0x64
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	1aeb      	subs	r3, r5, r3
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	3332      	adds	r3, #50	; 0x32
 80051d8:	4a8e      	ldr	r2, [pc, #568]	; (8005414 <UART_SetConfig+0x32c>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e6:	441c      	add	r4, r3
 80051e8:	f7fe ff28 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009a      	lsls	r2, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8005202:	f7fe ff1b 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8005206:	4602      	mov	r2, r0
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	4a7d      	ldr	r2, [pc, #500]	; (8005414 <UART_SetConfig+0x32c>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2264      	movs	r2, #100	; 0x64
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	1aeb      	subs	r3, r5, r3
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	3332      	adds	r3, #50	; 0x32
 8005230:	4a78      	ldr	r2, [pc, #480]	; (8005414 <UART_SetConfig+0x32c>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 0207 	and.w	r2, r3, #7
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4422      	add	r2, r4
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	e154      	b.n	80054f0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005246:	f7fe fee5 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 800524a:	4602      	mov	r2, r0
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	4a6c      	ldr	r2, [pc, #432]	; (8005414 <UART_SetConfig+0x32c>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	011c      	lsls	r4, r3, #4
 800526a:	f7fe fed3 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 800526e:	4602      	mov	r2, r0
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009a      	lsls	r2, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fbb2 f5f3 	udiv	r5, r2, r3
 8005284:	f7fe fec6 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8005288:	4602      	mov	r2, r0
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009a      	lsls	r2, r3, #2
 8005292:	441a      	add	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	4a5d      	ldr	r2, [pc, #372]	; (8005414 <UART_SetConfig+0x32c>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	2264      	movs	r2, #100	; 0x64
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	1aeb      	subs	r3, r5, r3
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	3332      	adds	r3, #50	; 0x32
 80052b2:	4a58      	ldr	r2, [pc, #352]	; (8005414 <UART_SetConfig+0x32c>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052c0:	441c      	add	r4, r3
 80052c2:	f7fe fea7 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009a      	lsls	r2, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80052dc:	f7fe fe9a 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009a      	lsls	r2, r3, #2
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	4a47      	ldr	r2, [pc, #284]	; (8005414 <UART_SetConfig+0x32c>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2264      	movs	r2, #100	; 0x64
 8005300:	fb02 f303 	mul.w	r3, r2, r3
 8005304:	1aeb      	subs	r3, r5, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a42      	ldr	r2, [pc, #264]	; (8005414 <UART_SetConfig+0x32c>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4422      	add	r2, r4
 800531c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800531e:	e0e7      	b.n	80054f0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a39      	ldr	r2, [pc, #228]	; (800540c <UART_SetConfig+0x324>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <UART_SetConfig+0x24c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a38      	ldr	r2, [pc, #224]	; (8005410 <UART_SetConfig+0x328>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d171      	bne.n	8005418 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005334:	f7fe fe82 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8005338:	4602      	mov	r2, r0
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	4a31      	ldr	r2, [pc, #196]	; (8005414 <UART_SetConfig+0x32c>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	011c      	lsls	r4, r3, #4
 8005358:	f7fe fe70 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 800535c:	4602      	mov	r2, r0
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	441a      	add	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005372:	f7fe fe63 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8005376:	4602      	mov	r2, r0
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009a      	lsls	r2, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	4a21      	ldr	r2, [pc, #132]	; (8005414 <UART_SetConfig+0x32c>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2264      	movs	r2, #100	; 0x64
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	1aeb      	subs	r3, r5, r3
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	3332      	adds	r3, #50	; 0x32
 80053a0:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <UART_SetConfig+0x32c>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ac:	441c      	add	r4, r3
 80053ae:	f7fe fe45 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 80053b2:	4602      	mov	r2, r0
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009a      	lsls	r2, r3, #2
 80053bc:	441a      	add	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80053c8:	f7fe fe38 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009a      	lsls	r2, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <UART_SetConfig+0x32c>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	2264      	movs	r2, #100	; 0x64
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	1aeb      	subs	r3, r5, r3
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	3332      	adds	r3, #50	; 0x32
 80053f6:	4a07      	ldr	r2, [pc, #28]	; (8005414 <UART_SetConfig+0x32c>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4422      	add	r2, r4
 8005408:	609a      	str	r2, [r3, #8]
 800540a:	e071      	b.n	80054f0 <UART_SetConfig+0x408>
 800540c:	40011000 	.word	0x40011000
 8005410:	40011400 	.word	0x40011400
 8005414:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005418:	f7fe fdfc 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 800541c:	4602      	mov	r2, r0
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	4a31      	ldr	r2, [pc, #196]	; (80054f8 <UART_SetConfig+0x410>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	011c      	lsls	r4, r3, #4
 800543c:	f7fe fdea 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8005440:	4602      	mov	r2, r0
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009a      	lsls	r2, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	fbb2 f5f3 	udiv	r5, r2, r3
 8005456:	f7fe fddd 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 800545a:	4602      	mov	r2, r0
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <UART_SetConfig+0x410>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2264      	movs	r2, #100	; 0x64
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	1aeb      	subs	r3, r5, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	; 0x32
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <UART_SetConfig+0x410>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005490:	441c      	add	r4, r3
 8005492:	f7fe fdbf 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8005496:	4602      	mov	r2, r0
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009a      	lsls	r2, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80054ac:	f7fe fdb2 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009a      	lsls	r2, r3, #2
 80054ba:	441a      	add	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	4a0c      	ldr	r2, [pc, #48]	; (80054f8 <UART_SetConfig+0x410>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2264      	movs	r2, #100	; 0x64
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	1aeb      	subs	r3, r5, r3
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	3332      	adds	r3, #50	; 0x32
 80054da:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <UART_SetConfig+0x410>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4422      	add	r2, r4
 80054ec:	609a      	str	r2, [r3, #8]
}
 80054ee:	e7ff      	b.n	80054f0 <UART_SetConfig+0x408>
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bdb0      	pop	{r4, r5, r7, pc}
 80054f8:	51eb851f 	.word	0x51eb851f

080054fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054fc:	b084      	sub	sp, #16
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	f107 001c 	add.w	r0, r7, #28
 800550a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	2b01      	cmp	r3, #1
 8005512:	d122      	bne.n	800555a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800553c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f94a 	bl	80057e8 <USB_CoreReset>
 8005554:	4603      	mov	r3, r0
 8005556:	73fb      	strb	r3, [r7, #15]
 8005558:	e01a      	b.n	8005590 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f93e 	bl	80057e8 <USB_CoreReset>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
 8005582:	e005      	b.n	8005590 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10b      	bne.n	80055ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f043 0206 	orr.w	r2, r3, #6
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ba:	b004      	add	sp, #16
 80055bc:	4770      	bx	lr

080055be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 0201 	bic.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d106      	bne.n	800562e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]
 800562c:	e00b      	b.n	8005646 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e001      	b.n	8005646 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e003      	b.n	800564e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005646:	2032      	movs	r0, #50	; 0x32
 8005648:	f7fb f80c 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	019b      	lsls	r3, r3, #6
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <USB_FlushTxFifo+0x48>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e006      	b.n	8005692 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b20      	cmp	r3, #32
 800568e:	d0f0      	beq.n	8005672 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	00030d40 	.word	0x00030d40

080056a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2210      	movs	r2, #16
 80056b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3301      	adds	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <USB_FlushRxFifo+0x40>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d901      	bls.n	80056c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e006      	b.n	80056d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d0f0      	beq.n	80056b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	00030d40 	.word	0x00030d40

080056e8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	4611      	mov	r1, r2
 80056f4:	461a      	mov	r2, r3
 80056f6:	460b      	mov	r3, r1
 80056f8:	71fb      	strb	r3, [r7, #7]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11a      	bne.n	8005744 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800570e:	88bb      	ldrh	r3, [r7, #4]
 8005710:	3303      	adds	r3, #3
 8005712:	089b      	lsrs	r3, r3, #2
 8005714:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	e00f      	b.n	800573c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	031a      	lsls	r2, r3, #12
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	4413      	add	r3, r2
 8005724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005728:	461a      	mov	r2, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3304      	adds	r3, #4
 8005734:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3301      	adds	r3, #1
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	d3eb      	bcc.n	800571c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3724      	adds	r7, #36	; 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005752:	b480      	push	{r7}
 8005754:	b089      	sub	sp, #36	; 0x24
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	4613      	mov	r3, r2
 800575e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	3303      	adds	r3, #3
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e00b      	b.n	800578e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	601a      	str	r2, [r3, #0]
    pDest++;
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3304      	adds	r3, #4
 8005786:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	3301      	adds	r3, #1
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	429a      	cmp	r2, r3
 8005794:	d3ef      	bcc.n	8005776 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005796:	69fb      	ldr	r3, [r7, #28]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3724      	adds	r7, #36	; 0x24
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057bc:	68fb      	ldr	r3, [r7, #12]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <USB_CoreReset+0x64>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e01b      	b.n	800583e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	daf2      	bge.n	80057f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <USB_CoreReset+0x64>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d0f0      	beq.n	800581e <USB_CoreReset+0x36>

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	00030d40 	.word	0x00030d40

08005850 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005850:	b084      	sub	sp, #16
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	f107 001c 	add.w	r0, r7, #28
 800585e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d10a      	bne.n	80058be <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	e014      	b.n	80058e8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058cc:	f023 0304 	bic.w	r3, r3, #4
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e009      	b.n	80058e8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058e2:	f023 0304 	bic.w	r3, r3, #4
 80058e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80058e8:	2110      	movs	r1, #16
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff feb4 	bl	8005658 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fed7 	bl	80056a4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e015      	b.n	8005928 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4413      	add	r3, r2
 8005904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005908:	461a      	mov	r2, r3
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	d3e5      	bcc.n	80058fc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005930:	2101      	movs	r1, #1
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8ac 	bl	8005a90 <USB_DriveVbus>

  HAL_Delay(200U);
 8005938:	20c8      	movs	r0, #200	; 0xc8
 800593a:	f7fa fe93 	bl	8000664 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f04f 32ff 	mov.w	r2, #4294967295
 800594a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <USB_HostInit+0x164>)
 8005964:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <USB_HostInit+0x168>)
 800596a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800596e:	e009      	b.n	8005984 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a10      	ldr	r2, [pc, #64]	; (80059bc <USB_HostInit+0x16c>)
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a10      	ldr	r2, [pc, #64]	; (80059c0 <USB_HostInit+0x170>)
 8005980:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d105      	bne.n	8005996 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f043 0210 	orr.w	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <USB_HostInit+0x174>)
 800599c:	4313      	orrs	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ae:	b004      	add	sp, #16
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	01000200 	.word	0x01000200
 80059b8:	00e00300 	.word	0x00e00300
 80059bc:	00600080 	.word	0x00600080
 80059c0:	004000e0 	.word	0x004000e0
 80059c4:	a3200008 	.word	0xa3200008

080059c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a10:	461a      	mov	r2, r3
 8005a12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a16:	6053      	str	r3, [r2, #4]
 8005a18:	e009      	b.n	8005a2e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d106      	bne.n	8005a2e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a26:	461a      	mov	r2, r3
 8005a28:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a2c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a6c:	2064      	movs	r0, #100	; 0x64
 8005a6e:	f7fa fdf9 	bl	8000664 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a80:	200a      	movs	r0, #10
 8005a82:	f7fa fdef 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ab4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <USB_DriveVbus+0x44>
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d106      	bne.n	8005ad4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ad2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	d109      	bne.n	8005af4 <USB_DriveVbus+0x64>
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	0c5b      	lsrs	r3, r3, #17
 8005b20:	f003 0303 	and.w	r3, r3, #3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	b29b      	uxth	r3, r3
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	70fb      	strb	r3, [r7, #3]
 8005b66:	460b      	mov	r3, r1
 8005b68:	70bb      	strb	r3, [r7, #2]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	461a      	mov	r2, r3
 8005b84:	f04f 33ff 	mov.w	r3, #4294967295
 8005b88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d87e      	bhi.n	8005c90 <USB_HC_Init+0x13c>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <USB_HC_Init+0x44>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005c53 	.word	0x08005c53
 8005ba0:	08005ba9 	.word	0x08005ba9
 8005ba4:	08005c15 	.word	0x08005c15
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f240 439d 	movw	r3, #1181	; 0x49d
 8005bba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005bbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da10      	bge.n	8005be6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005be4:	e057      	b.n	8005c96 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d051      	beq.n	8005c96 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c10:	60d3      	str	r3, [r2, #12]
      break;
 8005c12:	e040      	b.n	8005c96 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	461a      	mov	r2, r3
 8005c22:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	da34      	bge.n	8005c9a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c50:	e023      	b.n	8005c9a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f240 2325 	movw	r3, #549	; 0x225
 8005c64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da17      	bge.n	8005c9e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c88:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005c8c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c8e:	e006      	b.n	8005c9e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	75fb      	strb	r3, [r7, #23]
      break;
 8005c94:	e004      	b.n	8005ca0 <USB_HC_Init+0x14c>
      break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <USB_HC_Init+0x14c>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <USB_HC_Init+0x14c>
      break;
 8005c9e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca6:	699a      	ldr	r2, [r3, #24]
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	2101      	movs	r1, #1
 8005cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005cca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da03      	bge.n	8005cda <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	e001      	b.n	8005cde <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005cde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d103      	bne.n	8005cee <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	e001      	b.n	8005cf2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cf2:	787b      	ldrb	r3, [r7, #1]
 8005cf4:	059b      	lsls	r3, r3, #22
 8005cf6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cfa:	78bb      	ldrb	r3, [r7, #2]
 8005cfc:	02db      	lsls	r3, r3, #11
 8005cfe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d02:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d08:	049b      	lsls	r3, r3, #18
 8005d0a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d0e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d16:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	0159      	lsls	r1, r3, #5
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	440b      	add	r3, r1
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d28:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d2e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d10f      	bne.n	8005d58 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d56:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop

08005d68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08c      	sub	sp, #48	; 0x30
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d028      	beq.n	8005de4 <USB_HC_StartXfer+0x7c>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	791b      	ldrb	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d124      	bne.n	8005de4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <USB_HC_StartXfer+0x50>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	795b      	ldrb	r3, [r3, #5]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d107      	bne.n	8005db8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	4619      	mov	r1, r3
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fa2e 	bl	8006210 <USB_DoPing>
      return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e112      	b.n	8005fde <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d112      	bne.n	8005de4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005ddc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d018      	beq.n	8005e1e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	8912      	ldrh	r2, [r2, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	3b01      	subs	r3, #1
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	8912      	ldrh	r2, [r2, #8]
 8005dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e00:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e04:	8b7b      	ldrh	r3, [r7, #26]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d90b      	bls.n	8005e22 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005e0a:	8b7b      	ldrh	r3, [r7, #26]
 8005e0c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	8912      	ldrh	r2, [r2, #8]
 8005e14:	fb02 f203 	mul.w	r2, r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	611a      	str	r2, [r3, #16]
 8005e1c:	e001      	b.n	8005e22 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	78db      	ldrb	r3, [r3, #3]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d006      	beq.n	8005e38 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	8912      	ldrh	r2, [r2, #8]
 8005e30:	fb02 f203 	mul.w	r2, r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e42:	04d9      	lsls	r1, r3, #19
 8005e44:	4b68      	ldr	r3, [pc, #416]	; (8005fe8 <USB_HC_StartXfer+0x280>)
 8005e46:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e48:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	7a9b      	ldrb	r3, [r3, #10]
 8005e4e:	075b      	lsls	r3, r3, #29
 8005e50:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e54:	69f9      	ldr	r1, [r7, #28]
 8005e56:	0148      	lsls	r0, r1, #5
 8005e58:	6a39      	ldr	r1, [r7, #32]
 8005e5a:	4401      	add	r1, r0
 8005e5c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e60:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e62:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68d9      	ldr	r1, [r3, #12]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005eb4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	7e7b      	ldrb	r3, [r7, #25]
 8005ec6:	075b      	lsls	r3, r3, #29
 8005ec8:	69f9      	ldr	r1, [r7, #28]
 8005eca:	0148      	lsls	r0, r1, #5
 8005ecc:	6a39      	ldr	r1, [r7, #32]
 8005ece:	4401      	add	r1, r0
 8005ed0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a41      	ldr	r2, [pc, #260]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005ee8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005eea:	4b40      	ldr	r3, [pc, #256]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef2:	4a3e      	ldr	r2, [pc, #248]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005ef4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d006      	beq.n	8005f0c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005efe:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	4a39      	ldr	r2, [pc, #228]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	e005      	b.n	8005f18 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f0c:	4b37      	ldr	r3, [pc, #220]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f14:	4a35      	ldr	r2, [pc, #212]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005f16:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f18:	4b34      	ldr	r3, [pc, #208]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f20:	4a32      	ldr	r2, [pc, #200]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005f22:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f30:	461a      	mov	r2, r3
 8005f32:	4b2e      	ldr	r3, [pc, #184]	; (8005fec <USB_HC_StartXfer+0x284>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d14e      	bne.n	8005fdc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	78db      	ldrb	r3, [r3, #3]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d14a      	bne.n	8005fdc <USB_HC_StartXfer+0x274>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d046      	beq.n	8005fdc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	79db      	ldrb	r3, [r3, #7]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d830      	bhi.n	8005fb8 <USB_HC_StartXfer+0x250>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <USB_HC_StartXfer+0x1f4>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f91 	.word	0x08005f91
 8005f64:	08005f6d 	.word	0x08005f6d
 8005f68:	08005f91 	.word	0x08005f91
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	3303      	adds	r3, #3
 8005f72:	089b      	lsrs	r3, r3, #2
 8005f74:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f76:	8afa      	ldrh	r2, [r7, #22]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d91c      	bls.n	8005fbc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f043 0220 	orr.w	r2, r3, #32
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	619a      	str	r2, [r3, #24]
          }
          break;
 8005f8e:	e015      	b.n	8005fbc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	3303      	adds	r3, #3
 8005f96:	089b      	lsrs	r3, r3, #2
 8005f98:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f9a:	8afa      	ldrh	r2, [r7, #22]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d90a      	bls.n	8005fc0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	619a      	str	r2, [r3, #24]
          }
          break;
 8005fb6:	e003      	b.n	8005fc0 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005fb8:	bf00      	nop
 8005fba:	e002      	b.n	8005fc2 <USB_HC_StartXfer+0x25a>
          break;
 8005fbc:	bf00      	nop
 8005fbe:	e000      	b.n	8005fc2 <USB_HC_StartXfer+0x25a>
          break;
 8005fc0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785a      	ldrb	r2, [r3, #1]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	b298      	uxth	r0, r3
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff fb86 	bl	80056e8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3728      	adds	r7, #40	; 0x28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	1ff80000 	.word	0x1ff80000
 8005fec:	200000ac 	.word	0x200000ac

08005ff0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	b29b      	uxth	r3, r3
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	460b      	mov	r3, r1
 800601c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	0c9b      	lsrs	r3, r3, #18
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <USB_HC_Halt+0x3a>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d16c      	bne.n	8006126 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800606a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d143      	bne.n	8006100 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	4413      	add	r3, r2
 8006080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	440a      	add	r2, r1
 800608e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006096:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060d6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	3301      	adds	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060e4:	d81d      	bhi.n	8006122 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fc:	d0ec      	beq.n	80060d8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060fe:	e080      	b.n	8006202 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	440a      	add	r2, r1
 8006116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800611a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800611e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006120:	e06f      	b.n	8006202 <USB_HC_Halt+0x1f0>
          break;
 8006122:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006124:	e06d      	b.n	8006202 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	440a      	add	r2, r1
 800613c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006144:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d143      	bne.n	80061de <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	440a      	add	r2, r1
 800616c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006174:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	440a      	add	r2, r1
 800618c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006194:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061b4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	3301      	adds	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061c2:	d81d      	bhi.n	8006200 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061da:	d0ec      	beq.n	80061b6 <USB_HC_Halt+0x1a4>
 80061dc:	e011      	b.n	8006202 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	e000      	b.n	8006202 <USB_HC_Halt+0x1f0>
          break;
 8006200:	bf00      	nop
    }
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006224:	2301      	movs	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	04da      	lsls	r2, r3, #19
 800622c:	4b15      	ldr	r3, [pc, #84]	; (8006284 <USB_DoPing+0x74>)
 800622e:	4013      	ands	r3, r2
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	440a      	add	r2, r1
 8006238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006240:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006258:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006260:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	1ff80000 	.word	0x1ff80000

08006288 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff f9a1 	bl	80055e0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800629e:	2110      	movs	r1, #16
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff f9d9 	bl	8005658 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff f9fc 	bl	80056a4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	e01f      	b.n	80062f2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	461a      	mov	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	3301      	adds	r3, #1
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d9dc      	bls.n	80062b2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	e034      	b.n	8006368 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006314:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800631c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006324:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006332:	461a      	mov	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	3301      	adds	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006344:	d80c      	bhi.n	8006360 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800635c:	d0ec      	beq.n	8006338 <USB_StopHost+0xb0>
 800635e:	e000      	b.n	8006362 <USB_StopHost+0xda>
        break;
 8006360:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	3301      	adds	r3, #1
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b0f      	cmp	r3, #15
 800636c:	d9c7      	bls.n	80062fe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 33ff 	mov.w	r3, #4294967295
 800637a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f04f 32ff 	mov.w	r2, #4294967295
 8006382:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff f91a 	bl	80055be <USB_EnableGlobalInt>

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b089      	sub	sp, #36	; 0x24
 8006398:	af04      	add	r7, sp, #16
 800639a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800639c:	2302      	movs	r3, #2
 800639e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80063a0:	2301      	movs	r3, #1
 80063a2:	2202      	movs	r2, #2
 80063a4:	2102      	movs	r1, #2
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc3a 	bl	8006c20 <USBH_FindInterface>
 80063ac:	4603      	mov	r3, r0
 80063ae:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	2bff      	cmp	r3, #255	; 0xff
 80063b4:	f000 812a 	beq.w	800660c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fc13 	bl	8006be8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80063c8:	2050      	movs	r0, #80	; 0x50
 80063ca:	f002 ff3b 	bl	8009244 <malloc>
 80063ce:	4603      	mov	r3, r0
 80063d0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	211a      	movs	r1, #26
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da15      	bge.n	8006420 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	211a      	movs	r1, #26
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	4413      	add	r3, r2
 8006400:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	211a      	movs	r1, #26
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800641a:	881a      	ldrh	r2, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fd21 	bl	8007e6e <USBH_AllocPipe>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	7819      	ldrb	r1, [r3, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	7858      	ldrb	r0, [r3, #1]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	8952      	ldrh	r2, [r2, #10]
 800644c:	9202      	str	r2, [sp, #8]
 800644e:	2203      	movs	r2, #3
 8006450:	9201      	str	r2, [sp, #4]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	4623      	mov	r3, r4
 8006456:	4602      	mov	r2, r0
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 fcd9 	bl	8007e10 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f002 fe12 	bl	8009090 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800646c:	2300      	movs	r3, #0
 800646e:	2200      	movs	r2, #0
 8006470:	210a      	movs	r1, #10
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fbd4 	bl	8006c20 <USBH_FindInterface>
 8006478:	4603      	mov	r3, r0
 800647a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2bff      	cmp	r3, #255	; 0xff
 8006480:	f000 80c4 	beq.w	800660c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	211a      	movs	r1, #26
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	4413      	add	r3, r2
 8006490:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b25b      	sxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	da16      	bge.n	80064ca <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	211a      	movs	r1, #26
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064ac:	781a      	ldrb	r2, [r3, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	211a      	movs	r1, #26
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80064c2:	881a      	ldrh	r2, [r3, #0]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	835a      	strh	r2, [r3, #26]
 80064c8:	e015      	b.n	80064f6 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	211a      	movs	r1, #26
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	211a      	movs	r1, #26
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80064f0:	881a      	ldrh	r2, [r3, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	211a      	movs	r1, #26
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	b25b      	sxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	da16      	bge.n	800653c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	211a      	movs	r1, #26
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	4413      	add	r3, r2
 800651a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	211a      	movs	r1, #26
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006534:	881a      	ldrh	r2, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	835a      	strh	r2, [r3, #26]
 800653a:	e015      	b.n	8006568 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	211a      	movs	r1, #26
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	f203 3352 	addw	r3, r3, #850	; 0x352
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	211a      	movs	r1, #26
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	4413      	add	r3, r2
 800655e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	7b9b      	ldrb	r3, [r3, #14]
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 fc7d 	bl	8007e6e <USBH_AllocPipe>
 8006574:	4603      	mov	r3, r0
 8006576:	461a      	mov	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	7bdb      	ldrb	r3, [r3, #15]
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fc73 	bl	8007e6e <USBH_AllocPipe>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	7b59      	ldrb	r1, [r3, #13]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	7b98      	ldrb	r0, [r3, #14]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	8b12      	ldrh	r2, [r2, #24]
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	2202      	movs	r2, #2
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4623      	mov	r3, r4
 80065b2:	4602      	mov	r2, r0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fc2b 	bl	8007e10 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	7b19      	ldrb	r1, [r3, #12]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	7bd8      	ldrb	r0, [r3, #15]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	8b52      	ldrh	r2, [r2, #26]
 80065d2:	9202      	str	r2, [sp, #8]
 80065d4:	2202      	movs	r2, #2
 80065d6:	9201      	str	r2, [sp, #4]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	4623      	mov	r3, r4
 80065dc:	4602      	mov	r2, r0
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fc16 	bl	8007e10 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	7b5b      	ldrb	r3, [r3, #13]
 80065f0:	2200      	movs	r2, #0
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 fd4b 	bl	8009090 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	7b1b      	ldrb	r3, [r3, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f002 fd44 	bl	8009090 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}

08006616 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00e      	beq.n	800664e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fc09 	bl	8007e4e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fc31 	bl	8007eaa <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	7b1b      	ldrb	r3, [r3, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	7b1b      	ldrb	r3, [r3, #12]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fbf6 	bl	8007e4e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	7b1b      	ldrb	r3, [r3, #12]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 fc1e 	bl	8007eaa <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	7b5b      	ldrb	r3, [r3, #13]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00e      	beq.n	800669a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	7b5b      	ldrb	r3, [r3, #13]
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fbe3 	bl	8007e4e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	7b5b      	ldrb	r3, [r3, #13]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fc0b 	bl	8007eaa <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f002 fdd0 	bl	8009254 <free>
    phost->pActiveClass->pData = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066ba:	2200      	movs	r2, #0
 80066bc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80066d0:	2302      	movs	r3, #2
 80066d2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	3340      	adds	r3, #64	; 0x40
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f8b2 	bl	800684e <GetLineCoding>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066fa:	2102      	movs	r1, #2
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
  }
  return status;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800672c:	2b04      	cmp	r3, #4
 800672e:	d877      	bhi.n	8006820 <USBH_CDC_Process+0x114>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <USBH_CDC_Process+0x2c>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	0800674d 	.word	0x0800674d
 800673c:	08006753 	.word	0x08006753
 8006740:	08006783 	.word	0x08006783
 8006744:	080067f7 	.word	0x080067f7
 8006748:	08006805 	.word	0x08006805
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]
    break;
 8006750:	e06d      	b.n	800682e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f897 	bl	800688c <SetLineCoding>
 800675e:	4603      	mov	r3, r0
 8006760:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006770:	e058      	b.n	8006824 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d055      	beq.n	8006824 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2204      	movs	r2, #4
 800677c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006780:	e050      	b.n	8006824 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3340      	adds	r3, #64	; 0x40
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f860 	bl	800684e <GetLineCoding>
 800678e:	4603      	mov	r3, r0
 8006790:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d126      	bne.n	80067e6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	791b      	ldrb	r3, [r3, #4]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d13b      	bne.n	8006828 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067bc:	429a      	cmp	r2, r3
 80067be:	d133      	bne.n	8006828 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ca:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d12b      	bne.n	8006828 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067da:	429a      	cmp	r2, r3
 80067dc:	d124      	bne.n	8006828 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f95a 	bl	8006a98 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80067e4:	e020      	b.n	8006828 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d01d      	beq.n	8006828 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2204      	movs	r2, #4
 80067f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80067f4:	e018      	b.n	8006828 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f867 	bl	80068ca <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8dc 	bl	80069ba <CDC_ProcessReception>
    break;
 8006802:	e014      	b.n	800682e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006804:	2100      	movs	r1, #0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fece 	bl	80075a8 <USBH_ClrFeature>
 800680c:	4603      	mov	r3, r0
 800680e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800681e:	e005      	b.n	800682c <USBH_CDC_Process+0x120>

  default:
    break;
 8006820:	bf00      	nop
 8006822:	e004      	b.n	800682e <USBH_CDC_Process+0x122>
    break;
 8006824:	bf00      	nop
 8006826:	e002      	b.n	800682e <USBH_CDC_Process+0x122>
    break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <USBH_CDC_Process+0x122>
    break;
 800682c:	bf00      	nop

  }

  return status;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	22a1      	movs	r2, #161	; 0xa1
 800685c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2221      	movs	r2, #33	; 0x21
 8006862:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2207      	movs	r2, #7
 8006874:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2207      	movs	r2, #7
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f873 	bl	8007968 <USBH_CtlReq>
 8006882:	4603      	mov	r3, r0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2221      	movs	r2, #33	; 0x21
 800689a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2207      	movs	r2, #7
 80068b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2207      	movs	r2, #7
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 f854 	bl	8007968 <USBH_CtlReq>
 80068c0:	4603      	mov	r3, r0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af02      	add	r7, sp, #8
 80068d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068dc:	2300      	movs	r3, #0
 80068de:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d002      	beq.n	80068f0 <CDC_ProcessTransmission+0x26>
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d025      	beq.n	800693a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80068ee:	e060      	b.n	80069b2 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	8b12      	ldrh	r2, [r2, #24]
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d90c      	bls.n	8006916 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	69d9      	ldr	r1, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8b1a      	ldrh	r2, [r3, #24]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	7b58      	ldrb	r0, [r3, #13]
 8006908:	2301      	movs	r3, #1
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	4603      	mov	r3, r0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fa3b 	bl	8007d8a <USBH_BulkSendData>
 8006914:	e00c      	b.n	8006930 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	7b58      	ldrb	r0, [r3, #13]
 8006924:	2301      	movs	r3, #1
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	4603      	mov	r3, r0
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fa2d 	bl	8007d8a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006938:	e03b      	b.n	80069b2 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	7b5b      	ldrb	r3, [r3, #13]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f002 fb7b 	bl	800903c <USBH_LL_GetURBState>
 8006946:	4603      	mov	r3, r0
 8006948:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d128      	bne.n	80069a2 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	8b12      	ldrh	r2, [r2, #24]
 8006958:	4293      	cmp	r3, r2
 800695a:	d90e      	bls.n	800697a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	8b12      	ldrh	r2, [r2, #24]
 8006964:	1a9a      	subs	r2, r3, r2
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	8b12      	ldrh	r2, [r2, #24]
 8006972:	441a      	add	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	61da      	str	r2, [r3, #28]
 8006978:	e002      	b.n	8006980 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006990:	e00e      	b.n	80069b0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f868 	bl	8006a70 <USBH_CDC_TransmitCallback>
    break;
 80069a0:	e006      	b.n	80069b0 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d103      	bne.n	80069b0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80069b0:	bf00      	nop
  }
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b086      	sub	sp, #24
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d002      	beq.n	80069e0 <CDC_ProcessReception+0x26>
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d00e      	beq.n	80069fc <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80069de:	e043      	b.n	8006a68 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	6a19      	ldr	r1, [r3, #32]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	8b5a      	ldrh	r2, [r3, #26]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	7b1b      	ldrb	r3, [r3, #12]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 f9f1 	bl	8007dd4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2204      	movs	r2, #4
 80069f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80069fa:	e035      	b.n	8006a68 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	7b1b      	ldrb	r3, [r3, #12]
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 fb1a 	bl	800903c <USBH_LL_GetURBState>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006a0c:	7cfb      	ldrb	r3, [r7, #19]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d129      	bne.n	8006a66 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	7b1b      	ldrb	r3, [r3, #12]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f002 fa7d 	bl	8008f18 <USBH_LL_GetLastXferSize>
 8006a1e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d016      	beq.n	8006a58 <CDC_ProcessReception+0x9e>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	8b5b      	ldrh	r3, [r3, #26]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d910      	bls.n	8006a58 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad2      	subs	r2, r2, r3
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	441a      	add	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2203      	movs	r2, #3
 8006a52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006a56:	e006      	b.n	8006a66 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f80f 	bl	8006a84 <USBH_CDC_ReceiveCallback>
    break;
 8006a66:	bf00      	nop
  }
}
 8006a68:	bf00      	nop
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]

}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]

}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e019      	b.n	8006af8 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	79fa      	ldrb	r2, [r7, #7]
 8006ac8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f80f 	bl	8006b00 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f002 f95f 	bl	8008db4 <USBH_LL_Init>

  return USBH_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006b0c:	e008      	b.n	8006b20 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	32e0      	adds	r2, #224	; 0xe0
 8006b14:	2100      	movs	r1, #0
 8006b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b0e      	cmp	r3, #14
 8006b24:	d9f3      	bls.n	8006b0e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e009      	b.n	8006b40 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b46:	d3f1      	bcc.n	8006b2c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2240      	movs	r2, #64	; 0x40
 8006b6c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10f      	bne.n	8006bd0 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	33dc      	adds	r3, #220	; 0xdc
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]
 8006bce:	e004      	b.n	8006bda <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	73fb      	strb	r3, [r7, #15]
 8006bd4:	e001      	b.n	8006bda <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006bfe:	78fa      	ldrb	r2, [r7, #3]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d204      	bcs.n	8006c0e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006c0c:	e001      	b.n	8006c12 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	70fb      	strb	r3, [r7, #3]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70bb      	strb	r3, [r7, #2]
 8006c36:	4613      	mov	r3, r2
 8006c38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006c48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c4a:	e025      	b.n	8006c98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	221a      	movs	r2, #26
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	3308      	adds	r3, #8
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	3302      	adds	r3, #2
 8006c5c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	795b      	ldrb	r3, [r3, #5]
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d002      	beq.n	8006c6e <USBH_FindInterface+0x4e>
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	2bff      	cmp	r3, #255	; 0xff
 8006c6c:	d111      	bne.n	8006c92 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006c72:	78ba      	ldrb	r2, [r7, #2]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d002      	beq.n	8006c7e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006c78:	78bb      	ldrb	r3, [r7, #2]
 8006c7a:	2bff      	cmp	r3, #255	; 0xff
 8006c7c:	d109      	bne.n	8006c92 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006c82:	787a      	ldrb	r2, [r7, #1]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d002      	beq.n	8006c8e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c88:	787b      	ldrb	r3, [r7, #1]
 8006c8a:	2bff      	cmp	r3, #255	; 0xff
 8006c8c:	d101      	bne.n	8006c92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	e006      	b.n	8006ca0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	3301      	adds	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d9d6      	bls.n	8006c4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c9e:	23ff      	movs	r3, #255	; 0xff
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f002 f8b9 	bl	8008e2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006cba:	2101      	movs	r1, #1
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f002 f9d0 	bl	8009062 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af04      	add	r7, sp, #16
 8006cd2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 faec 	bl	80072ba <USBH_IsPortEnabled>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10c      	bne.n	8006d02 <USBH_Process+0x36>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d002      	beq.n	8006d02 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2203      	movs	r2, #3
 8006d00:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b0b      	cmp	r3, #11
 8006d0a:	f200 814c 	bhi.w	8006fa6 <USBH_Process+0x2da>
 8006d0e:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <USBH_Process+0x48>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006d67 	.word	0x08006d67
 8006d1c:	08006d7b 	.word	0x08006d7b
 8006d20:	08006f81 	.word	0x08006f81
 8006d24:	08006fa7 	.word	0x08006fa7
 8006d28:	08006e09 	.word	0x08006e09
 8006d2c:	08006f37 	.word	0x08006f37
 8006d30:	08006e39 	.word	0x08006e39
 8006d34:	08006e59 	.word	0x08006e59
 8006d38:	08006e79 	.word	0x08006e79
 8006d3c:	08006ea7 	.word	0x08006ea7
 8006d40:	08006f69 	.word	0x08006f69
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 812c 	beq.w	8006faa <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006d58:	20c8      	movs	r0, #200	; 0xc8
 8006d5a:	f002 f9cc 	bl	80090f6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f002 f8bf 	bl	8008ee2 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006d64:	e121      	b.n	8006faa <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	f040 811e 	bne.w	8006fae <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006d78:	e119      	b.n	8006fae <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006d7a:	2064      	movs	r0, #100	; 0x64
 8006d7c:	f002 f9bb 	bl	80090f6 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f002 f889 	bl	8008e98 <USBH_LL_GetSpeed>
 8006d86:	4603      	mov	r3, r0
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2205      	movs	r2, #5
 8006d94:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006d96:	2100      	movs	r1, #0
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 f868 	bl	8007e6e <USBH_AllocPipe>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006da6:	2180      	movs	r1, #128	; 0x80
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f860 	bl	8007e6e <USBH_AllocPipe>
 8006dae:	4603      	mov	r3, r0
 8006db0:	461a      	mov	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	7919      	ldrb	r1, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006dca:	b292      	uxth	r2, r2
 8006dcc:	9202      	str	r2, [sp, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	9201      	str	r2, [sp, #4]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2280      	movs	r2, #128	; 0x80
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 f819 	bl	8007e10 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7959      	ldrb	r1, [r3, #5]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006df2:	b292      	uxth	r2, r2
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	9201      	str	r2, [sp, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2200      	movs	r2, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f805 	bl	8007e10 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e06:	e0e3      	b.n	8006fd0 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8e7 	bl	8006fdc <USBH_HandleEnum>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 80ce 	bne.w	8006fb2 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d103      	bne.n	8006e30 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006e2e:	e0c0      	b.n	8006fb2 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2207      	movs	r2, #7
 8006e34:	701a      	strb	r2, [r3, #0]
    break;
 8006e36:	e0bc      	b.n	8006fb2 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80b9 	beq.w	8006fb6 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2208      	movs	r2, #8
 8006e54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e56:	e0ae      	b.n	8006fb6 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fb59 	bl	800751a <USBH_SetCfg>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 80a5 	bne.w	8006fba <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2209      	movs	r2, #9
 8006e74:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e76:	e0a0      	b.n	8006fba <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00b      	beq.n	8006e9e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e86:	2101      	movs	r1, #1
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fb69 	bl	8007560 <USBH_SetFeature>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 8094 	bne.w	8006fbe <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	220a      	movs	r2, #10
 8006e9a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e9c:	e08f      	b.n	8006fbe <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	701a      	strb	r2, [r3, #0]
    break;
 8006ea4:	e08b      	b.n	8006fbe <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 8088 	beq.w	8006fc2 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
 8006ebe:	e017      	b.n	8006ef0 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	33dc      	adds	r3, #220	; 0xdc
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	791a      	ldrb	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d108      	bne.n	8006eea <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	33dc      	adds	r3, #220	; 0xdc
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	3301      	adds	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0e4      	beq.n	8006ec0 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d016      	beq.n	8006f2e <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2206      	movs	r2, #6
 8006f16:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f1e:	2103      	movs	r1, #3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f24:	e04d      	b.n	8006fc2 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	220d      	movs	r2, #13
 8006f2a:	701a      	strb	r2, [r3, #0]
    break;
 8006f2c:	e049      	b.n	8006fc2 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	220d      	movs	r2, #13
 8006f32:	701a      	strb	r2, [r3, #0]
    break;
 8006f34:	e045      	b.n	8006fc2 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00f      	beq.n	8006f60 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d136      	bne.n	8006fc6 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	220b      	movs	r2, #11
 8006f5c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006f5e:	e032      	b.n	8006fc6 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	220d      	movs	r2, #13
 8006f64:	701a      	strb	r2, [r3, #0]
    break;
 8006f66:	e02e      	b.n	8006fc6 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d02b      	beq.n	8006fca <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
    }
    break;
 8006f7e:	e024      	b.n	8006fca <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fdbd 	bl	8006b00 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01e      	beq.n	8006fce <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006fa4:	e013      	b.n	8006fce <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006fa6:	bf00      	nop
 8006fa8:	e012      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006faa:	bf00      	nop
 8006fac:	e010      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fae:	bf00      	nop
 8006fb0:	e00e      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fb2:	bf00      	nop
 8006fb4:	e00c      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fb6:	bf00      	nop
 8006fb8:	e00a      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fba:	bf00      	nop
 8006fbc:	e008      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fbe:	bf00      	nop
 8006fc0:	e006      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fc2:	bf00      	nop
 8006fc4:	e004      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <USBH_Process+0x304>
    break;
 8006fce:	bf00      	nop
  }
 return USBH_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop

08006fdc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	f200 80f8 	bhi.w	80071e2 <USBH_HandleEnum+0x206>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USBH_HandleEnum+0x1c>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007019 	.word	0x08007019
 8006ffc:	0800708b 	.word	0x0800708b
 8007000:	080070a3 	.word	0x080070a3
 8007004:	08007119 	.word	0x08007119
 8007008:	0800712f 	.word	0x0800712f
 800700c:	0800714b 	.word	0x0800714b
 8007010:	0800717f 	.word	0x0800717f
 8007014:	080071b3 	.word	0x080071b3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007018:	2108      	movs	r1, #8
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f9ad 	bl	800737a <USBH_Get_DevDesc>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 80df 	bne.w	80071e6 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	7919      	ldrb	r1, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800704c:	b292      	uxth	r2, r2
 800704e:	9202      	str	r2, [sp, #8]
 8007050:	2200      	movs	r2, #0
 8007052:	9201      	str	r2, [sp, #4]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4603      	mov	r3, r0
 8007058:	2280      	movs	r2, #128	; 0x80
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fed8 	bl	8007e10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7959      	ldrb	r1, [r3, #5]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007074:	b292      	uxth	r2, r2
 8007076:	9202      	str	r2, [sp, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	9201      	str	r2, [sp, #4]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	4603      	mov	r3, r0
 8007080:	2200      	movs	r2, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fec4 	bl	8007e10 <USBH_OpenPipe>

    }
    break;
 8007088:	e0ad      	b.n	80071e6 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800708a:	2112      	movs	r1, #18
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f974 	bl	800737a <USBH_Get_DevDesc>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 80a8 	bne.w	80071ea <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2202      	movs	r2, #2
 800709e:	705a      	strb	r2, [r3, #1]

    }
    break;
 80070a0:	e0a3      	b.n	80071ea <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80070a2:	2101      	movs	r1, #1
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fa14 	bl	80074d2 <USBH_SetAddress>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 809e 	bne.w	80071ee <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80070b2:	2002      	movs	r0, #2
 80070b4:	f002 f81f 	bl	80090f6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2203      	movs	r2, #3
 80070c4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	7919      	ldrb	r1, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80070da:	b292      	uxth	r2, r2
 80070dc:	9202      	str	r2, [sp, #8]
 80070de:	2200      	movs	r2, #0
 80070e0:	9201      	str	r2, [sp, #4]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4603      	mov	r3, r0
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fe91 	bl	8007e10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7959      	ldrb	r1, [r3, #5]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007102:	b292      	uxth	r2, r2
 8007104:	9202      	str	r2, [sp, #8]
 8007106:	2200      	movs	r2, #0
 8007108:	9201      	str	r2, [sp, #4]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	2200      	movs	r2, #0
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fe7d 	bl	8007e10 <USBH_OpenPipe>
    }
    break;
 8007116:	e06a      	b.n	80071ee <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007118:	2109      	movs	r1, #9
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f955 	bl	80073ca <USBH_Get_CfgDesc>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d165      	bne.n	80071f2 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800712c:	e061      	b.n	80071f2 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f947 	bl	80073ca <USBH_Get_CfgDesc>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d159      	bne.n	80071f6 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2205      	movs	r2, #5
 8007146:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007148:	e055      	b.n	80071f6 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007150:	2b00      	cmp	r3, #0
 8007152:	d010      	beq.n	8007176 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007160:	23ff      	movs	r3, #255	; 0xff
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f955 	bl	8007412 <USBH_Get_StringDesc>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d145      	bne.n	80071fa <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2206      	movs	r2, #6
 8007172:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007174:	e041      	b.n	80071fa <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2206      	movs	r2, #6
 800717a:	705a      	strb	r2, [r3, #1]
    break;
 800717c:	e03d      	b.n	80071fa <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007184:	2b00      	cmp	r3, #0
 8007186:	d010      	beq.n	80071aa <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007194:	23ff      	movs	r3, #255	; 0xff
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f93b 	bl	8007412 <USBH_Get_StringDesc>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d12d      	bne.n	80071fe <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2207      	movs	r2, #7
 80071a6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80071a8:	e029      	b.n	80071fe <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2207      	movs	r2, #7
 80071ae:	705a      	strb	r2, [r3, #1]
    break;
 80071b0:	e025      	b.n	80071fe <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00f      	beq.n	80071dc <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80071c8:	23ff      	movs	r3, #255	; 0xff
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f921 	bl	8007412 <USBH_Get_StringDesc>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d115      	bne.n	8007202 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80071da:	e012      	b.n	8007202 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
    break;
 80071e0:	e00f      	b.n	8007202 <USBH_HandleEnum+0x226>

  default:
    break;
 80071e2:	bf00      	nop
 80071e4:	e00e      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 80071e6:	bf00      	nop
 80071e8:	e00c      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 80071ea:	bf00      	nop
 80071ec:	e00a      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 80071ee:	bf00      	nop
 80071f0:	e008      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 80071f2:	bf00      	nop
 80071f4:	e006      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 80071f6:	bf00      	nop
 80071f8:	e004      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 80071fa:	bf00      	nop
 80071fc:	e002      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 80071fe:	bf00      	nop
 8007200:	e000      	b.n	8007204 <USBH_HandleEnum+0x228>
    break;
 8007202:	bf00      	nop
  }
  return Status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop

08007210 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f804 	bl	8007252 <USBH_HandleSof>
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b0b      	cmp	r3, #11
 8007262:	d10a      	bne.n	800727a <USBH_HandleSof+0x28>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
  }
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007292:	bf00      	nop
}
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80072ae:	bf00      	nop
}
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10f      	bne.n	8007306 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072fe:	2104      	movs	r1, #4
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
 8007304:	e007      	b.n	8007316 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800730c:	2b01      	cmp	r3, #1
 800730e:	d102      	bne.n	8007316 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fd9a 	bl	8008e62 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	791b      	ldrb	r3, [r3, #4]
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fdb8 	bl	8007eaa <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	795b      	ldrb	r3, [r3, #5]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fdb2 	bl	8007eaa <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800735e:	2105      	movs	r1, #5
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fd61 	bl	8008e2c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2203      	movs	r2, #3
 800736e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af02      	add	r7, sp, #8
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	b29b      	uxth	r3, r3
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007398:	2100      	movs	r1, #0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f864 	bl	8007468 <USBH_GetDescriptor>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f203 3022 	addw	r0, r3, #802	; 0x322
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	b292      	uxth	r2, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	f000 f918 	bl	80075f0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af02      	add	r7, sp, #8
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	331c      	adds	r3, #28
 80073da:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073e6:	2100      	movs	r1, #0
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f83d 	bl	8007468 <USBH_GetDescriptor>
 80073ee:	4603      	mov	r3, r0
 80073f0:	72fb      	strb	r3, [r7, #11]
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80073fe:	887a      	ldrh	r2, [r7, #2]
 8007400:	68f9      	ldr	r1, [r7, #12]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f964 	bl	80076d0 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007408:	7afb      	ldrb	r3, [r7, #11]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b088      	sub	sp, #32
 8007416:	af02      	add	r7, sp, #8
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	461a      	mov	r2, r3
 800741e:	460b      	mov	r3, r1
 8007420:	72fb      	strb	r3, [r7, #11]
 8007422:	4613      	mov	r3, r2
 8007424:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800742e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007436:	893b      	ldrh	r3, [r7, #8]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	460b      	mov	r3, r1
 800743c:	2100      	movs	r1, #0
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f812 	bl	8007468 <USBH_GetDescriptor>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d107      	bne.n	800745e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007454:	893a      	ldrh	r2, [r7, #8]
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fa37 	bl	80078cc <USBH_ParseStringDesc>
  }
  return status;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	72fb      	strb	r3, [r7, #11]
 8007476:	4613      	mov	r3, r2
 8007478:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	789b      	ldrb	r3, [r3, #2]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d11c      	bne.n	80074bc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007488:	b2da      	uxtb	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2206      	movs	r2, #6
 8007492:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	893a      	ldrh	r2, [r7, #8]
 8007498:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800749a:	893b      	ldrh	r3, [r7, #8]
 800749c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a4:	d104      	bne.n	80074b0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f240 4209 	movw	r2, #1033	; 0x409
 80074ac:	829a      	strh	r2, [r3, #20]
 80074ae:	e002      	b.n	80074b6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8b3a      	ldrh	r2, [r7, #24]
 80074ba:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80074bc:	8b3b      	ldrh	r3, [r7, #24]
 80074be:	461a      	mov	r2, r3
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fa50 	bl	8007968 <USBH_CtlReq>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	789b      	ldrb	r3, [r3, #2]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10f      	bne.n	8007506 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2205      	movs	r2, #5
 80074f0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa2c 	bl	8007968 <USBH_CtlReq>
 8007510:	4603      	mov	r3, r0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	789b      	ldrb	r3, [r3, #2]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d10e      	bne.n	800754c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2209      	movs	r2, #9
 8007538:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	887a      	ldrh	r2, [r7, #2]
 800753e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800754c:	2200      	movs	r2, #0
 800754e:	2100      	movs	r1, #0
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa09 	bl	8007968 <USBH_CtlReq>
 8007556:	4603      	mov	r3, r0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	789b      	ldrb	r3, [r3, #2]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10f      	bne.n	8007594 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2203      	movs	r2, #3
 800757e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007594:	2200      	movs	r2, #0
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f9e5 	bl	8007968 <USBH_CtlReq>
 800759e:	4603      	mov	r3, r0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	789b      	ldrb	r3, [r3, #2]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d10f      	bne.n	80075dc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80075dc:	2200      	movs	r2, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9c1 	bl	8007968 <USBH_CtlReq>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	785a      	ldrb	r2, [r3, #1]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	3302      	adds	r3, #2
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b29a      	uxth	r2, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	3303      	adds	r3, #3
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	b29b      	uxth	r3, r3
 8007622:	4313      	orrs	r3, r2
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	791a      	ldrb	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	795a      	ldrb	r2, [r3, #5]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	799a      	ldrb	r2, [r3, #6]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	79da      	ldrb	r2, [r3, #7]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	2b08      	cmp	r3, #8
 800764e:	d939      	bls.n	80076c4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3308      	adds	r3, #8
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b29a      	uxth	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3309      	adds	r3, #9
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	b29b      	uxth	r3, r3
 8007664:	4313      	orrs	r3, r2
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	330a      	adds	r3, #10
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	b29a      	uxth	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	330b      	adds	r3, #11
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	b29b      	uxth	r3, r3
 8007680:	4313      	orrs	r3, r2
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	330c      	adds	r3, #12
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	b29a      	uxth	r2, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	330d      	adds	r3, #13
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	b29b      	uxth	r3, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	7b9a      	ldrb	r2, [r3, #14]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	7bda      	ldrb	r2, [r3, #15]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	7c1a      	ldrb	r2, [r3, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	7c5a      	ldrb	r2, [r3, #17]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	745a      	strb	r2, [r3, #17]
  }
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	785a      	ldrb	r2, [r3, #1]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	3302      	adds	r3, #2
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	b29a      	uxth	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3303      	adds	r3, #3
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	b29b      	uxth	r3, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	791a      	ldrb	r2, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	795a      	ldrb	r2, [r3, #5]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	799a      	ldrb	r2, [r3, #6]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	79da      	ldrb	r2, [r3, #7]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	7a1a      	ldrb	r2, [r3, #8]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	2b09      	cmp	r3, #9
 800774a:	d95f      	bls.n	800780c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800774c:	2309      	movs	r3, #9
 800774e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007754:	e051      	b.n	80077fa <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007756:	f107 0316 	add.w	r3, r7, #22
 800775a:	4619      	mov	r1, r3
 800775c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800775e:	f000 f8e8 	bl	8007932 <USBH_GetNextDesc>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b04      	cmp	r3, #4
 800776a:	d146      	bne.n	80077fa <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800776c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007770:	221a      	movs	r2, #26
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	3308      	adds	r3, #8
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	3302      	adds	r3, #2
 800777e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007782:	69f8      	ldr	r0, [r7, #28]
 8007784:	f000 f846 	bl	8007814 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800778e:	2300      	movs	r3, #0
 8007790:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007792:	e022      	b.n	80077da <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007794:	f107 0316 	add.w	r3, r7, #22
 8007798:	4619      	mov	r1, r3
 800779a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800779c:	f000 f8c9 	bl	8007932 <USBH_GetNextDesc>
 80077a0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b05      	cmp	r3, #5
 80077a8:	d117      	bne.n	80077da <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80077aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80077b2:	3201      	adds	r2, #1
 80077b4:	00d2      	lsls	r2, r2, #3
 80077b6:	211a      	movs	r1, #26
 80077b8:	fb01 f303 	mul.w	r3, r1, r3
 80077bc:	4413      	add	r3, r2
 80077be:	3308      	adds	r3, #8
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	3304      	adds	r3, #4
 80077c6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80077c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ca:	69b8      	ldr	r0, [r7, #24]
 80077cc:	f000 f851 	bl	8007872 <USBH_ParseEPDesc>
            ep_ix++;
 80077d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077d4:	3301      	adds	r3, #1
 80077d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d204      	bcs.n	80077f0 <USBH_ParseCfgDesc+0x120>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	885a      	ldrh	r2, [r3, #2]
 80077ea:	8afb      	ldrh	r3, [r7, #22]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d8d1      	bhi.n	8007794 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80077f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077f4:	3301      	adds	r3, #1
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d804      	bhi.n	800780c <USBH_ParseCfgDesc+0x13c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	885a      	ldrh	r2, [r3, #2]
 8007806:	8afb      	ldrh	r3, [r7, #22]
 8007808:	429a      	cmp	r2, r3
 800780a:	d8a4      	bhi.n	8007756 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800780c:	bf00      	nop
 800780e:	3728      	adds	r7, #40	; 0x28
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	785a      	ldrb	r2, [r3, #1]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	789a      	ldrb	r2, [r3, #2]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	78da      	ldrb	r2, [r3, #3]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	791a      	ldrb	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	795a      	ldrb	r2, [r3, #5]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	799a      	ldrb	r2, [r3, #6]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	79da      	ldrb	r2, [r3, #7]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	7a1a      	ldrb	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	721a      	strb	r2, [r3, #8]
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785a      	ldrb	r2, [r3, #1]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	789a      	ldrb	r2, [r3, #2]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	78da      	ldrb	r2, [r3, #3]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	3304      	adds	r3, #4
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	3305      	adds	r3, #5
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	799a      	ldrb	r2, [r3, #6]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	719a      	strb	r2, [r3, #6]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d120      	bne.n	8007926 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	1e9a      	subs	r2, r3, #2
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bf28      	it	cs
 80078f0:	4613      	movcs	r3, r2
 80078f2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3302      	adds	r3, #2
 80078f8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80078fa:	2300      	movs	r3, #0
 80078fc:	82fb      	strh	r3, [r7, #22]
 80078fe:	e00b      	b.n	8007918 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007900:	8afb      	ldrh	r3, [r7, #22]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3301      	adds	r3, #1
 8007910:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007912:	8afb      	ldrh	r3, [r7, #22]
 8007914:	3302      	adds	r3, #2
 8007916:	82fb      	strh	r3, [r7, #22]
 8007918:	8afa      	ldrh	r2, [r7, #22]
 800791a:	8abb      	ldrh	r3, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	d3ef      	bcc.n	8007900 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
  }
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	881a      	ldrh	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	4413      	add	r3, r2
 8007948:	b29a      	uxth	r2, r3
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4413      	add	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800795a:	68fb      	ldr	r3, [r7, #12]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007976:	2301      	movs	r3, #1
 8007978:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	789b      	ldrb	r3, [r3, #2]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d002      	beq.n	8007988 <USBH_CtlReq+0x20>
 8007982:	2b02      	cmp	r3, #2
 8007984:	d00f      	beq.n	80079a6 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007986:	e034      	b.n	80079f2 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	88fa      	ldrh	r2, [r7, #6]
 8007992:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2202      	movs	r2, #2
 800799e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80079a0:	2301      	movs	r3, #1
 80079a2:	75fb      	strb	r3, [r7, #23]
    break;
 80079a4:	e025      	b.n	80079f2 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f828 	bl	80079fc <USBH_HandleControl>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d108      	bne.n	80079c8 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
    break;
 80079c6:	e013      	b.n	80079f0 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d108      	bne.n	80079e0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80079da:	2303      	movs	r3, #3
 80079dc:	75fb      	strb	r3, [r7, #23]
    break;
 80079de:	e007      	b.n	80079f0 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d104      	bne.n	80079f0 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80079ec:	2302      	movs	r3, #2
 80079ee:	75fb      	strb	r3, [r7, #23]
    break;
 80079f0:	bf00      	nop
  }
  return status;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7e1b      	ldrb	r3, [r3, #24]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	2b0a      	cmp	r3, #10
 8007a14:	f200 814c 	bhi.w	8007cb0 <USBH_HandleControl+0x2b4>
 8007a18:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <USBH_HandleControl+0x24>)
 8007a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1e:	bf00      	nop
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	08007a67 	.word	0x08007a67
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007af7 	.word	0x08007af7
 8007a30:	08007b2f 	.word	0x08007b2f
 8007a34:	08007b5b 	.word	0x08007b5b
 8007a38:	08007bad 	.word	0x08007bad
 8007a3c:	08007bcf 	.word	0x08007bcf
 8007a40:	08007c0b 	.word	0x08007c0b
 8007a44:	08007c33 	.word	0x08007c33
 8007a48:	08007c71 	.word	0x08007c71
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f103 0110 	add.w	r1, r3, #16
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	795b      	ldrb	r3, [r3, #5]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f939 	bl	8007cd0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	761a      	strb	r2, [r3, #24]
    break;
 8007a64:	e12f      	b.n	8007cc6 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fae5 	bl	800903c <USBH_LL_GetURBState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d11e      	bne.n	8007aba <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7c1b      	ldrb	r3, [r3, #16]
 8007a80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a84:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8adb      	ldrh	r3, [r3, #22]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007a8e:	7b7b      	ldrb	r3, [r7, #13]
 8007a90:	2b80      	cmp	r3, #128	; 0x80
 8007a92:	d103      	bne.n	8007a9c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2203      	movs	r2, #3
 8007a98:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a9a:	e10b      	b.n	8007cb4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2205      	movs	r2, #5
 8007aa0:	761a      	strb	r2, [r3, #24]
    break;
 8007aa2:	e107      	b.n	8007cb4 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007aa4:	7b7b      	ldrb	r3, [r7, #13]
 8007aa6:	2b80      	cmp	r3, #128	; 0x80
 8007aa8:	d103      	bne.n	8007ab2 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2209      	movs	r2, #9
 8007aae:	761a      	strb	r2, [r3, #24]
    break;
 8007ab0:	e100      	b.n	8007cb4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	761a      	strb	r2, [r3, #24]
    break;
 8007ab8:	e0fc      	b.n	8007cb4 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d003      	beq.n	8007ac8 <USBH_HandleControl+0xcc>
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	f040 80f6 	bne.w	8007cb4 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	220b      	movs	r2, #11
 8007acc:	761a      	strb	r2, [r3, #24]
    break;
 8007ace:	e0f1      	b.n	8007cb4 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6899      	ldr	r1, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	899a      	ldrh	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	791b      	ldrb	r3, [r3, #4]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f930 	bl	8007d4e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2204      	movs	r2, #4
 8007af2:	761a      	strb	r2, [r3, #24]
    break;
 8007af4:	e0e7      	b.n	8007cc6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fa9d 	bl	800903c <USBH_LL_GetURBState>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d102      	bne.n	8007b12 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2209      	movs	r2, #9
 8007b10:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b05      	cmp	r3, #5
 8007b16:	d102      	bne.n	8007b1e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b1c:	e0cc      	b.n	8007cb8 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	f040 80c9 	bne.w	8007cb8 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	220b      	movs	r2, #11
 8007b2a:	761a      	strb	r2, [r3, #24]
    break;
 8007b2c:	e0c4      	b.n	8007cb8 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6899      	ldr	r1, [r3, #8]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	899a      	ldrh	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7958      	ldrb	r0, [r3, #5]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f8df 	bl	8007d04 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2206      	movs	r2, #6
 8007b56:	761a      	strb	r2, [r3, #24]
    break;
 8007b58:	e0b5      	b.n	8007cc6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	795b      	ldrb	r3, [r3, #5]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 fa6b 	bl	800903c <USBH_LL_GetURBState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d103      	bne.n	8007b78 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2207      	movs	r2, #7
 8007b74:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b76:	e0a1      	b.n	8007cbc <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	d105      	bne.n	8007b8a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	220c      	movs	r2, #12
 8007b82:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007b84:	2303      	movs	r3, #3
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	e098      	b.n	8007cbc <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d103      	bne.n	8007b98 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2205      	movs	r2, #5
 8007b94:	761a      	strb	r2, [r3, #24]
    break;
 8007b96:	e091      	b.n	8007cbc <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	f040 808e 	bne.w	8007cbc <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	220b      	movs	r2, #11
 8007ba4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8007baa:	e087      	b.n	8007cbc <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	791b      	ldrb	r3, [r3, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8ca 	bl	8007d4e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2208      	movs	r2, #8
 8007bca:	761a      	strb	r2, [r3, #24]

    break;
 8007bcc:	e07b      	b.n	8007cc6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	791b      	ldrb	r3, [r3, #4]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fa31 	bl	800903c <USBH_LL_GetURBState>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d105      	bne.n	8007bf0 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	220d      	movs	r2, #13
 8007be8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bee:	e067      	b.n	8007cc0 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d103      	bne.n	8007bfe <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220b      	movs	r2, #11
 8007bfa:	761a      	strb	r2, [r3, #24]
    break;
 8007bfc:	e060      	b.n	8007cc0 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b05      	cmp	r3, #5
 8007c02:	d15d      	bne.n	8007cc0 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007c04:	2303      	movs	r3, #3
 8007c06:	73fb      	strb	r3, [r7, #15]
    break;
 8007c08:	e05a      	b.n	8007cc0 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	795a      	ldrb	r2, [r3, #5]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4613      	mov	r3, r2
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f873 	bl	8007d04 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	220a      	movs	r2, #10
 8007c2e:	761a      	strb	r2, [r3, #24]
    break;
 8007c30:	e049      	b.n	8007cc6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	795b      	ldrb	r3, [r3, #5]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f9ff 	bl	800903c <USBH_LL_GetURBState>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d105      	bne.n	8007c54 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	220d      	movs	r2, #13
 8007c50:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007c52:	e037      	b.n	8007cc4 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d103      	bne.n	8007c62 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2209      	movs	r2, #9
 8007c5e:	761a      	strb	r2, [r3, #24]
    break;
 8007c60:	e030      	b.n	8007cc4 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d12d      	bne.n	8007cc4 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	220b      	movs	r2, #11
 8007c6c:	761a      	strb	r2, [r3, #24]
    break;
 8007c6e:	e029      	b.n	8007cc4 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	7e5b      	ldrb	r3, [r3, #25]
 8007c74:	3301      	adds	r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	765a      	strb	r2, [r3, #25]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7e5b      	ldrb	r3, [r3, #25]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d809      	bhi.n	8007c98 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f8ec 	bl	8008e62 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007c96:	e016      	b.n	8007cc6 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c9e:	2106      	movs	r1, #6
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	73fb      	strb	r3, [r7, #15]
    break;
 8007cae:	e00a      	b.n	8007cc6 <USBH_HandleControl+0x2ca>

  default:
    break;
 8007cb0:	bf00      	nop
 8007cb2:	e008      	b.n	8007cc6 <USBH_HandleControl+0x2ca>
    break;
 8007cb4:	bf00      	nop
 8007cb6:	e006      	b.n	8007cc6 <USBH_HandleControl+0x2ca>
    break;
 8007cb8:	bf00      	nop
 8007cba:	e004      	b.n	8007cc6 <USBH_HandleControl+0x2ca>
    break;
 8007cbc:	bf00      	nop
 8007cbe:	e002      	b.n	8007cc6 <USBH_HandleControl+0x2ca>
    break;
 8007cc0:	bf00      	nop
 8007cc2:	e000      	b.n	8007cc6 <USBH_HandleControl+0x2ca>
    break;
 8007cc4:	bf00      	nop
  }
  return status;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007cde:	79f9      	ldrb	r1, [r7, #7]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9303      	str	r3, [sp, #12]
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	9302      	str	r3, [sp, #8]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	2300      	movs	r3, #0
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f001 f970 	bl	8008fda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af04      	add	r7, sp, #16
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4611      	mov	r1, r2
 8007d10:	461a      	mov	r2, r3
 8007d12:	460b      	mov	r3, r1
 8007d14:	80fb      	strh	r3, [r7, #6]
 8007d16:	4613      	mov	r3, r2
 8007d18:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d28:	7979      	ldrb	r1, [r7, #5]
 8007d2a:	7e3b      	ldrb	r3, [r7, #24]
 8007d2c:	9303      	str	r3, [sp, #12]
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	9302      	str	r3, [sp, #8]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	2301      	movs	r3, #1
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f001 f94b 	bl	8008fda <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b088      	sub	sp, #32
 8007d52:	af04      	add	r7, sp, #16
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	4611      	mov	r1, r2
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	80fb      	strh	r3, [r7, #6]
 8007d60:	4613      	mov	r3, r2
 8007d62:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007d64:	7979      	ldrb	r1, [r7, #5]
 8007d66:	2300      	movs	r3, #0
 8007d68:	9303      	str	r3, [sp, #12]
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	9302      	str	r3, [sp, #8]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	2301      	movs	r3, #1
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	2300      	movs	r3, #0
 8007d78:	2201      	movs	r2, #1
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f001 f92d 	bl	8008fda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d80:	2300      	movs	r3, #0

}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b088      	sub	sp, #32
 8007d8e:	af04      	add	r7, sp, #16
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	4611      	mov	r1, r2
 8007d96:	461a      	mov	r2, r3
 8007d98:	460b      	mov	r3, r1
 8007d9a:	80fb      	strh	r3, [r7, #6]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007dae:	7979      	ldrb	r1, [r7, #5]
 8007db0:	7e3b      	ldrb	r3, [r7, #24]
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f001 f908 	bl	8008fda <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af04      	add	r7, sp, #16
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4611      	mov	r1, r2
 8007de0:	461a      	mov	r2, r3
 8007de2:	460b      	mov	r3, r1
 8007de4:	80fb      	strh	r3, [r7, #6]
 8007de6:	4613      	mov	r3, r2
 8007de8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007dea:	7979      	ldrb	r1, [r7, #5]
 8007dec:	2300      	movs	r3, #0
 8007dee:	9303      	str	r3, [sp, #12]
 8007df0:	88fb      	ldrh	r3, [r7, #6]
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2301      	movs	r3, #1
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	2201      	movs	r2, #1
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f001 f8ea 	bl	8008fda <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af04      	add	r7, sp, #16
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	4608      	mov	r0, r1
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	4603      	mov	r3, r0
 8007e20:	70fb      	strb	r3, [r7, #3]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70bb      	strb	r3, [r7, #2]
 8007e26:	4613      	mov	r3, r2
 8007e28:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007e2a:	7878      	ldrb	r0, [r7, #1]
 8007e2c:	78ba      	ldrb	r2, [r7, #2]
 8007e2e:	78f9      	ldrb	r1, [r7, #3]
 8007e30:	8b3b      	ldrh	r3, [r7, #24]
 8007e32:	9302      	str	r3, [sp, #8]
 8007e34:	7d3b      	ldrb	r3, [r7, #20]
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	7c3b      	ldrb	r3, [r7, #16]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f87d 	bl	8008f3e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007e44:	2300      	movs	r3, #0

}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 f89c 	bl	8008f9c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e64:	2300      	movs	r3, #0

}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f831 	bl	8007ee2 <USBH_GetFreePipe>
 8007e80:	4603      	mov	r3, r0
 8007e82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e84:	89fb      	ldrh	r3, [r7, #14]
 8007e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d007      	beq.n	8007e9e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	89fa      	ldrh	r2, [r7, #14]
 8007e92:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	32e0      	adds	r2, #224	; 0xe0
 8007e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007e9e:	89fb      	ldrh	r3, [r7, #14]
 8007ea0:	b2db      	uxtb	r3, r3
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	2b0a      	cmp	r3, #10
 8007eba:	d80b      	bhi.n	8007ed4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32e0      	adds	r2, #224	; 0xe0
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	32e0      	adds	r2, #224	; 0xe0
 8007ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
 8007ef2:	e00e      	b.n	8007f12 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ef4:	7bfa      	ldrb	r2, [r7, #15]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	32e0      	adds	r2, #224	; 0xe0
 8007efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	e007      	b.n	8007f1c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b0a      	cmp	r3, #10
 8007f16:	d9ed      	bls.n	8007ef4 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f2e:	f7f8 fb27 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f32:	f000 f87b 	bl	800802c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f36:	f000 fa81 	bl	800843c <MX_GPIO_Init>
  MX_ADC1_Init();
 8007f3a:	f000 f8f9 	bl	8008130 <MX_ADC1_Init>
  MX_I2C1_Init();
 8007f3e:	f000 f949 	bl	80081d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007f42:	f000 f975 	bl	8008230 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007f46:	f000 f9a3 	bl	8008290 <MX_SPI1_Init>
  MX_TIM4_Init();
 8007f4a:	f000 f9d7 	bl	80082fc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8007f4e:	f000 fa4b 	bl	80083e8 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8007f52:	f000 fe1b 	bl	8008b8c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8007f56:	2108      	movs	r1, #8
 8007f58:	482d      	ldr	r0, [pc, #180]	; (8008010 <main+0xe8>)
 8007f5a:	f7fc fa85 	bl	8004468 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007f5e:	f000 fe3b 	bl	8008bd8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    char buffer[10];

    HAL_ADC_Start(&hadc1);
 8007f62:	482c      	ldr	r0, [pc, #176]	; (8008014 <main+0xec>)
 8007f64:	f7f8 fbe4 	bl	8000730 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8007f68:	2164      	movs	r1, #100	; 0x64
 8007f6a:	482a      	ldr	r0, [pc, #168]	; (8008014 <main+0xec>)
 8007f6c:	f7f8 fca6 	bl	80008bc <HAL_ADC_PollForConversion>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d147      	bne.n	8008006 <main+0xde>
        	int val = HAL_ADC_GetValue(&hadc1);
 8007f76:	4827      	ldr	r0, [pc, #156]	; (8008014 <main+0xec>)
 8007f78:	f7f8 fd24 	bl	80009c4 <HAL_ADC_GetValue>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	617b      	str	r3, [r7, #20]
        	val -= 140;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	3b8c      	subs	r3, #140	; 0x8c
 8007f84:	617b      	str	r3, [r7, #20]
        	if(val<0) val = 0;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	da01      	bge.n	8007f90 <main+0x68>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]
        	int c = (int) ((1 - ((float)(3000-val) / 2996))*100);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8007f96:	3308      	adds	r3, #8
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fa0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8008018 <main+0xf0>
 8007fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fb0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800801c <main+0xf4>
 8007fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fbc:	ee17 3a90 	vmov	r3, s15
 8007fc0:	613b      	str	r3, [r7, #16]
        	TIM4->CCR3 = c;
 8007fc2:	4a17      	ldr	r2, [pc, #92]	; (8008020 <main+0xf8>)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
        	sprintf(buffer, "%d\n\r", val);
 8007fc8:	1d3b      	adds	r3, r7, #4
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4915      	ldr	r1, [pc, #84]	; (8008024 <main+0xfc>)
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 fa08 	bl	80093e4 <siprintf>
        	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8007fd4:	1d3b      	adds	r3, r7, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7f8 f8fa 	bl	80001d0 <strlen>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	1d39      	adds	r1, r7, #4
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	4810      	ldr	r0, [pc, #64]	; (8008028 <main+0x100>)
 8007fe8:	f7fc ff9b 	bl	8004f22 <HAL_UART_Transmit>
        	sprintf(buffer, "%d\n\r", TIM4->CCR3);
 8007fec:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <main+0xf8>)
 8007fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ff0:	1d3b      	adds	r3, r7, #4
 8007ff2:	490c      	ldr	r1, [pc, #48]	; (8008024 <main+0xfc>)
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 f9f5 	bl	80093e4 <siprintf>
//        	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
        	sprintf(buffer, "%d\n\r", c);
 8007ffa:	1d3b      	adds	r3, r7, #4
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	4909      	ldr	r1, [pc, #36]	; (8008024 <main+0xfc>)
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f9ef 	bl	80093e4 <siprintf>
//        	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
        }

        HAL_Delay(100);
 8008006:	2064      	movs	r0, #100	; 0x64
 8008008:	f7f8 fb2c 	bl	8000664 <HAL_Delay>
  {
 800800c:	e7a7      	b.n	8007f5e <main+0x36>
 800800e:	bf00      	nop
 8008010:	200000c4 	.word	0x200000c4
 8008014:	20000158 	.word	0x20000158
 8008018:	453b4000 	.word	0x453b4000
 800801c:	42c80000 	.word	0x42c80000
 8008020:	40000800 	.word	0x40000800
 8008024:	08009a9c 	.word	0x08009a9c
 8008028:	200001f8 	.word	0x200001f8

0800802c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b098      	sub	sp, #96	; 0x60
 8008030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008036:	2230      	movs	r2, #48	; 0x30
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f912 	bl	8009264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008040:	f107 031c 	add.w	r3, r7, #28
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	60da      	str	r2, [r3, #12]
 800804e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008050:	f107 030c 	add.w	r3, r7, #12
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	609a      	str	r2, [r3, #8]
 800805c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800805e:	2300      	movs	r3, #0
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	4b31      	ldr	r3, [pc, #196]	; (8008128 <SystemClock_Config+0xfc>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	4a30      	ldr	r2, [pc, #192]	; (8008128 <SystemClock_Config+0xfc>)
 8008068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806c:	6413      	str	r3, [r2, #64]	; 0x40
 800806e:	4b2e      	ldr	r3, [pc, #184]	; (8008128 <SystemClock_Config+0xfc>)
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008076:	60bb      	str	r3, [r7, #8]
 8008078:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	4b2b      	ldr	r3, [pc, #172]	; (800812c <SystemClock_Config+0x100>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a2a      	ldr	r2, [pc, #168]	; (800812c <SystemClock_Config+0x100>)
 8008084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	4b28      	ldr	r3, [pc, #160]	; (800812c <SystemClock_Config+0x100>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008096:	2301      	movs	r3, #1
 8008098:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800809a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080a0:	2302      	movs	r3, #2
 80080a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80080aa:	2308      	movs	r3, #8
 80080ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80080ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80080b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80080b4:	2302      	movs	r3, #2
 80080b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80080b8:	2307      	movs	r3, #7
 80080ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fb fb9f 	bl	8003804 <HAL_RCC_OscConfig>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80080cc:	f000 fab4 	bl	8008638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080d0:	230f      	movs	r3, #15
 80080d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080d4:	2302      	movs	r3, #2
 80080d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80080dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80080e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80080e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80080e8:	f107 031c 	add.w	r3, r7, #28
 80080ec:	2105      	movs	r1, #5
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fb fdca 	bl	8003c88 <HAL_RCC_ClockConfig>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80080fa:	f000 fa9d 	bl	8008638 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80080fe:	2301      	movs	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8008102:	23c0      	movs	r3, #192	; 0xc0
 8008104:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008106:	2302      	movs	r3, #2
 8008108:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800810a:	f107 030c 	add.w	r3, r7, #12
 800810e:	4618      	mov	r0, r3
 8008110:	f7fb ffa8 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800811a:	f000 fa8d 	bl	8008638 <Error_Handler>
  }
}
 800811e:	bf00      	nop
 8008120:	3760      	adds	r7, #96	; 0x60
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40023800 	.word	0x40023800
 800812c:	40007000 	.word	0x40007000

08008130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008136:	463b      	mov	r3, r7
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8008142:	4b21      	ldr	r3, [pc, #132]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008144:	4a21      	ldr	r2, [pc, #132]	; (80081cc <MX_ADC1_Init+0x9c>)
 8008146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008148:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <MX_ADC1_Init+0x98>)
 800814a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800814e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008150:	4b1d      	ldr	r3, [pc, #116]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008152:	2200      	movs	r2, #0
 8008154:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008156:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008158:	2200      	movs	r2, #0
 800815a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800815c:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <MX_ADC1_Init+0x98>)
 800815e:	2200      	movs	r2, #0
 8008160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008162:	4b19      	ldr	r3, [pc, #100]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800816a:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <MX_ADC1_Init+0x98>)
 800816c:	2200      	movs	r2, #0
 800816e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008170:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008172:	4a17      	ldr	r2, [pc, #92]	; (80081d0 <MX_ADC1_Init+0xa0>)
 8008174:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008178:	2200      	movs	r2, #0
 800817a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800817c:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <MX_ADC1_Init+0x98>)
 800817e:	2201      	movs	r2, #1
 8008180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800818a:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <MX_ADC1_Init+0x98>)
 800818c:	2201      	movs	r2, #1
 800818e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008190:	480d      	ldr	r0, [pc, #52]	; (80081c8 <MX_ADC1_Init+0x98>)
 8008192:	f7f8 fa89 	bl	80006a8 <HAL_ADC_Init>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800819c:	f000 fa4c 	bl	8008638 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80081a0:	230b      	movs	r3, #11
 80081a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ac:	463b      	mov	r3, r7
 80081ae:	4619      	mov	r1, r3
 80081b0:	4805      	ldr	r0, [pc, #20]	; (80081c8 <MX_ADC1_Init+0x98>)
 80081b2:	f7f8 fc15 	bl	80009e0 <HAL_ADC_ConfigChannel>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80081bc:	f000 fa3c 	bl	8008638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000158 	.word	0x20000158
 80081cc:	40012000 	.word	0x40012000
 80081d0:	0f000001 	.word	0x0f000001

080081d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80081d8:	4b12      	ldr	r3, [pc, #72]	; (8008224 <MX_I2C1_Init+0x50>)
 80081da:	4a13      	ldr	r2, [pc, #76]	; (8008228 <MX_I2C1_Init+0x54>)
 80081dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80081de:	4b11      	ldr	r3, [pc, #68]	; (8008224 <MX_I2C1_Init+0x50>)
 80081e0:	4a12      	ldr	r2, [pc, #72]	; (800822c <MX_I2C1_Init+0x58>)
 80081e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80081e4:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <MX_I2C1_Init+0x50>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80081ea:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <MX_I2C1_Init+0x50>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <MX_I2C1_Init+0x50>)
 80081f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80081f8:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <MX_I2C1_Init+0x50>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <MX_I2C1_Init+0x50>)
 8008200:	2200      	movs	r2, #0
 8008202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008204:	4b07      	ldr	r3, [pc, #28]	; (8008224 <MX_I2C1_Init+0x50>)
 8008206:	2200      	movs	r2, #0
 8008208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800820a:	4b06      	ldr	r3, [pc, #24]	; (8008224 <MX_I2C1_Init+0x50>)
 800820c:	2200      	movs	r2, #0
 800820e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008210:	4804      	ldr	r0, [pc, #16]	; (8008224 <MX_I2C1_Init+0x50>)
 8008212:	f7fa fd2f 	bl	8002c74 <HAL_I2C_Init>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800821c:	f000 fa0c 	bl	8008638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008220:	bf00      	nop
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000104 	.word	0x20000104
 8008228:	40005400 	.word	0x40005400
 800822c:	000186a0 	.word	0x000186a0

08008230 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <MX_I2S3_Init+0x54>)
 8008236:	4a14      	ldr	r2, [pc, #80]	; (8008288 <MX_I2S3_Init+0x58>)
 8008238:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <MX_I2S3_Init+0x54>)
 800823c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008240:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008242:	4b10      	ldr	r3, [pc, #64]	; (8008284 <MX_I2S3_Init+0x54>)
 8008244:	2200      	movs	r2, #0
 8008246:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008248:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <MX_I2S3_Init+0x54>)
 800824a:	2200      	movs	r2, #0
 800824c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800824e:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <MX_I2S3_Init+0x54>)
 8008250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008254:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008256:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <MX_I2S3_Init+0x54>)
 8008258:	4a0c      	ldr	r2, [pc, #48]	; (800828c <MX_I2S3_Init+0x5c>)
 800825a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800825c:	4b09      	ldr	r3, [pc, #36]	; (8008284 <MX_I2S3_Init+0x54>)
 800825e:	2200      	movs	r2, #0
 8008260:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008262:	4b08      	ldr	r3, [pc, #32]	; (8008284 <MX_I2S3_Init+0x54>)
 8008264:	2200      	movs	r2, #0
 8008266:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <MX_I2S3_Init+0x54>)
 800826a:	2200      	movs	r2, #0
 800826c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800826e:	4805      	ldr	r0, [pc, #20]	; (8008284 <MX_I2S3_Init+0x54>)
 8008270:	f7fa fe28 	bl	8002ec4 <HAL_I2S_Init>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800827a:	f000 f9dd 	bl	8008638 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800827e:	bf00      	nop
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000238 	.word	0x20000238
 8008288:	40003c00 	.word	0x40003c00
 800828c:	00017700 	.word	0x00017700

08008290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008294:	4b17      	ldr	r3, [pc, #92]	; (80082f4 <MX_SPI1_Init+0x64>)
 8008296:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <MX_SPI1_Init+0x68>)
 8008298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800829a:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <MX_SPI1_Init+0x64>)
 800829c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80082a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80082a2:	4b14      	ldr	r3, [pc, #80]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80082a8:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80082ae:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80082b4:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80082ba:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80082c8:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80082ce:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80082da:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082dc:	220a      	movs	r2, #10
 80082de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80082e0:	4804      	ldr	r0, [pc, #16]	; (80082f4 <MX_SPI1_Init+0x64>)
 80082e2:	f7fb fffd 	bl	80042e0 <HAL_SPI_Init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80082ec:	f000 f9a4 	bl	8008638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80082f0:	bf00      	nop
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200001a0 	.word	0x200001a0
 80082f8:	40013000 	.word	0x40013000

080082fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08e      	sub	sp, #56	; 0x38
 8008300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	605a      	str	r2, [r3, #4]
 800830c:	609a      	str	r2, [r3, #8]
 800830e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008310:	f107 0320 	add.w	r3, r7, #32
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800831a:	1d3b      	adds	r3, r7, #4
 800831c:	2200      	movs	r2, #0
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	605a      	str	r2, [r3, #4]
 8008322:	609a      	str	r2, [r3, #8]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	611a      	str	r2, [r3, #16]
 8008328:	615a      	str	r2, [r3, #20]
 800832a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800832c:	4b2c      	ldr	r3, [pc, #176]	; (80083e0 <MX_TIM4_Init+0xe4>)
 800832e:	4a2d      	ldr	r2, [pc, #180]	; (80083e4 <MX_TIM4_Init+0xe8>)
 8008330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8008332:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <MX_TIM4_Init+0xe4>)
 8008334:	22a7      	movs	r2, #167	; 0xa7
 8008336:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008338:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <MX_TIM4_Init+0xe4>)
 800833a:	2200      	movs	r2, #0
 800833c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800833e:	4b28      	ldr	r3, [pc, #160]	; (80083e0 <MX_TIM4_Init+0xe4>)
 8008340:	2263      	movs	r2, #99	; 0x63
 8008342:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008344:	4b26      	ldr	r3, [pc, #152]	; (80083e0 <MX_TIM4_Init+0xe4>)
 8008346:	2200      	movs	r2, #0
 8008348:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800834a:	4b25      	ldr	r3, [pc, #148]	; (80083e0 <MX_TIM4_Init+0xe4>)
 800834c:	2280      	movs	r2, #128	; 0x80
 800834e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008350:	4823      	ldr	r0, [pc, #140]	; (80083e0 <MX_TIM4_Init+0xe4>)
 8008352:	f7fc f829 	bl	80043a8 <HAL_TIM_Base_Init>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800835c:	f000 f96c 	bl	8008638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800836a:	4619      	mov	r1, r3
 800836c:	481c      	ldr	r0, [pc, #112]	; (80083e0 <MX_TIM4_Init+0xe4>)
 800836e:	f7fc f97f 	bl	8004670 <HAL_TIM_ConfigClockSource>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8008378:	f000 f95e 	bl	8008638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800837c:	4818      	ldr	r0, [pc, #96]	; (80083e0 <MX_TIM4_Init+0xe4>)
 800837e:	f7fc f83e 	bl	80043fe <HAL_TIM_PWM_Init>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8008388:	f000 f956 	bl	8008638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800838c:	2300      	movs	r3, #0
 800838e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008390:	2300      	movs	r3, #0
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008394:	f107 0320 	add.w	r3, r7, #32
 8008398:	4619      	mov	r1, r3
 800839a:	4811      	ldr	r0, [pc, #68]	; (80083e0 <MX_TIM4_Init+0xe4>)
 800839c:	f7fc fd2f 	bl	8004dfe <HAL_TIMEx_MasterConfigSynchronization>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80083a6:	f000 f947 	bl	8008638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80083aa:	2360      	movs	r3, #96	; 0x60
 80083ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80083ba:	1d3b      	adds	r3, r7, #4
 80083bc:	2208      	movs	r2, #8
 80083be:	4619      	mov	r1, r3
 80083c0:	4807      	ldr	r0, [pc, #28]	; (80083e0 <MX_TIM4_Init+0xe4>)
 80083c2:	f7fc f88f 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80083cc:	f000 f934 	bl	8008638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80083d0:	4803      	ldr	r0, [pc, #12]	; (80083e0 <MX_TIM4_Init+0xe4>)
 80083d2:	f000 fabf 	bl	8008954 <HAL_TIM_MspPostInit>

}
 80083d6:	bf00      	nop
 80083d8:	3738      	adds	r7, #56	; 0x38
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	200000c4 	.word	0x200000c4
 80083e4:	40000800 	.word	0x40000800

080083e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80083ec:	4b11      	ldr	r3, [pc, #68]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 80083ee:	4a12      	ldr	r2, [pc, #72]	; (8008438 <MX_USART2_UART_Init+0x50>)
 80083f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80083f2:	4b10      	ldr	r3, [pc, #64]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 80083f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083fa:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008400:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 8008402:	2200      	movs	r2, #0
 8008404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008406:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 8008408:	2200      	movs	r2, #0
 800840a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800840c:	4b09      	ldr	r3, [pc, #36]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 800840e:	220c      	movs	r2, #12
 8008410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008412:	4b08      	ldr	r3, [pc, #32]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 8008414:	2200      	movs	r2, #0
 8008416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 800841a:	2200      	movs	r2, #0
 800841c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <MX_USART2_UART_Init+0x4c>)
 8008420:	f7fc fd32 	bl	8004e88 <HAL_UART_Init>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800842a:	f000 f905 	bl	8008638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800842e:	bf00      	nop
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	200001f8 	.word	0x200001f8
 8008438:	40004400 	.word	0x40004400

0800843c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	; 0x30
 8008440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008442:	f107 031c 	add.w	r3, r7, #28
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	605a      	str	r2, [r3, #4]
 800844c:	609a      	str	r2, [r3, #8]
 800844e:	60da      	str	r2, [r3, #12]
 8008450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008452:	2300      	movs	r3, #0
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	4b71      	ldr	r3, [pc, #452]	; (800861c <MX_GPIO_Init+0x1e0>)
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	4a70      	ldr	r2, [pc, #448]	; (800861c <MX_GPIO_Init+0x1e0>)
 800845c:	f043 0310 	orr.w	r3, r3, #16
 8008460:	6313      	str	r3, [r2, #48]	; 0x30
 8008462:	4b6e      	ldr	r3, [pc, #440]	; (800861c <MX_GPIO_Init+0x1e0>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	61bb      	str	r3, [r7, #24]
 800846c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	4b6a      	ldr	r3, [pc, #424]	; (800861c <MX_GPIO_Init+0x1e0>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	4a69      	ldr	r2, [pc, #420]	; (800861c <MX_GPIO_Init+0x1e0>)
 8008478:	f043 0304 	orr.w	r3, r3, #4
 800847c:	6313      	str	r3, [r2, #48]	; 0x30
 800847e:	4b67      	ldr	r3, [pc, #412]	; (800861c <MX_GPIO_Init+0x1e0>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	f003 0304 	and.w	r3, r3, #4
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800848a:	2300      	movs	r3, #0
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	4b63      	ldr	r3, [pc, #396]	; (800861c <MX_GPIO_Init+0x1e0>)
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	4a62      	ldr	r2, [pc, #392]	; (800861c <MX_GPIO_Init+0x1e0>)
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	6313      	str	r3, [r2, #48]	; 0x30
 800849a:	4b60      	ldr	r3, [pc, #384]	; (800861c <MX_GPIO_Init+0x1e0>)
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	4b5c      	ldr	r3, [pc, #368]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	4a5b      	ldr	r2, [pc, #364]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084b0:	f043 0301 	orr.w	r3, r3, #1
 80084b4:	6313      	str	r3, [r2, #48]	; 0x30
 80084b6:	4b59      	ldr	r3, [pc, #356]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c2:	2300      	movs	r3, #0
 80084c4:	60bb      	str	r3, [r7, #8]
 80084c6:	4b55      	ldr	r3, [pc, #340]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	4a54      	ldr	r2, [pc, #336]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084cc:	f043 0302 	orr.w	r3, r3, #2
 80084d0:	6313      	str	r3, [r2, #48]	; 0x30
 80084d2:	4b52      	ldr	r3, [pc, #328]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	60bb      	str	r3, [r7, #8]
 80084dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]
 80084e2:	4b4e      	ldr	r3, [pc, #312]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e6:	4a4d      	ldr	r2, [pc, #308]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084e8:	f043 0308 	orr.w	r3, r3, #8
 80084ec:	6313      	str	r3, [r2, #48]	; 0x30
 80084ee:	4b4b      	ldr	r3, [pc, #300]	; (800861c <MX_GPIO_Init+0x1e0>)
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80084fa:	2200      	movs	r2, #0
 80084fc:	2108      	movs	r1, #8
 80084fe:	4848      	ldr	r0, [pc, #288]	; (8008620 <MX_GPIO_Init+0x1e4>)
 8008500:	f7f8 ff38 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008504:	2201      	movs	r2, #1
 8008506:	2101      	movs	r1, #1
 8008508:	4846      	ldr	r0, [pc, #280]	; (8008624 <MX_GPIO_Init+0x1e8>)
 800850a:	f7f8 ff33 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800850e:	2200      	movs	r2, #0
 8008510:	f24b 0110 	movw	r1, #45072	; 0xb010
 8008514:	4844      	ldr	r0, [pc, #272]	; (8008628 <MX_GPIO_Init+0x1ec>)
 8008516:	f7f8 ff2d 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800851a:	2308      	movs	r3, #8
 800851c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800851e:	2301      	movs	r3, #1
 8008520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008522:	2300      	movs	r3, #0
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008526:	2300      	movs	r3, #0
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800852a:	f107 031c 	add.w	r3, r7, #28
 800852e:	4619      	mov	r1, r3
 8008530:	483b      	ldr	r0, [pc, #236]	; (8008620 <MX_GPIO_Init+0x1e4>)
 8008532:	f7f8 fd85 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008536:	2301      	movs	r3, #1
 8008538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800853a:	2301      	movs	r3, #1
 800853c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008542:	2300      	movs	r3, #0
 8008544:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008546:	f107 031c 	add.w	r3, r7, #28
 800854a:	4619      	mov	r1, r3
 800854c:	4835      	ldr	r0, [pc, #212]	; (8008624 <MX_GPIO_Init+0x1e8>)
 800854e:	f7f8 fd77 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008552:	2308      	movs	r3, #8
 8008554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008556:	2302      	movs	r3, #2
 8008558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800855a:	2300      	movs	r3, #0
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800855e:	2300      	movs	r3, #0
 8008560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008562:	2305      	movs	r3, #5
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008566:	f107 031c 	add.w	r3, r7, #28
 800856a:	4619      	mov	r1, r3
 800856c:	482d      	ldr	r0, [pc, #180]	; (8008624 <MX_GPIO_Init+0x1e8>)
 800856e:	f7f8 fd67 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008572:	2301      	movs	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008576:	4b2d      	ldr	r3, [pc, #180]	; (800862c <MX_GPIO_Init+0x1f0>)
 8008578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857a:	2300      	movs	r3, #0
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800857e:	f107 031c 	add.w	r3, r7, #28
 8008582:	4619      	mov	r1, r3
 8008584:	482a      	ldr	r0, [pc, #168]	; (8008630 <MX_GPIO_Init+0x1f4>)
 8008586:	f7f8 fd5b 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800858a:	2304      	movs	r3, #4
 800858c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800858e:	2300      	movs	r3, #0
 8008590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008592:	2300      	movs	r3, #0
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008596:	f107 031c 	add.w	r3, r7, #28
 800859a:	4619      	mov	r1, r3
 800859c:	4825      	ldr	r0, [pc, #148]	; (8008634 <MX_GPIO_Init+0x1f8>)
 800859e:	f7f8 fd4f 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80085a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a8:	2302      	movs	r3, #2
 80085aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085b0:	2300      	movs	r3, #0
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80085b4:	2305      	movs	r3, #5
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80085b8:	f107 031c 	add.w	r3, r7, #28
 80085bc:	4619      	mov	r1, r3
 80085be:	481d      	ldr	r0, [pc, #116]	; (8008634 <MX_GPIO_Init+0x1f8>)
 80085c0:	f7f8 fd3e 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD6_Pin|Audio_RST_Pin;
 80085c4:	f24b 0310 	movw	r3, #45072	; 0xb010
 80085c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ca:	2301      	movs	r3, #1
 80085cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085d2:	2300      	movs	r3, #0
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085d6:	f107 031c 	add.w	r3, r7, #28
 80085da:	4619      	mov	r1, r3
 80085dc:	4812      	ldr	r0, [pc, #72]	; (8008628 <MX_GPIO_Init+0x1ec>)
 80085de:	f7f8 fd2f 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80085e2:	2320      	movs	r3, #32
 80085e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085e6:	2300      	movs	r3, #0
 80085e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80085ee:	f107 031c 	add.w	r3, r7, #28
 80085f2:	4619      	mov	r1, r3
 80085f4:	480c      	ldr	r0, [pc, #48]	; (8008628 <MX_GPIO_Init+0x1ec>)
 80085f6:	f7f8 fd23 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80085fa:	2302      	movs	r3, #2
 80085fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80085fe:	4b0b      	ldr	r3, [pc, #44]	; (800862c <MX_GPIO_Init+0x1f0>)
 8008600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008602:	2300      	movs	r3, #0
 8008604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008606:	f107 031c 	add.w	r3, r7, #28
 800860a:	4619      	mov	r1, r3
 800860c:	4804      	ldr	r0, [pc, #16]	; (8008620 <MX_GPIO_Init+0x1e4>)
 800860e:	f7f8 fd17 	bl	8001040 <HAL_GPIO_Init>

}
 8008612:	bf00      	nop
 8008614:	3730      	adds	r7, #48	; 0x30
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40023800 	.word	0x40023800
 8008620:	40021000 	.word	0x40021000
 8008624:	40020800 	.word	0x40020800
 8008628:	40020c00 	.word	0x40020c00
 800862c:	10120000 	.word	0x10120000
 8008630:	40020000 	.word	0x40020000
 8008634:	40020400 	.word	0x40020400

08008638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800863c:	bf00      	nop
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
	...

08008648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <HAL_MspInit+0x4c>)
 8008654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008656:	4a0f      	ldr	r2, [pc, #60]	; (8008694 <HAL_MspInit+0x4c>)
 8008658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800865c:	6453      	str	r3, [r2, #68]	; 0x44
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <HAL_MspInit+0x4c>)
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800866a:	2300      	movs	r3, #0
 800866c:	603b      	str	r3, [r7, #0]
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <HAL_MspInit+0x4c>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	4a08      	ldr	r2, [pc, #32]	; (8008694 <HAL_MspInit+0x4c>)
 8008674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008678:	6413      	str	r3, [r2, #64]	; 0x40
 800867a:	4b06      	ldr	r3, [pc, #24]	; (8008694 <HAL_MspInit+0x4c>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008686:	2007      	movs	r0, #7
 8008688:	f7f8 fc98 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	40023800 	.word	0x40023800

08008698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08a      	sub	sp, #40	; 0x28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086a0:	f107 0314 	add.w	r3, r7, #20
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	609a      	str	r2, [r3, #8]
 80086ac:	60da      	str	r2, [r3, #12]
 80086ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a17      	ldr	r2, [pc, #92]	; (8008714 <HAL_ADC_MspInit+0x7c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d127      	bne.n	800870a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80086ba:	2300      	movs	r3, #0
 80086bc:	613b      	str	r3, [r7, #16]
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <HAL_ADC_MspInit+0x80>)
 80086c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c2:	4a15      	ldr	r2, [pc, #84]	; (8008718 <HAL_ADC_MspInit+0x80>)
 80086c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c8:	6453      	str	r3, [r2, #68]	; 0x44
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <HAL_ADC_MspInit+0x80>)
 80086cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d2:	613b      	str	r3, [r7, #16]
 80086d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <HAL_ADC_MspInit+0x80>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	4a0e      	ldr	r2, [pc, #56]	; (8008718 <HAL_ADC_MspInit+0x80>)
 80086e0:	f043 0304 	orr.w	r3, r3, #4
 80086e4:	6313      	str	r3, [r2, #48]	; 0x30
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <HAL_ADC_MspInit+0x80>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80086f2:	2302      	movs	r3, #2
 80086f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086f6:	2303      	movs	r3, #3
 80086f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4619      	mov	r1, r3
 8008704:	4805      	ldr	r0, [pc, #20]	; (800871c <HAL_ADC_MspInit+0x84>)
 8008706:	f7f8 fc9b 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800870a:	bf00      	nop
 800870c:	3728      	adds	r7, #40	; 0x28
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40012000 	.word	0x40012000
 8008718:	40023800 	.word	0x40023800
 800871c:	40020800 	.word	0x40020800

08008720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	; 0x28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008728:	f107 0314 	add.w	r3, r7, #20
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	609a      	str	r2, [r3, #8]
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <HAL_I2C_MspInit+0x84>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d12c      	bne.n	800879c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <HAL_I2C_MspInit+0x88>)
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <HAL_I2C_MspInit+0x88>)
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	6313      	str	r3, [r2, #48]	; 0x30
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <HAL_I2C_MspInit+0x88>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800875e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008764:	2312      	movs	r3, #18
 8008766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008768:	2301      	movs	r3, #1
 800876a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800876c:	2300      	movs	r3, #0
 800876e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008770:	2304      	movs	r3, #4
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008774:	f107 0314 	add.w	r3, r7, #20
 8008778:	4619      	mov	r1, r3
 800877a:	480c      	ldr	r0, [pc, #48]	; (80087ac <HAL_I2C_MspInit+0x8c>)
 800877c:	f7f8 fc60 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <HAL_I2C_MspInit+0x88>)
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	4a07      	ldr	r2, [pc, #28]	; (80087a8 <HAL_I2C_MspInit+0x88>)
 800878a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800878e:	6413      	str	r3, [r2, #64]	; 0x40
 8008790:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <HAL_I2C_MspInit+0x88>)
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800879c:	bf00      	nop
 800879e:	3728      	adds	r7, #40	; 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40005400 	.word	0x40005400
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40020400 	.word	0x40020400

080087b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b8:	f107 0314 	add.w	r3, r7, #20
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	605a      	str	r2, [r3, #4]
 80087c2:	609a      	str	r2, [r3, #8]
 80087c4:	60da      	str	r2, [r3, #12]
 80087c6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a28      	ldr	r2, [pc, #160]	; (8008870 <HAL_I2S_MspInit+0xc0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d14a      	bne.n	8008868 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	4b27      	ldr	r3, [pc, #156]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	4a26      	ldr	r2, [pc, #152]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 80087dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e0:	6413      	str	r3, [r2, #64]	; 0x40
 80087e2:	4b24      	ldr	r3, [pc, #144]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087ea:	613b      	str	r3, [r7, #16]
 80087ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	4b20      	ldr	r3, [pc, #128]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	4a1f      	ldr	r2, [pc, #124]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	6313      	str	r3, [r2, #48]	; 0x30
 80087fe:	4b1d      	ldr	r3, [pc, #116]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800880a:	2300      	movs	r3, #0
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	4b19      	ldr	r3, [pc, #100]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	4a18      	ldr	r2, [pc, #96]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 8008814:	f043 0304 	orr.w	r3, r3, #4
 8008818:	6313      	str	r3, [r2, #48]	; 0x30
 800881a:	4b16      	ldr	r3, [pc, #88]	; (8008874 <HAL_I2S_MspInit+0xc4>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	60bb      	str	r3, [r7, #8]
 8008824:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008826:	2310      	movs	r3, #16
 8008828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800882a:	2302      	movs	r3, #2
 800882c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800882e:	2300      	movs	r3, #0
 8008830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008832:	2300      	movs	r3, #0
 8008834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008836:	2306      	movs	r3, #6
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800883a:	f107 0314 	add.w	r3, r7, #20
 800883e:	4619      	mov	r1, r3
 8008840:	480d      	ldr	r0, [pc, #52]	; (8008878 <HAL_I2S_MspInit+0xc8>)
 8008842:	f7f8 fbfd 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008846:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800884a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800884c:	2302      	movs	r3, #2
 800884e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008854:	2300      	movs	r3, #0
 8008856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008858:	2306      	movs	r3, #6
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	4619      	mov	r1, r3
 8008862:	4806      	ldr	r0, [pc, #24]	; (800887c <HAL_I2S_MspInit+0xcc>)
 8008864:	f7f8 fbec 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008868:	bf00      	nop
 800886a:	3728      	adds	r7, #40	; 0x28
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	40003c00 	.word	0x40003c00
 8008874:	40023800 	.word	0x40023800
 8008878:	40020000 	.word	0x40020000
 800887c:	40020800 	.word	0x40020800

08008880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	; 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	60da      	str	r2, [r3, #12]
 8008896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a19      	ldr	r2, [pc, #100]	; (8008904 <HAL_SPI_MspInit+0x84>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d12b      	bne.n	80088fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	4b18      	ldr	r3, [pc, #96]	; (8008908 <HAL_SPI_MspInit+0x88>)
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	4a17      	ldr	r2, [pc, #92]	; (8008908 <HAL_SPI_MspInit+0x88>)
 80088ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088b0:	6453      	str	r3, [r2, #68]	; 0x44
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <HAL_SPI_MspInit+0x88>)
 80088b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	4b11      	ldr	r3, [pc, #68]	; (8008908 <HAL_SPI_MspInit+0x88>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	4a10      	ldr	r2, [pc, #64]	; (8008908 <HAL_SPI_MspInit+0x88>)
 80088c8:	f043 0301 	orr.w	r3, r3, #1
 80088cc:	6313      	str	r3, [r2, #48]	; 0x30
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <HAL_SPI_MspInit+0x88>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80088da:	23e0      	movs	r3, #224	; 0xe0
 80088dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088de:	2302      	movs	r3, #2
 80088e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e6:	2300      	movs	r3, #0
 80088e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80088ea:	2305      	movs	r3, #5
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ee:	f107 0314 	add.w	r3, r7, #20
 80088f2:	4619      	mov	r1, r3
 80088f4:	4805      	ldr	r0, [pc, #20]	; (800890c <HAL_SPI_MspInit+0x8c>)
 80088f6:	f7f8 fba3 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80088fa:	bf00      	nop
 80088fc:	3728      	adds	r7, #40	; 0x28
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40013000 	.word	0x40013000
 8008908:	40023800 	.word	0x40023800
 800890c:	40020000 	.word	0x40020000

08008910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a0b      	ldr	r2, [pc, #44]	; (800894c <HAL_TIM_Base_MspInit+0x3c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d10d      	bne.n	800893e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <HAL_TIM_Base_MspInit+0x40>)
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	4a09      	ldr	r2, [pc, #36]	; (8008950 <HAL_TIM_Base_MspInit+0x40>)
 800892c:	f043 0304 	orr.w	r3, r3, #4
 8008930:	6413      	str	r3, [r2, #64]	; 0x40
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <HAL_TIM_Base_MspInit+0x40>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800893e:	bf00      	nop
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40000800 	.word	0x40000800
 8008950:	40023800 	.word	0x40023800

08008954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	609a      	str	r2, [r3, #8]
 8008968:	60da      	str	r2, [r3, #12]
 800896a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a12      	ldr	r2, [pc, #72]	; (80089bc <HAL_TIM_MspPostInit+0x68>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d11e      	bne.n	80089b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	4b11      	ldr	r3, [pc, #68]	; (80089c0 <HAL_TIM_MspPostInit+0x6c>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	4a10      	ldr	r2, [pc, #64]	; (80089c0 <HAL_TIM_MspPostInit+0x6c>)
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	6313      	str	r3, [r2, #48]	; 0x30
 8008986:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <HAL_TIM_MspPostInit+0x6c>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008998:	2302      	movs	r3, #2
 800899a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80089a4:	2302      	movs	r3, #2
 80089a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089a8:	f107 030c 	add.w	r3, r7, #12
 80089ac:	4619      	mov	r1, r3
 80089ae:	4805      	ldr	r0, [pc, #20]	; (80089c4 <HAL_TIM_MspPostInit+0x70>)
 80089b0:	f7f8 fb46 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80089b4:	bf00      	nop
 80089b6:	3720      	adds	r7, #32
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40000800 	.word	0x40000800
 80089c0:	40023800 	.word	0x40023800
 80089c4:	40020c00 	.word	0x40020c00

080089c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	; 0x28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	609a      	str	r2, [r3, #8]
 80089dc:	60da      	str	r2, [r3, #12]
 80089de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a19      	ldr	r2, [pc, #100]	; (8008a4c <HAL_UART_MspInit+0x84>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d12b      	bne.n	8008a42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80089ea:	2300      	movs	r3, #0
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	4b18      	ldr	r3, [pc, #96]	; (8008a50 <HAL_UART_MspInit+0x88>)
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	4a17      	ldr	r2, [pc, #92]	; (8008a50 <HAL_UART_MspInit+0x88>)
 80089f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f8:	6413      	str	r3, [r2, #64]	; 0x40
 80089fa:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <HAL_UART_MspInit+0x88>)
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	4b11      	ldr	r3, [pc, #68]	; (8008a50 <HAL_UART_MspInit+0x88>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	4a10      	ldr	r2, [pc, #64]	; (8008a50 <HAL_UART_MspInit+0x88>)
 8008a10:	f043 0301 	orr.w	r3, r3, #1
 8008a14:	6313      	str	r3, [r2, #48]	; 0x30
 8008a16:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <HAL_UART_MspInit+0x88>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008a22:	230c      	movs	r3, #12
 8008a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a26:	2302      	movs	r3, #2
 8008a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008a32:	2307      	movs	r3, #7
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a36:	f107 0314 	add.w	r3, r7, #20
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4805      	ldr	r0, [pc, #20]	; (8008a54 <HAL_UART_MspInit+0x8c>)
 8008a3e:	f7f8 faff 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008a42:	bf00      	nop
 8008a44:	3728      	adds	r7, #40	; 0x28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	40004400 	.word	0x40004400
 8008a50:	40023800 	.word	0x40023800
 8008a54:	40020000 	.word	0x40020000

08008a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008a5c:	bf00      	nop
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a66:	b480      	push	{r7}
 8008a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a6a:	e7fe      	b.n	8008a6a <HardFault_Handler+0x4>

08008a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a70:	e7fe      	b.n	8008a70 <MemManage_Handler+0x4>

08008a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a72:	b480      	push	{r7}
 8008a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a76:	e7fe      	b.n	8008a76 <BusFault_Handler+0x4>

08008a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a7c:	e7fe      	b.n	8008a7c <UsageFault_Handler+0x4>

08008a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a82:	bf00      	nop
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a90:	bf00      	nop
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a9e:	bf00      	nop
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008aac:	f7f7 fdba 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ab0:	bf00      	nop
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008ab8:	4802      	ldr	r0, [pc, #8]	; (8008ac4 <OTG_FS_IRQHandler+0x10>)
 8008aba:	f7f8 fef9 	bl	80018b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008abe:	bf00      	nop
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	2000064c 	.word	0x2000064c

08008ac8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008ad0:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <_sbrk+0x50>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <_sbrk+0x16>
		heap_end = &end;
 8008ad8:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <_sbrk+0x50>)
 8008ada:	4a10      	ldr	r2, [pc, #64]	; (8008b1c <_sbrk+0x54>)
 8008adc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008ade:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <_sbrk+0x50>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <_sbrk+0x50>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4413      	add	r3, r2
 8008aec:	466a      	mov	r2, sp
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d907      	bls.n	8008b02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008af2:	f000 fb7d 	bl	80091f0 <__errno>
 8008af6:	4602      	mov	r2, r0
 8008af8:	230c      	movs	r3, #12
 8008afa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008afc:	f04f 33ff 	mov.w	r3, #4294967295
 8008b00:	e006      	b.n	8008b10 <_sbrk+0x48>
	}

	heap_end += incr;
 8008b02:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <_sbrk+0x50>)
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4413      	add	r3, r2
 8008b0a:	4a03      	ldr	r2, [pc, #12]	; (8008b18 <_sbrk+0x50>)
 8008b0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	200000b0 	.word	0x200000b0
 8008b1c:	20000918 	.word	0x20000918

08008b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b24:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <SystemInit+0x60>)
 8008b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2a:	4a15      	ldr	r2, [pc, #84]	; (8008b80 <SystemInit+0x60>)
 8008b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008b34:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <SystemInit+0x64>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a12      	ldr	r2, [pc, #72]	; (8008b84 <SystemInit+0x64>)
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <SystemInit+0x64>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <SystemInit+0x64>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a0e      	ldr	r2, [pc, #56]	; (8008b84 <SystemInit+0x64>)
 8008b4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <SystemInit+0x64>)
 8008b58:	4a0b      	ldr	r2, [pc, #44]	; (8008b88 <SystemInit+0x68>)
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008b5c:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <SystemInit+0x64>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a08      	ldr	r2, [pc, #32]	; (8008b84 <SystemInit+0x64>)
 8008b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <SystemInit+0x64>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <SystemInit+0x60>)
 8008b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b74:	609a      	str	r2, [r3, #8]
#endif
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	e000ed00 	.word	0xe000ed00
 8008b84:	40023800 	.word	0x40023800
 8008b88:	24003010 	.word	0x24003010

08008b8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b90:	2201      	movs	r2, #1
 8008b92:	490e      	ldr	r1, [pc, #56]	; (8008bcc <MX_USB_HOST_Init+0x40>)
 8008b94:	480e      	ldr	r0, [pc, #56]	; (8008bd0 <MX_USB_HOST_Init+0x44>)
 8008b96:	f7fd ff89 	bl	8006aac <USBH_Init>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ba0:	f7ff fd4a 	bl	8008638 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008ba4:	490b      	ldr	r1, [pc, #44]	; (8008bd4 <MX_USB_HOST_Init+0x48>)
 8008ba6:	480a      	ldr	r0, [pc, #40]	; (8008bd0 <MX_USB_HOST_Init+0x44>)
 8008ba8:	f7fd fff3 	bl	8006b92 <USBH_RegisterClass>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008bb2:	f7ff fd41 	bl	8008638 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008bb6:	4806      	ldr	r0, [pc, #24]	; (8008bd0 <MX_USB_HOST_Init+0x44>)
 8008bb8:	f7fe f878 	bl	8006cac <USBH_Start>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008bc2:	f7ff fd39 	bl	8008638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008bc6:	bf00      	nop
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	20000280 	.word	0x20000280
 8008bd4:	20000008 	.word	0x20000008

08008bd8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008bdc:	4802      	ldr	r0, [pc, #8]	; (8008be8 <MX_USB_HOST_Process+0x10>)
 8008bde:	f7fe f875 	bl	8006ccc <USBH_Process>
}
 8008be2:	bf00      	nop
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20000280 	.word	0x20000280

08008bec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008bf8:	78fb      	ldrb	r3, [r7, #3]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d819      	bhi.n	8008c34 <USBH_UserProcess+0x48>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <USBH_UserProcess+0x1c>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	08008c25 	.word	0x08008c25
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c1d 	.word	0x08008c1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c1c:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <USBH_UserProcess+0x58>)
 8008c1e:	2203      	movs	r2, #3
 8008c20:	701a      	strb	r2, [r3, #0]
  break;
 8008c22:	e008      	b.n	8008c36 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <USBH_UserProcess+0x58>)
 8008c26:	2202      	movs	r2, #2
 8008c28:	701a      	strb	r2, [r3, #0]
  break;
 8008c2a:	e004      	b.n	8008c36 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c2c:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <USBH_UserProcess+0x58>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	701a      	strb	r2, [r3, #0]
  break;
 8008c32:	e000      	b.n	8008c36 <USBH_UserProcess+0x4a>

  default:
  break;
 8008c34:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	200000b4 	.word	0x200000b4

08008c48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08a      	sub	sp, #40	; 0x28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c50:	f107 0314 	add.w	r3, r7, #20
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	605a      	str	r2, [r3, #4]
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	60da      	str	r2, [r3, #12]
 8008c5e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c68:	d147      	bne.n	8008cfa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	4b25      	ldr	r3, [pc, #148]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	4a24      	ldr	r2, [pc, #144]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008c74:	f043 0301 	orr.w	r3, r3, #1
 8008c78:	6313      	str	r3, [r2, #48]	; 0x30
 8008c7a:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c94:	f107 0314 	add.w	r3, r7, #20
 8008c98:	4619      	mov	r1, r3
 8008c9a:	481b      	ldr	r0, [pc, #108]	; (8008d08 <HAL_HCD_MspInit+0xc0>)
 8008c9c:	f7f8 f9d0 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ca0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cb2:	230a      	movs	r3, #10
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4812      	ldr	r0, [pc, #72]	; (8008d08 <HAL_HCD_MspInit+0xc0>)
 8008cbe:	f7f8 f9bf 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cc2:	4b10      	ldr	r3, [pc, #64]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc6:	4a0f      	ldr	r2, [pc, #60]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ccc:	6353      	str	r3, [r2, #52]	; 0x34
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd6:	4a0b      	ldr	r2, [pc, #44]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <HAL_HCD_MspInit+0xbc>)
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cea:	2200      	movs	r2, #0
 8008cec:	2100      	movs	r1, #0
 8008cee:	2043      	movs	r0, #67	; 0x43
 8008cf0:	f7f8 f96f 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cf4:	2043      	movs	r0, #67	; 0x43
 8008cf6:	f7f8 f988 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cfa:	bf00      	nop
 8008cfc:	3728      	adds	r7, #40	; 0x28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40023800 	.word	0x40023800
 8008d08:	40020000 	.word	0x40020000

08008d0c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe fa87 	bl	800722e <USBH_LL_IncTimer>
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe facc 	bl	80072d4 <USBH_LL_Connect>
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fae4 	bl	8007320 <USBH_LL_Disconnect>
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fa79 	bl	8007282 <USBH_LL_PortEnabled>
} 
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fa79 	bl	800729e <USBH_LL_PortDisabled>
} 
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d12a      	bne.n	8008e1c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008dc6:	4a18      	ldr	r2, [pc, #96]	; (8008e28 <USBH_LL_Init+0x74>)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <USBH_LL_Init+0x74>)
 8008dd2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dd6:	4b14      	ldr	r3, [pc, #80]	; (8008e28 <USBH_LL_Init+0x74>)
 8008dd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ddc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008dde:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <USBH_LL_Init+0x74>)
 8008de0:	2208      	movs	r2, #8
 8008de2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008de4:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <USBH_LL_Init+0x74>)
 8008de6:	2201      	movs	r2, #1
 8008de8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dea:	4b0f      	ldr	r3, [pc, #60]	; (8008e28 <USBH_LL_Init+0x74>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008df0:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <USBH_LL_Init+0x74>)
 8008df2:	2202      	movs	r2, #2
 8008df4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008df6:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <USBH_LL_Init+0x74>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008dfc:	480a      	ldr	r0, [pc, #40]	; (8008e28 <USBH_LL_Init+0x74>)
 8008dfe:	f7f8 fad2 	bl	80013a6 <HAL_HCD_Init>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008e08:	f7ff fc16 	bl	8008638 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008e0c:	4806      	ldr	r0, [pc, #24]	; (8008e28 <USBH_LL_Init+0x74>)
 8008e0e:	f7f8 fecd 	bl	8001bac <HAL_HCD_GetCurrentFrame>
 8008e12:	4603      	mov	r3, r0
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7fe f9fa 	bl	8007210 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	2000064c 	.word	0x2000064c

08008e2c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7f8 fe3a 	bl	8001abc <HAL_HCD_Start>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 f95c 	bl	800910c <USBH_Get_USB_Status>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f8 fe42 	bl	8001b02 <HAL_HCD_Stop>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f941 	bl	800910c <USBH_Get_USB_Status>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7f8 fe8c 	bl	8001bc8 <HAL_HCD_GetCurrentSpeed>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d007      	beq.n	8008ec6 <USBH_LL_GetSpeed+0x2e>
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d302      	bcc.n	8008ec0 <USBH_LL_GetSpeed+0x28>
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d006      	beq.n	8008ecc <USBH_LL_GetSpeed+0x34>
 8008ebe:	e008      	b.n	8008ed2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec4:	e008      	b.n	8008ed8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eca:	e005      	b.n	8008ed8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ecc:	2302      	movs	r3, #2
 8008ece:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed0:	e002      	b.n	8008ed8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed6:	bf00      	nop
  }
  return  speed;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7f8 fe1f 	bl	8001b3c <HAL_HCD_ResetPort>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f901 	bl	800910c <USBH_Get_USB_Status>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f8 fe27 	bl	8001b82 <HAL_HCD_HC_GetXferCount>
 8008f34:	4603      	mov	r3, r0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f3e:	b590      	push	{r4, r7, lr}
 8008f40:	b089      	sub	sp, #36	; 0x24
 8008f42:	af04      	add	r7, sp, #16
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	4608      	mov	r0, r1
 8008f48:	4611      	mov	r1, r2
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	70fb      	strb	r3, [r7, #3]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70bb      	strb	r3, [r7, #2]
 8008f54:	4613      	mov	r3, r2
 8008f56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008f66:	787c      	ldrb	r4, [r7, #1]
 8008f68:	78ba      	ldrb	r2, [r7, #2]
 8008f6a:	78f9      	ldrb	r1, [r7, #3]
 8008f6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f6e:	9302      	str	r3, [sp, #8]
 8008f70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	f7f8 fa74 	bl	800146a <HAL_HCD_HC_Init>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 f8bf 	bl	800910c <USBH_Get_USB_Status>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd90      	pop	{r4, r7, pc}

08008f9c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fb6:	78fa      	ldrb	r2, [r7, #3]
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7f8 faed 	bl	800159a <HAL_HCD_HC_Halt>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 f8a0 	bl	800910c <USBH_Get_USB_Status>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008fda:	b590      	push	{r4, r7, lr}
 8008fdc:	b089      	sub	sp, #36	; 0x24
 8008fde:	af04      	add	r7, sp, #16
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4603      	mov	r3, r0
 8008fea:	70fb      	strb	r3, [r7, #3]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70bb      	strb	r3, [r7, #2]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009002:	787c      	ldrb	r4, [r7, #1]
 8009004:	78ba      	ldrb	r2, [r7, #2]
 8009006:	78f9      	ldrb	r1, [r7, #3]
 8009008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800900c:	9303      	str	r3, [sp, #12]
 800900e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009010:	9302      	str	r3, [sp, #8]
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	4623      	mov	r3, r4
 800901e:	f7f8 fadf 	bl	80015e0 <HAL_HCD_HC_SubmitRequest>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f86f 	bl	800910c <USBH_Get_USB_Status>
 800902e:	4603      	mov	r3, r0
 8009030:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009032:	7bbb      	ldrb	r3, [r7, #14]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	bd90      	pop	{r4, r7, pc}

0800903c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f7f8 fd80 	bl	8001b58 <HAL_HCD_HC_GetURBState>
 8009058:	4603      	mov	r3, r0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	460b      	mov	r3, r1
 800906c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009074:	2b01      	cmp	r3, #1
 8009076:	d103      	bne.n	8009080 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 f872 	bl	8009164 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009080:	20c8      	movs	r0, #200	; 0xc8
 8009082:	f7f7 faef 	bl	8000664 <HAL_Delay>
  return USBH_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
 800909c:	4613      	mov	r3, r2
 800909e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	440b      	add	r3, r1
 80090b6:	333b      	adds	r3, #59	; 0x3b
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80090be:	78fa      	ldrb	r2, [r7, #3]
 80090c0:	68f9      	ldr	r1, [r7, #12]
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	00db      	lsls	r3, r3, #3
 80090ca:	440b      	add	r3, r1
 80090cc:	3350      	adds	r3, #80	; 0x50
 80090ce:	78ba      	ldrb	r2, [r7, #2]
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	e009      	b.n	80090e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80090d4:	78fa      	ldrb	r2, [r7, #3]
 80090d6:	68f9      	ldr	r1, [r7, #12]
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	440b      	add	r3, r1
 80090e2:	3351      	adds	r3, #81	; 0x51
 80090e4:	78ba      	ldrb	r2, [r7, #2]
 80090e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7f7 fab0 	bl	8000664 <HAL_Delay>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d817      	bhi.n	8009150 <USBH_Get_USB_Status+0x44>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <USBH_Get_USB_Status+0x1c>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	08009139 	.word	0x08009139
 800912c:	0800913f 	.word	0x0800913f
 8009130:	08009145 	.word	0x08009145
 8009134:	0800914b 	.word	0x0800914b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
    break;
 800913c:	e00b      	b.n	8009156 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800913e:	2302      	movs	r3, #2
 8009140:	73fb      	strb	r3, [r7, #15]
    break;
 8009142:	e008      	b.n	8009156 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
    break;
 8009148:	e005      	b.n	8009156 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800914a:	2302      	movs	r3, #2
 800914c:	73fb      	strb	r3, [r7, #15]
    break;
 800914e:	e002      	b.n	8009156 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009150:	2302      	movs	r3, #2
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	bf00      	nop
  }
  return usb_status;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
 800917c:	e001      	b.n	8009182 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	461a      	mov	r2, r3
 8009186:	2101      	movs	r1, #1
 8009188:	4803      	ldr	r0, [pc, #12]	; (8009198 <MX_DriverVbusFS+0x34>)
 800918a:	f7f8 f8f3 	bl	8001374 <HAL_GPIO_WritePin>
}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	40020800 	.word	0x40020800

0800919c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800919c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80091d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80091a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80091a2:	e003      	b.n	80091ac <LoopCopyDataInit>

080091a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80091a4:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80091a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80091a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80091aa:	3104      	adds	r1, #4

080091ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80091ac:	480b      	ldr	r0, [pc, #44]	; (80091dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80091b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80091b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80091b4:	d3f6      	bcc.n	80091a4 <CopyDataInit>
  ldr  r2, =_sbss
 80091b6:	4a0b      	ldr	r2, [pc, #44]	; (80091e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80091b8:	e002      	b.n	80091c0 <LoopFillZerobss>

080091ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80091ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80091bc:	f842 3b04 	str.w	r3, [r2], #4

080091c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80091c0:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80091c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80091c4:	d3f9      	bcc.n	80091ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80091c6:	f7ff fcab 	bl	8008b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091ca:	f000 f817 	bl	80091fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091ce:	f7fe feab 	bl	8007f28 <main>
  bx  lr    
 80091d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80091d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80091d8:	08009b00 	.word	0x08009b00
  ldr  r0, =_sdata
 80091dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80091e0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80091e4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80091e8:	20000914 	.word	0x20000914

080091ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80091ec:	e7fe      	b.n	80091ec <ADC_IRQHandler>
	...

080091f0 <__errno>:
 80091f0:	4b01      	ldr	r3, [pc, #4]	; (80091f8 <__errno+0x8>)
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	2000002c 	.word	0x2000002c

080091fc <__libc_init_array>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	4e0d      	ldr	r6, [pc, #52]	; (8009234 <__libc_init_array+0x38>)
 8009200:	4c0d      	ldr	r4, [pc, #52]	; (8009238 <__libc_init_array+0x3c>)
 8009202:	1ba4      	subs	r4, r4, r6
 8009204:	10a4      	asrs	r4, r4, #2
 8009206:	2500      	movs	r5, #0
 8009208:	42a5      	cmp	r5, r4
 800920a:	d109      	bne.n	8009220 <__libc_init_array+0x24>
 800920c:	4e0b      	ldr	r6, [pc, #44]	; (800923c <__libc_init_array+0x40>)
 800920e:	4c0c      	ldr	r4, [pc, #48]	; (8009240 <__libc_init_array+0x44>)
 8009210:	f000 fc36 	bl	8009a80 <_init>
 8009214:	1ba4      	subs	r4, r4, r6
 8009216:	10a4      	asrs	r4, r4, #2
 8009218:	2500      	movs	r5, #0
 800921a:	42a5      	cmp	r5, r4
 800921c:	d105      	bne.n	800922a <__libc_init_array+0x2e>
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009224:	4798      	blx	r3
 8009226:	3501      	adds	r5, #1
 8009228:	e7ee      	b.n	8009208 <__libc_init_array+0xc>
 800922a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800922e:	4798      	blx	r3
 8009230:	3501      	adds	r5, #1
 8009232:	e7f2      	b.n	800921a <__libc_init_array+0x1e>
 8009234:	08009af8 	.word	0x08009af8
 8009238:	08009af8 	.word	0x08009af8
 800923c:	08009af8 	.word	0x08009af8
 8009240:	08009afc 	.word	0x08009afc

08009244 <malloc>:
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <malloc+0xc>)
 8009246:	4601      	mov	r1, r0
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f000 b861 	b.w	8009310 <_malloc_r>
 800924e:	bf00      	nop
 8009250:	2000002c 	.word	0x2000002c

08009254 <free>:
 8009254:	4b02      	ldr	r3, [pc, #8]	; (8009260 <free+0xc>)
 8009256:	4601      	mov	r1, r0
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	f000 b80b 	b.w	8009274 <_free_r>
 800925e:	bf00      	nop
 8009260:	2000002c 	.word	0x2000002c

08009264 <memset>:
 8009264:	4402      	add	r2, r0
 8009266:	4603      	mov	r3, r0
 8009268:	4293      	cmp	r3, r2
 800926a:	d100      	bne.n	800926e <memset+0xa>
 800926c:	4770      	bx	lr
 800926e:	f803 1b01 	strb.w	r1, [r3], #1
 8009272:	e7f9      	b.n	8009268 <memset+0x4>

08009274 <_free_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4605      	mov	r5, r0
 8009278:	2900      	cmp	r1, #0
 800927a:	d045      	beq.n	8009308 <_free_r+0x94>
 800927c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009280:	1f0c      	subs	r4, r1, #4
 8009282:	2b00      	cmp	r3, #0
 8009284:	bfb8      	it	lt
 8009286:	18e4      	addlt	r4, r4, r3
 8009288:	f000 f8cc 	bl	8009424 <__malloc_lock>
 800928c:	4a1f      	ldr	r2, [pc, #124]	; (800930c <_free_r+0x98>)
 800928e:	6813      	ldr	r3, [r2, #0]
 8009290:	4610      	mov	r0, r2
 8009292:	b933      	cbnz	r3, 80092a2 <_free_r+0x2e>
 8009294:	6063      	str	r3, [r4, #4]
 8009296:	6014      	str	r4, [r2, #0]
 8009298:	4628      	mov	r0, r5
 800929a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929e:	f000 b8c2 	b.w	8009426 <__malloc_unlock>
 80092a2:	42a3      	cmp	r3, r4
 80092a4:	d90c      	bls.n	80092c0 <_free_r+0x4c>
 80092a6:	6821      	ldr	r1, [r4, #0]
 80092a8:	1862      	adds	r2, r4, r1
 80092aa:	4293      	cmp	r3, r2
 80092ac:	bf04      	itt	eq
 80092ae:	681a      	ldreq	r2, [r3, #0]
 80092b0:	685b      	ldreq	r3, [r3, #4]
 80092b2:	6063      	str	r3, [r4, #4]
 80092b4:	bf04      	itt	eq
 80092b6:	1852      	addeq	r2, r2, r1
 80092b8:	6022      	streq	r2, [r4, #0]
 80092ba:	6004      	str	r4, [r0, #0]
 80092bc:	e7ec      	b.n	8009298 <_free_r+0x24>
 80092be:	4613      	mov	r3, r2
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	b10a      	cbz	r2, 80092c8 <_free_r+0x54>
 80092c4:	42a2      	cmp	r2, r4
 80092c6:	d9fa      	bls.n	80092be <_free_r+0x4a>
 80092c8:	6819      	ldr	r1, [r3, #0]
 80092ca:	1858      	adds	r0, r3, r1
 80092cc:	42a0      	cmp	r0, r4
 80092ce:	d10b      	bne.n	80092e8 <_free_r+0x74>
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	4401      	add	r1, r0
 80092d4:	1858      	adds	r0, r3, r1
 80092d6:	4282      	cmp	r2, r0
 80092d8:	6019      	str	r1, [r3, #0]
 80092da:	d1dd      	bne.n	8009298 <_free_r+0x24>
 80092dc:	6810      	ldr	r0, [r2, #0]
 80092de:	6852      	ldr	r2, [r2, #4]
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	4401      	add	r1, r0
 80092e4:	6019      	str	r1, [r3, #0]
 80092e6:	e7d7      	b.n	8009298 <_free_r+0x24>
 80092e8:	d902      	bls.n	80092f0 <_free_r+0x7c>
 80092ea:	230c      	movs	r3, #12
 80092ec:	602b      	str	r3, [r5, #0]
 80092ee:	e7d3      	b.n	8009298 <_free_r+0x24>
 80092f0:	6820      	ldr	r0, [r4, #0]
 80092f2:	1821      	adds	r1, r4, r0
 80092f4:	428a      	cmp	r2, r1
 80092f6:	bf04      	itt	eq
 80092f8:	6811      	ldreq	r1, [r2, #0]
 80092fa:	6852      	ldreq	r2, [r2, #4]
 80092fc:	6062      	str	r2, [r4, #4]
 80092fe:	bf04      	itt	eq
 8009300:	1809      	addeq	r1, r1, r0
 8009302:	6021      	streq	r1, [r4, #0]
 8009304:	605c      	str	r4, [r3, #4]
 8009306:	e7c7      	b.n	8009298 <_free_r+0x24>
 8009308:	bd38      	pop	{r3, r4, r5, pc}
 800930a:	bf00      	nop
 800930c:	200000b8 	.word	0x200000b8

08009310 <_malloc_r>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	1ccd      	adds	r5, r1, #3
 8009314:	f025 0503 	bic.w	r5, r5, #3
 8009318:	3508      	adds	r5, #8
 800931a:	2d0c      	cmp	r5, #12
 800931c:	bf38      	it	cc
 800931e:	250c      	movcc	r5, #12
 8009320:	2d00      	cmp	r5, #0
 8009322:	4606      	mov	r6, r0
 8009324:	db01      	blt.n	800932a <_malloc_r+0x1a>
 8009326:	42a9      	cmp	r1, r5
 8009328:	d903      	bls.n	8009332 <_malloc_r+0x22>
 800932a:	230c      	movs	r3, #12
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	2000      	movs	r0, #0
 8009330:	bd70      	pop	{r4, r5, r6, pc}
 8009332:	f000 f877 	bl	8009424 <__malloc_lock>
 8009336:	4a21      	ldr	r2, [pc, #132]	; (80093bc <_malloc_r+0xac>)
 8009338:	6814      	ldr	r4, [r2, #0]
 800933a:	4621      	mov	r1, r4
 800933c:	b991      	cbnz	r1, 8009364 <_malloc_r+0x54>
 800933e:	4c20      	ldr	r4, [pc, #128]	; (80093c0 <_malloc_r+0xb0>)
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	b91b      	cbnz	r3, 800934c <_malloc_r+0x3c>
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f83d 	bl	80093c4 <_sbrk_r>
 800934a:	6020      	str	r0, [r4, #0]
 800934c:	4629      	mov	r1, r5
 800934e:	4630      	mov	r0, r6
 8009350:	f000 f838 	bl	80093c4 <_sbrk_r>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d124      	bne.n	80093a2 <_malloc_r+0x92>
 8009358:	230c      	movs	r3, #12
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	4630      	mov	r0, r6
 800935e:	f000 f862 	bl	8009426 <__malloc_unlock>
 8009362:	e7e4      	b.n	800932e <_malloc_r+0x1e>
 8009364:	680b      	ldr	r3, [r1, #0]
 8009366:	1b5b      	subs	r3, r3, r5
 8009368:	d418      	bmi.n	800939c <_malloc_r+0x8c>
 800936a:	2b0b      	cmp	r3, #11
 800936c:	d90f      	bls.n	800938e <_malloc_r+0x7e>
 800936e:	600b      	str	r3, [r1, #0]
 8009370:	50cd      	str	r5, [r1, r3]
 8009372:	18cc      	adds	r4, r1, r3
 8009374:	4630      	mov	r0, r6
 8009376:	f000 f856 	bl	8009426 <__malloc_unlock>
 800937a:	f104 000b 	add.w	r0, r4, #11
 800937e:	1d23      	adds	r3, r4, #4
 8009380:	f020 0007 	bic.w	r0, r0, #7
 8009384:	1ac3      	subs	r3, r0, r3
 8009386:	d0d3      	beq.n	8009330 <_malloc_r+0x20>
 8009388:	425a      	negs	r2, r3
 800938a:	50e2      	str	r2, [r4, r3]
 800938c:	e7d0      	b.n	8009330 <_malloc_r+0x20>
 800938e:	428c      	cmp	r4, r1
 8009390:	684b      	ldr	r3, [r1, #4]
 8009392:	bf16      	itet	ne
 8009394:	6063      	strne	r3, [r4, #4]
 8009396:	6013      	streq	r3, [r2, #0]
 8009398:	460c      	movne	r4, r1
 800939a:	e7eb      	b.n	8009374 <_malloc_r+0x64>
 800939c:	460c      	mov	r4, r1
 800939e:	6849      	ldr	r1, [r1, #4]
 80093a0:	e7cc      	b.n	800933c <_malloc_r+0x2c>
 80093a2:	1cc4      	adds	r4, r0, #3
 80093a4:	f024 0403 	bic.w	r4, r4, #3
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d005      	beq.n	80093b8 <_malloc_r+0xa8>
 80093ac:	1a21      	subs	r1, r4, r0
 80093ae:	4630      	mov	r0, r6
 80093b0:	f000 f808 	bl	80093c4 <_sbrk_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d0cf      	beq.n	8009358 <_malloc_r+0x48>
 80093b8:	6025      	str	r5, [r4, #0]
 80093ba:	e7db      	b.n	8009374 <_malloc_r+0x64>
 80093bc:	200000b8 	.word	0x200000b8
 80093c0:	200000bc 	.word	0x200000bc

080093c4 <_sbrk_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4c06      	ldr	r4, [pc, #24]	; (80093e0 <_sbrk_r+0x1c>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4605      	mov	r5, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	f7ff fb7a 	bl	8008ac8 <_sbrk>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_sbrk_r+0x1a>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	b103      	cbz	r3, 80093de <_sbrk_r+0x1a>
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20000910 	.word	0x20000910

080093e4 <siprintf>:
 80093e4:	b40e      	push	{r1, r2, r3}
 80093e6:	b500      	push	{lr}
 80093e8:	b09c      	sub	sp, #112	; 0x70
 80093ea:	ab1d      	add	r3, sp, #116	; 0x74
 80093ec:	9002      	str	r0, [sp, #8]
 80093ee:	9006      	str	r0, [sp, #24]
 80093f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093f4:	4809      	ldr	r0, [pc, #36]	; (800941c <siprintf+0x38>)
 80093f6:	9107      	str	r1, [sp, #28]
 80093f8:	9104      	str	r1, [sp, #16]
 80093fa:	4909      	ldr	r1, [pc, #36]	; (8009420 <siprintf+0x3c>)
 80093fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009400:	9105      	str	r1, [sp, #20]
 8009402:	6800      	ldr	r0, [r0, #0]
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	a902      	add	r1, sp, #8
 8009408:	f000 f868 	bl	80094dc <_svfiprintf_r>
 800940c:	9b02      	ldr	r3, [sp, #8]
 800940e:	2200      	movs	r2, #0
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	b01c      	add	sp, #112	; 0x70
 8009414:	f85d eb04 	ldr.w	lr, [sp], #4
 8009418:	b003      	add	sp, #12
 800941a:	4770      	bx	lr
 800941c:	2000002c 	.word	0x2000002c
 8009420:	ffff0208 	.word	0xffff0208

08009424 <__malloc_lock>:
 8009424:	4770      	bx	lr

08009426 <__malloc_unlock>:
 8009426:	4770      	bx	lr

08009428 <__ssputs_r>:
 8009428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800942c:	688e      	ldr	r6, [r1, #8]
 800942e:	429e      	cmp	r6, r3
 8009430:	4682      	mov	sl, r0
 8009432:	460c      	mov	r4, r1
 8009434:	4690      	mov	r8, r2
 8009436:	4699      	mov	r9, r3
 8009438:	d837      	bhi.n	80094aa <__ssputs_r+0x82>
 800943a:	898a      	ldrh	r2, [r1, #12]
 800943c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009440:	d031      	beq.n	80094a6 <__ssputs_r+0x7e>
 8009442:	6825      	ldr	r5, [r4, #0]
 8009444:	6909      	ldr	r1, [r1, #16]
 8009446:	1a6f      	subs	r7, r5, r1
 8009448:	6965      	ldr	r5, [r4, #20]
 800944a:	2302      	movs	r3, #2
 800944c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009450:	fb95 f5f3 	sdiv	r5, r5, r3
 8009454:	f109 0301 	add.w	r3, r9, #1
 8009458:	443b      	add	r3, r7
 800945a:	429d      	cmp	r5, r3
 800945c:	bf38      	it	cc
 800945e:	461d      	movcc	r5, r3
 8009460:	0553      	lsls	r3, r2, #21
 8009462:	d530      	bpl.n	80094c6 <__ssputs_r+0x9e>
 8009464:	4629      	mov	r1, r5
 8009466:	f7ff ff53 	bl	8009310 <_malloc_r>
 800946a:	4606      	mov	r6, r0
 800946c:	b950      	cbnz	r0, 8009484 <__ssputs_r+0x5c>
 800946e:	230c      	movs	r3, #12
 8009470:	f8ca 3000 	str.w	r3, [sl]
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009484:	463a      	mov	r2, r7
 8009486:	6921      	ldr	r1, [r4, #16]
 8009488:	f000 faa8 	bl	80099dc <memcpy>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	6126      	str	r6, [r4, #16]
 800949a:	6165      	str	r5, [r4, #20]
 800949c:	443e      	add	r6, r7
 800949e:	1bed      	subs	r5, r5, r7
 80094a0:	6026      	str	r6, [r4, #0]
 80094a2:	60a5      	str	r5, [r4, #8]
 80094a4:	464e      	mov	r6, r9
 80094a6:	454e      	cmp	r6, r9
 80094a8:	d900      	bls.n	80094ac <__ssputs_r+0x84>
 80094aa:	464e      	mov	r6, r9
 80094ac:	4632      	mov	r2, r6
 80094ae:	4641      	mov	r1, r8
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	f000 fa9e 	bl	80099f2 <memmove>
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	1b9b      	subs	r3, r3, r6
 80094ba:	60a3      	str	r3, [r4, #8]
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	441e      	add	r6, r3
 80094c0:	6026      	str	r6, [r4, #0]
 80094c2:	2000      	movs	r0, #0
 80094c4:	e7dc      	b.n	8009480 <__ssputs_r+0x58>
 80094c6:	462a      	mov	r2, r5
 80094c8:	f000 faac 	bl	8009a24 <_realloc_r>
 80094cc:	4606      	mov	r6, r0
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1e2      	bne.n	8009498 <__ssputs_r+0x70>
 80094d2:	6921      	ldr	r1, [r4, #16]
 80094d4:	4650      	mov	r0, sl
 80094d6:	f7ff fecd 	bl	8009274 <_free_r>
 80094da:	e7c8      	b.n	800946e <__ssputs_r+0x46>

080094dc <_svfiprintf_r>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	461d      	mov	r5, r3
 80094e2:	898b      	ldrh	r3, [r1, #12]
 80094e4:	061f      	lsls	r7, r3, #24
 80094e6:	b09d      	sub	sp, #116	; 0x74
 80094e8:	4680      	mov	r8, r0
 80094ea:	460c      	mov	r4, r1
 80094ec:	4616      	mov	r6, r2
 80094ee:	d50f      	bpl.n	8009510 <_svfiprintf_r+0x34>
 80094f0:	690b      	ldr	r3, [r1, #16]
 80094f2:	b96b      	cbnz	r3, 8009510 <_svfiprintf_r+0x34>
 80094f4:	2140      	movs	r1, #64	; 0x40
 80094f6:	f7ff ff0b 	bl	8009310 <_malloc_r>
 80094fa:	6020      	str	r0, [r4, #0]
 80094fc:	6120      	str	r0, [r4, #16]
 80094fe:	b928      	cbnz	r0, 800950c <_svfiprintf_r+0x30>
 8009500:	230c      	movs	r3, #12
 8009502:	f8c8 3000 	str.w	r3, [r8]
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	e0c8      	b.n	800969e <_svfiprintf_r+0x1c2>
 800950c:	2340      	movs	r3, #64	; 0x40
 800950e:	6163      	str	r3, [r4, #20]
 8009510:	2300      	movs	r3, #0
 8009512:	9309      	str	r3, [sp, #36]	; 0x24
 8009514:	2320      	movs	r3, #32
 8009516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800951a:	2330      	movs	r3, #48	; 0x30
 800951c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009520:	9503      	str	r5, [sp, #12]
 8009522:	f04f 0b01 	mov.w	fp, #1
 8009526:	4637      	mov	r7, r6
 8009528:	463d      	mov	r5, r7
 800952a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800952e:	b10b      	cbz	r3, 8009534 <_svfiprintf_r+0x58>
 8009530:	2b25      	cmp	r3, #37	; 0x25
 8009532:	d13e      	bne.n	80095b2 <_svfiprintf_r+0xd6>
 8009534:	ebb7 0a06 	subs.w	sl, r7, r6
 8009538:	d00b      	beq.n	8009552 <_svfiprintf_r+0x76>
 800953a:	4653      	mov	r3, sl
 800953c:	4632      	mov	r2, r6
 800953e:	4621      	mov	r1, r4
 8009540:	4640      	mov	r0, r8
 8009542:	f7ff ff71 	bl	8009428 <__ssputs_r>
 8009546:	3001      	adds	r0, #1
 8009548:	f000 80a4 	beq.w	8009694 <_svfiprintf_r+0x1b8>
 800954c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954e:	4453      	add	r3, sl
 8009550:	9309      	str	r3, [sp, #36]	; 0x24
 8009552:	783b      	ldrb	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 809d 	beq.w	8009694 <_svfiprintf_r+0x1b8>
 800955a:	2300      	movs	r3, #0
 800955c:	f04f 32ff 	mov.w	r2, #4294967295
 8009560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	9307      	str	r3, [sp, #28]
 8009568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800956c:	931a      	str	r3, [sp, #104]	; 0x68
 800956e:	462f      	mov	r7, r5
 8009570:	2205      	movs	r2, #5
 8009572:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009576:	4850      	ldr	r0, [pc, #320]	; (80096b8 <_svfiprintf_r+0x1dc>)
 8009578:	f7f6 fe32 	bl	80001e0 <memchr>
 800957c:	9b04      	ldr	r3, [sp, #16]
 800957e:	b9d0      	cbnz	r0, 80095b6 <_svfiprintf_r+0xda>
 8009580:	06d9      	lsls	r1, r3, #27
 8009582:	bf44      	itt	mi
 8009584:	2220      	movmi	r2, #32
 8009586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800958a:	071a      	lsls	r2, r3, #28
 800958c:	bf44      	itt	mi
 800958e:	222b      	movmi	r2, #43	; 0x2b
 8009590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009594:	782a      	ldrb	r2, [r5, #0]
 8009596:	2a2a      	cmp	r2, #42	; 0x2a
 8009598:	d015      	beq.n	80095c6 <_svfiprintf_r+0xea>
 800959a:	9a07      	ldr	r2, [sp, #28]
 800959c:	462f      	mov	r7, r5
 800959e:	2000      	movs	r0, #0
 80095a0:	250a      	movs	r5, #10
 80095a2:	4639      	mov	r1, r7
 80095a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095a8:	3b30      	subs	r3, #48	; 0x30
 80095aa:	2b09      	cmp	r3, #9
 80095ac:	d94d      	bls.n	800964a <_svfiprintf_r+0x16e>
 80095ae:	b1b8      	cbz	r0, 80095e0 <_svfiprintf_r+0x104>
 80095b0:	e00f      	b.n	80095d2 <_svfiprintf_r+0xf6>
 80095b2:	462f      	mov	r7, r5
 80095b4:	e7b8      	b.n	8009528 <_svfiprintf_r+0x4c>
 80095b6:	4a40      	ldr	r2, [pc, #256]	; (80096b8 <_svfiprintf_r+0x1dc>)
 80095b8:	1a80      	subs	r0, r0, r2
 80095ba:	fa0b f000 	lsl.w	r0, fp, r0
 80095be:	4318      	orrs	r0, r3
 80095c0:	9004      	str	r0, [sp, #16]
 80095c2:	463d      	mov	r5, r7
 80095c4:	e7d3      	b.n	800956e <_svfiprintf_r+0x92>
 80095c6:	9a03      	ldr	r2, [sp, #12]
 80095c8:	1d11      	adds	r1, r2, #4
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	9103      	str	r1, [sp, #12]
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	db01      	blt.n	80095d6 <_svfiprintf_r+0xfa>
 80095d2:	9207      	str	r2, [sp, #28]
 80095d4:	e004      	b.n	80095e0 <_svfiprintf_r+0x104>
 80095d6:	4252      	negs	r2, r2
 80095d8:	f043 0302 	orr.w	r3, r3, #2
 80095dc:	9207      	str	r2, [sp, #28]
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	783b      	ldrb	r3, [r7, #0]
 80095e2:	2b2e      	cmp	r3, #46	; 0x2e
 80095e4:	d10c      	bne.n	8009600 <_svfiprintf_r+0x124>
 80095e6:	787b      	ldrb	r3, [r7, #1]
 80095e8:	2b2a      	cmp	r3, #42	; 0x2a
 80095ea:	d133      	bne.n	8009654 <_svfiprintf_r+0x178>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	1d1a      	adds	r2, r3, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	9203      	str	r2, [sp, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bfb8      	it	lt
 80095f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80095fc:	3702      	adds	r7, #2
 80095fe:	9305      	str	r3, [sp, #20]
 8009600:	4d2e      	ldr	r5, [pc, #184]	; (80096bc <_svfiprintf_r+0x1e0>)
 8009602:	7839      	ldrb	r1, [r7, #0]
 8009604:	2203      	movs	r2, #3
 8009606:	4628      	mov	r0, r5
 8009608:	f7f6 fdea 	bl	80001e0 <memchr>
 800960c:	b138      	cbz	r0, 800961e <_svfiprintf_r+0x142>
 800960e:	2340      	movs	r3, #64	; 0x40
 8009610:	1b40      	subs	r0, r0, r5
 8009612:	fa03 f000 	lsl.w	r0, r3, r0
 8009616:	9b04      	ldr	r3, [sp, #16]
 8009618:	4303      	orrs	r3, r0
 800961a:	3701      	adds	r7, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	7839      	ldrb	r1, [r7, #0]
 8009620:	4827      	ldr	r0, [pc, #156]	; (80096c0 <_svfiprintf_r+0x1e4>)
 8009622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009626:	2206      	movs	r2, #6
 8009628:	1c7e      	adds	r6, r7, #1
 800962a:	f7f6 fdd9 	bl	80001e0 <memchr>
 800962e:	2800      	cmp	r0, #0
 8009630:	d038      	beq.n	80096a4 <_svfiprintf_r+0x1c8>
 8009632:	4b24      	ldr	r3, [pc, #144]	; (80096c4 <_svfiprintf_r+0x1e8>)
 8009634:	bb13      	cbnz	r3, 800967c <_svfiprintf_r+0x1a0>
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	3307      	adds	r3, #7
 800963a:	f023 0307 	bic.w	r3, r3, #7
 800963e:	3308      	adds	r3, #8
 8009640:	9303      	str	r3, [sp, #12]
 8009642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009644:	444b      	add	r3, r9
 8009646:	9309      	str	r3, [sp, #36]	; 0x24
 8009648:	e76d      	b.n	8009526 <_svfiprintf_r+0x4a>
 800964a:	fb05 3202 	mla	r2, r5, r2, r3
 800964e:	2001      	movs	r0, #1
 8009650:	460f      	mov	r7, r1
 8009652:	e7a6      	b.n	80095a2 <_svfiprintf_r+0xc6>
 8009654:	2300      	movs	r3, #0
 8009656:	3701      	adds	r7, #1
 8009658:	9305      	str	r3, [sp, #20]
 800965a:	4619      	mov	r1, r3
 800965c:	250a      	movs	r5, #10
 800965e:	4638      	mov	r0, r7
 8009660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009664:	3a30      	subs	r2, #48	; 0x30
 8009666:	2a09      	cmp	r2, #9
 8009668:	d903      	bls.n	8009672 <_svfiprintf_r+0x196>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0c8      	beq.n	8009600 <_svfiprintf_r+0x124>
 800966e:	9105      	str	r1, [sp, #20]
 8009670:	e7c6      	b.n	8009600 <_svfiprintf_r+0x124>
 8009672:	fb05 2101 	mla	r1, r5, r1, r2
 8009676:	2301      	movs	r3, #1
 8009678:	4607      	mov	r7, r0
 800967a:	e7f0      	b.n	800965e <_svfiprintf_r+0x182>
 800967c:	ab03      	add	r3, sp, #12
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4622      	mov	r2, r4
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <_svfiprintf_r+0x1ec>)
 8009684:	a904      	add	r1, sp, #16
 8009686:	4640      	mov	r0, r8
 8009688:	f3af 8000 	nop.w
 800968c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009690:	4681      	mov	r9, r0
 8009692:	d1d6      	bne.n	8009642 <_svfiprintf_r+0x166>
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	065b      	lsls	r3, r3, #25
 8009698:	f53f af35 	bmi.w	8009506 <_svfiprintf_r+0x2a>
 800969c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800969e:	b01d      	add	sp, #116	; 0x74
 80096a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a4:	ab03      	add	r3, sp, #12
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	4622      	mov	r2, r4
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <_svfiprintf_r+0x1ec>)
 80096ac:	a904      	add	r1, sp, #16
 80096ae:	4640      	mov	r0, r8
 80096b0:	f000 f882 	bl	80097b8 <_printf_i>
 80096b4:	e7ea      	b.n	800968c <_svfiprintf_r+0x1b0>
 80096b6:	bf00      	nop
 80096b8:	08009abc 	.word	0x08009abc
 80096bc:	08009ac2 	.word	0x08009ac2
 80096c0:	08009ac6 	.word	0x08009ac6
 80096c4:	00000000 	.word	0x00000000
 80096c8:	08009429 	.word	0x08009429

080096cc <_printf_common>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	4691      	mov	r9, r2
 80096d2:	461f      	mov	r7, r3
 80096d4:	688a      	ldr	r2, [r1, #8]
 80096d6:	690b      	ldr	r3, [r1, #16]
 80096d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096dc:	4293      	cmp	r3, r2
 80096de:	bfb8      	it	lt
 80096e0:	4613      	movlt	r3, r2
 80096e2:	f8c9 3000 	str.w	r3, [r9]
 80096e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096ea:	4606      	mov	r6, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	b112      	cbz	r2, 80096f6 <_printf_common+0x2a>
 80096f0:	3301      	adds	r3, #1
 80096f2:	f8c9 3000 	str.w	r3, [r9]
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	0699      	lsls	r1, r3, #26
 80096fa:	bf42      	ittt	mi
 80096fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009700:	3302      	addmi	r3, #2
 8009702:	f8c9 3000 	strmi.w	r3, [r9]
 8009706:	6825      	ldr	r5, [r4, #0]
 8009708:	f015 0506 	ands.w	r5, r5, #6
 800970c:	d107      	bne.n	800971e <_printf_common+0x52>
 800970e:	f104 0a19 	add.w	sl, r4, #25
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	f8d9 2000 	ldr.w	r2, [r9]
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	42ab      	cmp	r3, r5
 800971c:	dc28      	bgt.n	8009770 <_printf_common+0xa4>
 800971e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	3300      	adds	r3, #0
 8009726:	bf18      	it	ne
 8009728:	2301      	movne	r3, #1
 800972a:	0692      	lsls	r2, r2, #26
 800972c:	d42d      	bmi.n	800978a <_printf_common+0xbe>
 800972e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009732:	4639      	mov	r1, r7
 8009734:	4630      	mov	r0, r6
 8009736:	47c0      	blx	r8
 8009738:	3001      	adds	r0, #1
 800973a:	d020      	beq.n	800977e <_printf_common+0xb2>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	68e5      	ldr	r5, [r4, #12]
 8009740:	f8d9 2000 	ldr.w	r2, [r9]
 8009744:	f003 0306 	and.w	r3, r3, #6
 8009748:	2b04      	cmp	r3, #4
 800974a:	bf08      	it	eq
 800974c:	1aad      	subeq	r5, r5, r2
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	6922      	ldr	r2, [r4, #16]
 8009752:	bf0c      	ite	eq
 8009754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009758:	2500      	movne	r5, #0
 800975a:	4293      	cmp	r3, r2
 800975c:	bfc4      	itt	gt
 800975e:	1a9b      	subgt	r3, r3, r2
 8009760:	18ed      	addgt	r5, r5, r3
 8009762:	f04f 0900 	mov.w	r9, #0
 8009766:	341a      	adds	r4, #26
 8009768:	454d      	cmp	r5, r9
 800976a:	d11a      	bne.n	80097a2 <_printf_common+0xd6>
 800976c:	2000      	movs	r0, #0
 800976e:	e008      	b.n	8009782 <_printf_common+0xb6>
 8009770:	2301      	movs	r3, #1
 8009772:	4652      	mov	r2, sl
 8009774:	4639      	mov	r1, r7
 8009776:	4630      	mov	r0, r6
 8009778:	47c0      	blx	r8
 800977a:	3001      	adds	r0, #1
 800977c:	d103      	bne.n	8009786 <_printf_common+0xba>
 800977e:	f04f 30ff 	mov.w	r0, #4294967295
 8009782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009786:	3501      	adds	r5, #1
 8009788:	e7c3      	b.n	8009712 <_printf_common+0x46>
 800978a:	18e1      	adds	r1, r4, r3
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	2030      	movs	r0, #48	; 0x30
 8009790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009794:	4422      	add	r2, r4
 8009796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800979a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800979e:	3302      	adds	r3, #2
 80097a0:	e7c5      	b.n	800972e <_printf_common+0x62>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4622      	mov	r2, r4
 80097a6:	4639      	mov	r1, r7
 80097a8:	4630      	mov	r0, r6
 80097aa:	47c0      	blx	r8
 80097ac:	3001      	adds	r0, #1
 80097ae:	d0e6      	beq.n	800977e <_printf_common+0xb2>
 80097b0:	f109 0901 	add.w	r9, r9, #1
 80097b4:	e7d8      	b.n	8009768 <_printf_common+0x9c>
	...

080097b8 <_printf_i>:
 80097b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80097c0:	460c      	mov	r4, r1
 80097c2:	7e09      	ldrb	r1, [r1, #24]
 80097c4:	b085      	sub	sp, #20
 80097c6:	296e      	cmp	r1, #110	; 0x6e
 80097c8:	4617      	mov	r7, r2
 80097ca:	4606      	mov	r6, r0
 80097cc:	4698      	mov	r8, r3
 80097ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097d0:	f000 80b3 	beq.w	800993a <_printf_i+0x182>
 80097d4:	d822      	bhi.n	800981c <_printf_i+0x64>
 80097d6:	2963      	cmp	r1, #99	; 0x63
 80097d8:	d036      	beq.n	8009848 <_printf_i+0x90>
 80097da:	d80a      	bhi.n	80097f2 <_printf_i+0x3a>
 80097dc:	2900      	cmp	r1, #0
 80097de:	f000 80b9 	beq.w	8009954 <_printf_i+0x19c>
 80097e2:	2958      	cmp	r1, #88	; 0x58
 80097e4:	f000 8083 	beq.w	80098ee <_printf_i+0x136>
 80097e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097f0:	e032      	b.n	8009858 <_printf_i+0xa0>
 80097f2:	2964      	cmp	r1, #100	; 0x64
 80097f4:	d001      	beq.n	80097fa <_printf_i+0x42>
 80097f6:	2969      	cmp	r1, #105	; 0x69
 80097f8:	d1f6      	bne.n	80097e8 <_printf_i+0x30>
 80097fa:	6820      	ldr	r0, [r4, #0]
 80097fc:	6813      	ldr	r3, [r2, #0]
 80097fe:	0605      	lsls	r5, r0, #24
 8009800:	f103 0104 	add.w	r1, r3, #4
 8009804:	d52a      	bpl.n	800985c <_printf_i+0xa4>
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6011      	str	r1, [r2, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	da03      	bge.n	8009816 <_printf_i+0x5e>
 800980e:	222d      	movs	r2, #45	; 0x2d
 8009810:	425b      	negs	r3, r3
 8009812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009816:	486f      	ldr	r0, [pc, #444]	; (80099d4 <_printf_i+0x21c>)
 8009818:	220a      	movs	r2, #10
 800981a:	e039      	b.n	8009890 <_printf_i+0xd8>
 800981c:	2973      	cmp	r1, #115	; 0x73
 800981e:	f000 809d 	beq.w	800995c <_printf_i+0x1a4>
 8009822:	d808      	bhi.n	8009836 <_printf_i+0x7e>
 8009824:	296f      	cmp	r1, #111	; 0x6f
 8009826:	d020      	beq.n	800986a <_printf_i+0xb2>
 8009828:	2970      	cmp	r1, #112	; 0x70
 800982a:	d1dd      	bne.n	80097e8 <_printf_i+0x30>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	f043 0320 	orr.w	r3, r3, #32
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	e003      	b.n	800983e <_printf_i+0x86>
 8009836:	2975      	cmp	r1, #117	; 0x75
 8009838:	d017      	beq.n	800986a <_printf_i+0xb2>
 800983a:	2978      	cmp	r1, #120	; 0x78
 800983c:	d1d4      	bne.n	80097e8 <_printf_i+0x30>
 800983e:	2378      	movs	r3, #120	; 0x78
 8009840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009844:	4864      	ldr	r0, [pc, #400]	; (80099d8 <_printf_i+0x220>)
 8009846:	e055      	b.n	80098f4 <_printf_i+0x13c>
 8009848:	6813      	ldr	r3, [r2, #0]
 800984a:	1d19      	adds	r1, r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6011      	str	r1, [r2, #0]
 8009850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009858:	2301      	movs	r3, #1
 800985a:	e08c      	b.n	8009976 <_printf_i+0x1be>
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6011      	str	r1, [r2, #0]
 8009860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009864:	bf18      	it	ne
 8009866:	b21b      	sxthne	r3, r3
 8009868:	e7cf      	b.n	800980a <_printf_i+0x52>
 800986a:	6813      	ldr	r3, [r2, #0]
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	1d18      	adds	r0, r3, #4
 8009870:	6010      	str	r0, [r2, #0]
 8009872:	0628      	lsls	r0, r5, #24
 8009874:	d501      	bpl.n	800987a <_printf_i+0xc2>
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	e002      	b.n	8009880 <_printf_i+0xc8>
 800987a:	0668      	lsls	r0, r5, #25
 800987c:	d5fb      	bpl.n	8009876 <_printf_i+0xbe>
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	4854      	ldr	r0, [pc, #336]	; (80099d4 <_printf_i+0x21c>)
 8009882:	296f      	cmp	r1, #111	; 0x6f
 8009884:	bf14      	ite	ne
 8009886:	220a      	movne	r2, #10
 8009888:	2208      	moveq	r2, #8
 800988a:	2100      	movs	r1, #0
 800988c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009890:	6865      	ldr	r5, [r4, #4]
 8009892:	60a5      	str	r5, [r4, #8]
 8009894:	2d00      	cmp	r5, #0
 8009896:	f2c0 8095 	blt.w	80099c4 <_printf_i+0x20c>
 800989a:	6821      	ldr	r1, [r4, #0]
 800989c:	f021 0104 	bic.w	r1, r1, #4
 80098a0:	6021      	str	r1, [r4, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d13d      	bne.n	8009922 <_printf_i+0x16a>
 80098a6:	2d00      	cmp	r5, #0
 80098a8:	f040 808e 	bne.w	80099c8 <_printf_i+0x210>
 80098ac:	4665      	mov	r5, ip
 80098ae:	2a08      	cmp	r2, #8
 80098b0:	d10b      	bne.n	80098ca <_printf_i+0x112>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	07db      	lsls	r3, r3, #31
 80098b6:	d508      	bpl.n	80098ca <_printf_i+0x112>
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	6862      	ldr	r2, [r4, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	bfde      	ittt	le
 80098c0:	2330      	movle	r3, #48	; 0x30
 80098c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098ca:	ebac 0305 	sub.w	r3, ip, r5
 80098ce:	6123      	str	r3, [r4, #16]
 80098d0:	f8cd 8000 	str.w	r8, [sp]
 80098d4:	463b      	mov	r3, r7
 80098d6:	aa03      	add	r2, sp, #12
 80098d8:	4621      	mov	r1, r4
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff fef6 	bl	80096cc <_printf_common>
 80098e0:	3001      	adds	r0, #1
 80098e2:	d14d      	bne.n	8009980 <_printf_i+0x1c8>
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	b005      	add	sp, #20
 80098ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ee:	4839      	ldr	r0, [pc, #228]	; (80099d4 <_printf_i+0x21c>)
 80098f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098f4:	6813      	ldr	r3, [r2, #0]
 80098f6:	6821      	ldr	r1, [r4, #0]
 80098f8:	1d1d      	adds	r5, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6015      	str	r5, [r2, #0]
 80098fe:	060a      	lsls	r2, r1, #24
 8009900:	d50b      	bpl.n	800991a <_printf_i+0x162>
 8009902:	07ca      	lsls	r2, r1, #31
 8009904:	bf44      	itt	mi
 8009906:	f041 0120 	orrmi.w	r1, r1, #32
 800990a:	6021      	strmi	r1, [r4, #0]
 800990c:	b91b      	cbnz	r3, 8009916 <_printf_i+0x15e>
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	f022 0220 	bic.w	r2, r2, #32
 8009914:	6022      	str	r2, [r4, #0]
 8009916:	2210      	movs	r2, #16
 8009918:	e7b7      	b.n	800988a <_printf_i+0xd2>
 800991a:	064d      	lsls	r5, r1, #25
 800991c:	bf48      	it	mi
 800991e:	b29b      	uxthmi	r3, r3
 8009920:	e7ef      	b.n	8009902 <_printf_i+0x14a>
 8009922:	4665      	mov	r5, ip
 8009924:	fbb3 f1f2 	udiv	r1, r3, r2
 8009928:	fb02 3311 	mls	r3, r2, r1, r3
 800992c:	5cc3      	ldrb	r3, [r0, r3]
 800992e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009932:	460b      	mov	r3, r1
 8009934:	2900      	cmp	r1, #0
 8009936:	d1f5      	bne.n	8009924 <_printf_i+0x16c>
 8009938:	e7b9      	b.n	80098ae <_printf_i+0xf6>
 800993a:	6813      	ldr	r3, [r2, #0]
 800993c:	6825      	ldr	r5, [r4, #0]
 800993e:	6961      	ldr	r1, [r4, #20]
 8009940:	1d18      	adds	r0, r3, #4
 8009942:	6010      	str	r0, [r2, #0]
 8009944:	0628      	lsls	r0, r5, #24
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	d501      	bpl.n	800994e <_printf_i+0x196>
 800994a:	6019      	str	r1, [r3, #0]
 800994c:	e002      	b.n	8009954 <_printf_i+0x19c>
 800994e:	066a      	lsls	r2, r5, #25
 8009950:	d5fb      	bpl.n	800994a <_printf_i+0x192>
 8009952:	8019      	strh	r1, [r3, #0]
 8009954:	2300      	movs	r3, #0
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	4665      	mov	r5, ip
 800995a:	e7b9      	b.n	80098d0 <_printf_i+0x118>
 800995c:	6813      	ldr	r3, [r2, #0]
 800995e:	1d19      	adds	r1, r3, #4
 8009960:	6011      	str	r1, [r2, #0]
 8009962:	681d      	ldr	r5, [r3, #0]
 8009964:	6862      	ldr	r2, [r4, #4]
 8009966:	2100      	movs	r1, #0
 8009968:	4628      	mov	r0, r5
 800996a:	f7f6 fc39 	bl	80001e0 <memchr>
 800996e:	b108      	cbz	r0, 8009974 <_printf_i+0x1bc>
 8009970:	1b40      	subs	r0, r0, r5
 8009972:	6060      	str	r0, [r4, #4]
 8009974:	6863      	ldr	r3, [r4, #4]
 8009976:	6123      	str	r3, [r4, #16]
 8009978:	2300      	movs	r3, #0
 800997a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800997e:	e7a7      	b.n	80098d0 <_printf_i+0x118>
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	462a      	mov	r2, r5
 8009984:	4639      	mov	r1, r7
 8009986:	4630      	mov	r0, r6
 8009988:	47c0      	blx	r8
 800998a:	3001      	adds	r0, #1
 800998c:	d0aa      	beq.n	80098e4 <_printf_i+0x12c>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	079b      	lsls	r3, r3, #30
 8009992:	d413      	bmi.n	80099bc <_printf_i+0x204>
 8009994:	68e0      	ldr	r0, [r4, #12]
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	4298      	cmp	r0, r3
 800999a:	bfb8      	it	lt
 800999c:	4618      	movlt	r0, r3
 800999e:	e7a3      	b.n	80098e8 <_printf_i+0x130>
 80099a0:	2301      	movs	r3, #1
 80099a2:	464a      	mov	r2, r9
 80099a4:	4639      	mov	r1, r7
 80099a6:	4630      	mov	r0, r6
 80099a8:	47c0      	blx	r8
 80099aa:	3001      	adds	r0, #1
 80099ac:	d09a      	beq.n	80098e4 <_printf_i+0x12c>
 80099ae:	3501      	adds	r5, #1
 80099b0:	68e3      	ldr	r3, [r4, #12]
 80099b2:	9a03      	ldr	r2, [sp, #12]
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	42ab      	cmp	r3, r5
 80099b8:	dcf2      	bgt.n	80099a0 <_printf_i+0x1e8>
 80099ba:	e7eb      	b.n	8009994 <_printf_i+0x1dc>
 80099bc:	2500      	movs	r5, #0
 80099be:	f104 0919 	add.w	r9, r4, #25
 80099c2:	e7f5      	b.n	80099b0 <_printf_i+0x1f8>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1ac      	bne.n	8009922 <_printf_i+0x16a>
 80099c8:	7803      	ldrb	r3, [r0, #0]
 80099ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099d2:	e76c      	b.n	80098ae <_printf_i+0xf6>
 80099d4:	08009acd 	.word	0x08009acd
 80099d8:	08009ade 	.word	0x08009ade

080099dc <memcpy>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	1e43      	subs	r3, r0, #1
 80099e0:	440a      	add	r2, r1
 80099e2:	4291      	cmp	r1, r2
 80099e4:	d100      	bne.n	80099e8 <memcpy+0xc>
 80099e6:	bd10      	pop	{r4, pc}
 80099e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f0:	e7f7      	b.n	80099e2 <memcpy+0x6>

080099f2 <memmove>:
 80099f2:	4288      	cmp	r0, r1
 80099f4:	b510      	push	{r4, lr}
 80099f6:	eb01 0302 	add.w	r3, r1, r2
 80099fa:	d807      	bhi.n	8009a0c <memmove+0x1a>
 80099fc:	1e42      	subs	r2, r0, #1
 80099fe:	4299      	cmp	r1, r3
 8009a00:	d00a      	beq.n	8009a18 <memmove+0x26>
 8009a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a0a:	e7f8      	b.n	80099fe <memmove+0xc>
 8009a0c:	4283      	cmp	r3, r0
 8009a0e:	d9f5      	bls.n	80099fc <memmove+0xa>
 8009a10:	1881      	adds	r1, r0, r2
 8009a12:	1ad2      	subs	r2, r2, r3
 8009a14:	42d3      	cmn	r3, r2
 8009a16:	d100      	bne.n	8009a1a <memmove+0x28>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009a22:	e7f7      	b.n	8009a14 <memmove+0x22>

08009a24 <_realloc_r>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	4607      	mov	r7, r0
 8009a28:	4614      	mov	r4, r2
 8009a2a:	460e      	mov	r6, r1
 8009a2c:	b921      	cbnz	r1, 8009a38 <_realloc_r+0x14>
 8009a2e:	4611      	mov	r1, r2
 8009a30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a34:	f7ff bc6c 	b.w	8009310 <_malloc_r>
 8009a38:	b922      	cbnz	r2, 8009a44 <_realloc_r+0x20>
 8009a3a:	f7ff fc1b 	bl	8009274 <_free_r>
 8009a3e:	4625      	mov	r5, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a44:	f000 f814 	bl	8009a70 <_malloc_usable_size_r>
 8009a48:	42a0      	cmp	r0, r4
 8009a4a:	d20f      	bcs.n	8009a6c <_realloc_r+0x48>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff fc5e 	bl	8009310 <_malloc_r>
 8009a54:	4605      	mov	r5, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d0f2      	beq.n	8009a40 <_realloc_r+0x1c>
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	f7ff ffbd 	bl	80099dc <memcpy>
 8009a62:	4631      	mov	r1, r6
 8009a64:	4638      	mov	r0, r7
 8009a66:	f7ff fc05 	bl	8009274 <_free_r>
 8009a6a:	e7e9      	b.n	8009a40 <_realloc_r+0x1c>
 8009a6c:	4635      	mov	r5, r6
 8009a6e:	e7e7      	b.n	8009a40 <_realloc_r+0x1c>

08009a70 <_malloc_usable_size_r>:
 8009a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a74:	1f18      	subs	r0, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bfbc      	itt	lt
 8009a7a:	580b      	ldrlt	r3, [r1, r0]
 8009a7c:	18c0      	addlt	r0, r0, r3
 8009a7e:	4770      	bx	lr

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
