
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800364c  0800364c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003654  08003654  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800365c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  08003668  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08003668  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c792  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e70  00000000  00000000  0002c7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002e640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002ef28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208d7  00000000  00000000  0002f728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a55  00000000  00000000  0004ffff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c771c  00000000  00000000  00058a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000239c  00000000  00000000  001201ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003624 	.word	0x08003624

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003624 	.word	0x08003624

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92f 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 fef0 	bl	80032e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f939 	bl	80007a2 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90f 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5c 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff8e 	bl	80006a8 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	e16b      	b.n	8000ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d8:	2201      	movs	r2, #1
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	f040 815a 	bne.w	8000aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d003      	beq.n	8000806 <HAL_GPIO_Init+0x4a>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b12      	cmp	r3, #18
 8000804:	d123      	bne.n	800084e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	08da      	lsrs	r2, r3, #3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3208      	adds	r2, #8
 800080e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	220f      	movs	r2, #15
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	691a      	ldr	r2, [r3, #16]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	08da      	lsrs	r2, r3, #3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3208      	adds	r2, #8
 8000848:	69b9      	ldr	r1, [r7, #24]
 800084a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2203      	movs	r2, #3
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4013      	ands	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0203 	and.w	r2, r3, #3
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4313      	orrs	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d00b      	beq.n	80008a2 <HAL_GPIO_Init+0xe6>
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d007      	beq.n	80008a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000896:	2b11      	cmp	r3, #17
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d130      	bne.n	8000904 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	091b      	lsrs	r3, r3, #4
 80008ee:	f003 0201 	and.w	r2, r3, #1
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80b4 	beq.w	8000aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a5e      	ldr	r2, [pc, #376]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b5c      	ldr	r3, [pc, #368]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800095e:	4a5a      	ldr	r2, [pc, #360]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	3302      	adds	r3, #2
 8000966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	220f      	movs	r2, #15
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4013      	ands	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a51      	ldr	r2, [pc, #324]	; (8000acc <HAL_GPIO_Init+0x310>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d02b      	beq.n	80009e2 <HAL_GPIO_Init+0x226>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <HAL_GPIO_Init+0x314>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d025      	beq.n	80009de <HAL_GPIO_Init+0x222>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4f      	ldr	r2, [pc, #316]	; (8000ad4 <HAL_GPIO_Init+0x318>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d01f      	beq.n	80009da <HAL_GPIO_Init+0x21e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4e      	ldr	r2, [pc, #312]	; (8000ad8 <HAL_GPIO_Init+0x31c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x21a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <HAL_GPIO_Init+0x320>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x216>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <HAL_GPIO_Init+0x324>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x212>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_GPIO_Init+0x328>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x20e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <HAL_GPIO_Init+0x32c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x20a>
 80009c2:	2307      	movs	r3, #7
 80009c4:	e00e      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009c6:	2308      	movs	r3, #8
 80009c8:	e00c      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e00a      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ce:	2305      	movs	r3, #5
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a26:	4a31      	ldr	r2, [pc, #196]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f ae90 	bls.w	80007d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40021c00 	.word	0x40021c00
 8000aec:	40013c00 	.word	0x40013c00

08000af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
 8000afc:	4613      	mov	r3, r2
 8000afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b00:	787b      	ldrb	r3, [r7, #1]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b06:	887a      	ldrh	r2, [r7, #2]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b0c:	e003      	b.n	8000b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	041a      	lsls	r2, r3, #16
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	619a      	str	r2, [r3, #24]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	401a      	ands	r2, r3
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d104      	bne.n	8000b46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	041a      	lsls	r2, r3, #16
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 ff04 	bl	800297c <USB_GetMode>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	f040 80f1 	bne.w	8000d5e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fee8 	bl	8002956 <USB_ReadInterrupts>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 80e7 	beq.w	8000d5c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fedf 	bl	8002956 <USB_ReadInterrupts>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ba2:	d104      	bne.n	8000bae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fecf 	bl	8002956 <USB_ReadInterrupts>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bc2:	d104      	bne.n	8000bce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 febf 	bl	8002956 <USB_ReadInterrupts>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000be2:	d104      	bne.n	8000bee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 feaf 	bl	8002956 <USB_ReadInterrupts>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d103      	bne.n	8000c0a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2202      	movs	r2, #2
 8000c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fea1 	bl	8002956 <USB_ReadInterrupts>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c1e:	d117      	bne.n	8000c50 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8000c2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c32:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f002 fc05 	bl	8003444 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fea9 	bl	8002998 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fe7e 	bl	8002956 <USB_ReadInterrupts>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d102      	bne.n	8000c6c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f001 f874 	bl	8001d54 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fe70 	bl	8002956 <USB_ReadInterrupts>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d106      	bne.n	8000c8e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f002 fbc3 	bl	800340c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fe5f 	bl	8002956 <USB_ReadInterrupts>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ca2:	d138      	bne.n	8000d16 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fee8 	bl	8002a7e <USB_HC_ReadInterrupt>
 8000cae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e025      	b.n	8000d02 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d018      	beq.n	8000cfc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	015a      	lsls	r2, r3, #5
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce0:	d106      	bne.n	8000cf0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 f87b 	bl	8000de4 <HCD_HC_IN_IRQHandler>
 8000cee:	e005      	b.n	8000cfc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 fc0b 	bl	8001512 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d3d4      	bcc.n	8000cb6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fe1b 	bl	8002956 <USB_ReadInterrupts>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	2b10      	cmp	r3, #16
 8000d28:	d101      	bne.n	8000d2e <HAL_HCD_IRQHandler+0x1d6>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <HAL_HCD_IRQHandler+0x1d8>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d014      	beq.n	8000d5e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	699a      	ldr	r2, [r3, #24]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0210 	bic.w	r2, r2, #16
 8000d42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 ff59 	bl	8001bfc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f042 0210 	orr.w	r2, r2, #16
 8000d58:	619a      	str	r2, [r3, #24]
 8000d5a:	e000      	b.n	8000d5e <HAL_HCD_IRQHandler+0x206>
      return;
 8000d5c:	bf00      	nop
    }
  }
}
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_HCD_Start+0x16>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e013      	b.n	8000da2 <HAL_HCD_Start+0x3e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fd52 	bl	8002830 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fe3a 	bl	8002a0c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d101      	bne.n	8000dc0 <HAL_HCD_Stop+0x16>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e00d      	b.n	8000ddc <HAL_HCD_Stop+0x32>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 ff66 	bl	8002c9e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	015a      	lsls	r2, r3, #5
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4413      	add	r3, r2
 8000e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d119      	bne.n	8000e48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e20:	461a      	mov	r2, r3
 8000e22:	2304      	movs	r3, #4
 8000e24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	015a      	lsls	r2, r3, #5
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	0151      	lsls	r1, r2, #5
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	440a      	add	r2, r1
 8000e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	60d3      	str	r3, [r2, #12]
 8000e46:	e095      	b.n	8000f74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	015a      	lsls	r2, r3, #5
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	2b20      	cmp	r3, #32
 8000e5c:	d109      	bne.n	8000e72 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	015a      	lsls	r2, r3, #5
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4413      	add	r3, r2
 8000e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	2320      	movs	r3, #32
 8000e6e:	6093      	str	r3, [r2, #8]
 8000e70:	e080      	b.n	8000f74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	015a      	lsls	r2, r3, #5
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4413      	add	r3, r2
 8000e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d134      	bne.n	8000ef2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	015a      	lsls	r2, r3, #5
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4413      	add	r3, r2
 8000e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	0151      	lsls	r1, r2, #5
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	440a      	add	r2, r1
 8000e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	335d      	adds	r3, #93	; 0x5d
 8000eb8:	2205      	movs	r2, #5
 8000eba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2310      	movs	r3, #16
 8000ecc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	015a      	lsls	r2, r3, #5
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eda:	461a      	mov	r2, r3
 8000edc:	2308      	movs	r3, #8
 8000ede:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fdd8 	bl	8002aa0 <USB_HC_Halt>
 8000ef0:	e040      	b.n	8000f74 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	015a      	lsls	r2, r3, #5
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4413      	add	r3, r2
 8000efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f08:	d134      	bne.n	8000f74 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	015a      	lsls	r2, r3, #5
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4413      	add	r3, r2
 8000f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	0151      	lsls	r1, r2, #5
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	440a      	add	r2, r1
 8000f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fdb3 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	015a      	lsls	r2, r3, #5
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4413      	add	r3, r2
 8000f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f46:	461a      	mov	r2, r3
 8000f48:	2310      	movs	r3, #16
 8000f4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	335d      	adds	r3, #93	; 0x5d
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	015a      	lsls	r2, r3, #5
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4413      	add	r3, r2
 8000f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f72:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	015a      	lsls	r2, r3, #5
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8a:	d122      	bne.n	8000fd2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	015a      	lsls	r2, r3, #5
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4413      	add	r3, r2
 8000f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	0151      	lsls	r1, r2, #5
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	440a      	add	r2, r1
 8000fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fd72 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000fd0:	e29b      	b.n	800150a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	015a      	lsls	r2, r3, #5
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	f040 80c1 	bne.w	800116c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01b      	beq.n	800102a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	3348      	adds	r3, #72	; 0x48
 8001002:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	0159      	lsls	r1, r3, #5
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	440b      	add	r3, r1
 800100c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001016:	1ad1      	subs	r1, r2, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4403      	add	r3, r0
 8001026:	334c      	adds	r3, #76	; 0x4c
 8001028:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	335d      	adds	r3, #93	; 0x5d
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	3358      	adds	r3, #88	; 0x58
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	015a      	lsls	r2, r3, #5
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4413      	add	r3, r2
 800105a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800105e:	461a      	mov	r2, r3
 8001060:	2301      	movs	r3, #1
 8001062:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	333f      	adds	r3, #63	; 0x3f
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00a      	beq.n	8001090 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	440b      	add	r3, r1
 8001088:	333f      	adds	r3, #63	; 0x3f
 800108a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800108c:	2b02      	cmp	r3, #2
 800108e:	d121      	bne.n	80010d4 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4413      	add	r3, r2
 8001098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	0151      	lsls	r1, r2, #5
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	440a      	add	r2, r1
 80010a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fcf0 	bl	8002aa0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	015a      	lsls	r2, r3, #5
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4413      	add	r3, r2
 80010c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010cc:	461a      	mov	r2, r3
 80010ce:	2310      	movs	r3, #16
 80010d0:	6093      	str	r3, [r2, #8]
 80010d2:	e034      	b.n	800113e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	333f      	adds	r3, #63	; 0x3f
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d129      	bne.n	800113e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	015a      	lsls	r2, r3, #5
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4413      	add	r3, r2
 80010f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	0151      	lsls	r1, r2, #5
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	440a      	add	r2, r1
 8001100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001108:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	335c      	adds	r3, #92	; 0x5c
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	b2d8      	uxtb	r0, r3
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	335c      	adds	r3, #92	; 0x5c
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4601      	mov	r1, r0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f002 f991 	bl	8003460 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3350      	adds	r3, #80	; 0x50
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f083 0301 	eor.w	r3, r3, #1
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	3350      	adds	r3, #80	; 0x50
 8001166:	4602      	mov	r2, r0
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	e1ce      	b.n	800150a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	015a      	lsls	r2, r3, #5
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4413      	add	r3, r2
 8001174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b02      	cmp	r3, #2
 8001180:	f040 80f1 	bne.w	8001366 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	015a      	lsls	r2, r3, #5
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4413      	add	r3, r2
 800118c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	0151      	lsls	r1, r2, #5
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	440a      	add	r2, r1
 800119a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800119e:	f023 0302 	bic.w	r3, r3, #2
 80011a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	335d      	adds	r3, #93	; 0x5d
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10a      	bne.n	80011d0 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	335c      	adds	r3, #92	; 0x5c
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e0b0      	b.n	8001332 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	335d      	adds	r3, #93	; 0x5d
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d10a      	bne.n	80011fc <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	335c      	adds	r3, #92	; 0x5c
 80011f6:	2205      	movs	r2, #5
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e09a      	b.n	8001332 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	335d      	adds	r3, #93	; 0x5d
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b06      	cmp	r3, #6
 8001210:	d00a      	beq.n	8001228 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	335d      	adds	r3, #93	; 0x5d
 8001222:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001224:	2b08      	cmp	r3, #8
 8001226:	d156      	bne.n	80012d6 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3358      	adds	r3, #88	; 0x58
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1c59      	adds	r1, r3, #1
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4403      	add	r3, r0
 800124a:	3358      	adds	r3, #88	; 0x58
 800124c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	3358      	adds	r3, #88	; 0x58
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d914      	bls.n	800128e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3358      	adds	r3, #88	; 0x58
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	335c      	adds	r3, #92	; 0x5c
 8001288:	2204      	movs	r2, #4
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e009      	b.n	80012a2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	335c      	adds	r3, #92	; 0x5c
 800129e:	2202      	movs	r2, #2
 80012a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e02d      	b.n	8001332 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	335d      	adds	r3, #93	; 0x5d
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d122      	bne.n	8001332 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	335c      	adds	r3, #92	; 0x5c
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	015a      	lsls	r2, r3, #5
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4413      	add	r3, r2
 8001308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001316:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800131e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	015a      	lsls	r2, r3, #5
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4413      	add	r3, r2
 8001328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800132c:	461a      	mov	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4413      	add	r3, r2
 800133a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800133e:	461a      	mov	r2, r3
 8001340:	2302      	movs	r3, #2
 8001342:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	b2d8      	uxtb	r0, r3
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	335c      	adds	r3, #92	; 0x5c
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4601      	mov	r1, r0
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f002 f87e 	bl	8003460 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001364:	e0d1      	b.n	800150a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	015a      	lsls	r2, r3, #5
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4413      	add	r3, r2
 800136e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	2b80      	cmp	r3, #128	; 0x80
 800137a:	d13e      	bne.n	80013fa <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	015a      	lsls	r2, r3, #5
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4413      	add	r3, r2
 8001384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	0151      	lsls	r1, r2, #5
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	440a      	add	r2, r1
 8001392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3358      	adds	r3, #88	; 0x58
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1c59      	adds	r1, r3, #1
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4403      	add	r3, r0
 80013be:	3358      	adds	r3, #88	; 0x58
 80013c0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	335d      	adds	r3, #93	; 0x5d
 80013d2:	2206      	movs	r2, #6
 80013d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fb5d 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013f2:	461a      	mov	r2, r3
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	6093      	str	r3, [r2, #8]
}
 80013f8:	e087      	b.n	800150a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4413      	add	r3, r2
 8001402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b10      	cmp	r3, #16
 800140e:	d17c      	bne.n	800150a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	333f      	adds	r3, #63	; 0x3f
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d122      	bne.n	800146c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	3358      	adds	r3, #88	; 0x58
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	0151      	lsls	r1, r2, #5
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	440a      	add	r2, r1
 8001450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f001 fb1b 	bl	8002aa0 <USB_HC_Halt>
 800146a:	e045      	b.n	80014f8 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	333f      	adds	r3, #63	; 0x3f
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	333f      	adds	r3, #63	; 0x3f
 8001492:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001494:	2b02      	cmp	r3, #2
 8001496:	d12f      	bne.n	80014f8 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3358      	adds	r3, #88	; 0x58
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d121      	bne.n	80014f8 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	335d      	adds	r3, #93	; 0x5d
 80014c4:	2203      	movs	r2, #3
 80014c6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	0151      	lsls	r1, r2, #5
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	440a      	add	r2, r1
 80014de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fad4 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001504:	461a      	mov	r2, r3
 8001506:	2310      	movs	r3, #16
 8001508:	6093      	str	r3, [r2, #8]
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4413      	add	r3, r2
 8001534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b04      	cmp	r3, #4
 8001540:	d119      	bne.n	8001576 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4413      	add	r3, r2
 800154a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154e:	461a      	mov	r2, r3
 8001550:	2304      	movs	r3, #4
 8001552:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	0151      	lsls	r1, r2, #5
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	440a      	add	r2, r1
 800156a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001574:	e33e      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4413      	add	r3, r2
 800157e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b20      	cmp	r3, #32
 800158a:	d141      	bne.n	8001610 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4413      	add	r3, r2
 8001594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001598:	461a      	mov	r2, r3
 800159a:	2320      	movs	r3, #32
 800159c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	333d      	adds	r3, #61	; 0x3d
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 831f 	bne.w	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	333d      	adds	r3, #61	; 0x3d
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	335c      	adds	r3, #92	; 0x5c
 80015da:	2202      	movs	r2, #2
 80015dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	015a      	lsls	r2, r3, #5
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4413      	add	r3, r2
 80015e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	0151      	lsls	r1, r2, #5
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	440a      	add	r2, r1
 80015f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fa49 	bl	8002aa0 <USB_HC_Halt>
}
 800160e:	e2f1      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4413      	add	r3, r2
 8001618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	2b40      	cmp	r3, #64	; 0x40
 8001624:	d13f      	bne.n	80016a6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	335d      	adds	r3, #93	; 0x5d
 8001636:	2204      	movs	r2, #4
 8001638:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	333d      	adds	r3, #61	; 0x3d
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3358      	adds	r3, #88	; 0x58
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4413      	add	r3, r2
 800166a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	0151      	lsls	r1, r2, #5
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	440a      	add	r2, r1
 8001678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fa07 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	015a      	lsls	r2, r3, #5
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4413      	add	r3, r2
 800169a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169e:	461a      	mov	r2, r3
 80016a0:	2340      	movs	r3, #64	; 0x40
 80016a2:	6093      	str	r3, [r2, #8]
}
 80016a4:	e2a6      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016bc:	d122      	bne.n	8001704 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	0151      	lsls	r1, r2, #5
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	440a      	add	r2, r1
 80016d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f9d9 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fa:	461a      	mov	r2, r3
 80016fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001700:	6093      	str	r3, [r2, #8]
}
 8001702:	e277      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d135      	bne.n	8001786 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3358      	adds	r3, #88	; 0x58
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4413      	add	r3, r2
 8001736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	0151      	lsls	r1, r2, #5
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	440a      	add	r2, r1
 8001744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f001 f9a1 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4413      	add	r3, r2
 8001766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800176a:	461a      	mov	r2, r3
 800176c:	2301      	movs	r3, #1
 800176e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	335d      	adds	r3, #93	; 0x5d
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
}
 8001784:	e236      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4413      	add	r3, r2
 800178e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b08      	cmp	r3, #8
 800179a:	d12b      	bne.n	80017f4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a8:	461a      	mov	r2, r3
 80017aa:	2308      	movs	r3, #8
 80017ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	0151      	lsls	r1, r2, #5
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	440a      	add	r2, r1
 80017c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f001 f961 	bl	8002aa0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	335d      	adds	r3, #93	; 0x5d
 80017ee:	2205      	movs	r2, #5
 80017f0:	701a      	strb	r2, [r3, #0]
}
 80017f2:	e1ff      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b10      	cmp	r3, #16
 8001808:	d155      	bne.n	80018b6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3358      	adds	r3, #88	; 0x58
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	335d      	adds	r3, #93	; 0x5d
 800182e:	2203      	movs	r2, #3
 8001830:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	333d      	adds	r3, #61	; 0x3d
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d114      	bne.n	8001872 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	333c      	adds	r3, #60	; 0x3c
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	333d      	adds	r3, #61	; 0x3d
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4413      	add	r3, r2
 800187a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	0151      	lsls	r1, r2, #5
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	440a      	add	r2, r1
 8001888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f001 f8ff 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ae:	461a      	mov	r2, r3
 80018b0:	2310      	movs	r3, #16
 80018b2:	6093      	str	r3, [r2, #8]
}
 80018b4:	e19e      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d12b      	bne.n	8001924 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	0151      	lsls	r1, r2, #5
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	440a      	add	r2, r1
 80018e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 f8d2 	bl	8002aa0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	335d      	adds	r3, #93	; 0x5d
 800190c:	2206      	movs	r2, #6
 800190e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4413      	add	r3, r2
 8001918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191c:	461a      	mov	r2, r3
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	6093      	str	r3, [r2, #8]
}
 8001922:	e167      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4413      	add	r3, r2
 800192c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193a:	d135      	bne.n	80019a8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4413      	add	r3, r2
 8001944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	0151      	lsls	r1, r2, #5
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	440a      	add	r2, r1
 8001952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f001 f89a 	bl	8002aa0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4413      	add	r3, r2
 8001974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001978:	461a      	mov	r2, r3
 800197a:	2310      	movs	r3, #16
 800197c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4413      	add	r3, r2
 8001986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198a:	461a      	mov	r2, r3
 800198c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001990:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	335d      	adds	r3, #93	; 0x5d
 80019a2:	2208      	movs	r2, #8
 80019a4:	701a      	strb	r2, [r3, #0]
}
 80019a6:	e125      	b.n	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	f040 811a 	bne.w	8001bf4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	0151      	lsls	r1, r2, #5
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	440a      	add	r2, r1
 80019d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019da:	f023 0302 	bic.w	r3, r3, #2
 80019de:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	335d      	adds	r3, #93	; 0x5d
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d137      	bne.n	8001a66 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	335c      	adds	r3, #92	; 0x5c
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	333f      	adds	r3, #63	; 0x3f
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d00b      	beq.n	8001a38 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	333f      	adds	r3, #63	; 0x3f
 8001a30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	f040 80c5 	bne.w	8001bc2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3351      	adds	r3, #81	; 0x51
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2d8      	uxtb	r0, r3
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3351      	adds	r3, #81	; 0x51
 8001a60:	4602      	mov	r2, r0
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e0ad      	b.n	8001bc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	335d      	adds	r3, #93	; 0x5d
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d10a      	bne.n	8001a92 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	335c      	adds	r3, #92	; 0x5c
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e097      	b.n	8001bc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	335d      	adds	r3, #93	; 0x5d
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d10a      	bne.n	8001abe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	335c      	adds	r3, #92	; 0x5c
 8001ab8:	2202      	movs	r2, #2
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e081      	b.n	8001bc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	335d      	adds	r3, #93	; 0x5d
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d10a      	bne.n	8001aea <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	335c      	adds	r3, #92	; 0x5c
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e06b      	b.n	8001bc2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	335d      	adds	r3, #93	; 0x5d
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d00a      	beq.n	8001b16 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	335d      	adds	r3, #93	; 0x5d
 8001b10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d155      	bne.n	8001bc2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3358      	adds	r3, #88	; 0x58
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1c59      	adds	r1, r3, #1
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4403      	add	r3, r0
 8001b38:	3358      	adds	r3, #88	; 0x58
 8001b3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3358      	adds	r3, #88	; 0x58
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d914      	bls.n	8001b7c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3358      	adds	r3, #88	; 0x58
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	335c      	adds	r3, #92	; 0x5c
 8001b76:	2204      	movs	r2, #4
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e009      	b.n	8001b90 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	335c      	adds	r3, #92	; 0x5c
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ba6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	b2d8      	uxtb	r0, r3
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	335c      	adds	r3, #92	; 0x5c
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4601      	mov	r1, r0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f001 fc36 	bl	8003460 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001bf4:	bf00      	nop
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	0c5b      	lsrs	r3, r3, #17
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c30:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d003      	beq.n	8001c40 <HCD_RXQLVL_IRQHandler+0x44>
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	f000 8082 	beq.w	8001d42 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001c3e:	e083      	b.n	8001d48 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d07f      	beq.n	8001d46 <HCD_RXQLVL_IRQHandler+0x14a>
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	3344      	adds	r3, #68	; 0x44
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d074      	beq.n	8001d46 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3344      	adds	r3, #68	; 0x44
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	b292      	uxth	r2, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f000 fe44 	bl	8002904 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	3344      	adds	r3, #68	; 0x44
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	18d1      	adds	r1, r2, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4403      	add	r3, r0
 8001ca0:	3344      	adds	r3, #68	; 0x44
 8001ca2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	334c      	adds	r3, #76	; 0x4c
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	18d1      	adds	r1, r2, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4403      	add	r3, r0
 8001cc8:	334c      	adds	r3, #76	; 0x4c
 8001cca:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HCD_RXQLVL_IRQHandler+0x154>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d031      	beq.n	8001d46 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cf8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d00:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	3350      	adds	r3, #80	; 0x50
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	f083 0301 	eor.w	r3, r3, #1
 8001d2a:	b2d8      	uxtb	r0, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	3350      	adds	r3, #80	; 0x50
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	701a      	strb	r2, [r3, #0]
      break;
 8001d40:	e001      	b.n	8001d46 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8001d46:	bf00      	nop
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	1ff80000 	.word	0x1ff80000

08001d54 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d80:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d113      	bne.n	8001db4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10a      	bne.n	8001dac <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001da4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f001 fb3e 	bl	8003428 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d147      	bne.n	8001e4e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d129      	bne.n	8001e24 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d113      	bne.n	8001e00 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001dde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001de2:	d106      	bne.n	8001df2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2102      	movs	r1, #2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fdd4 	bl	8002998 <USB_InitFSLSPClkSel>
 8001df0:	e011      	b.n	8001e16 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2101      	movs	r1, #1
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fdcd 	bl	8002998 <USB_InitFSLSPClkSel>
 8001dfe:	e00a      	b.n	8001e16 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001e14:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f001 fb30 	bl	800347c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 fb03 	bl	8003428 <HAL_HCD_Connect_Callback>
 8001e22:	e014      	b.n	8001e4e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f001 fb37 	bl	8003498 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001e38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e3c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e4c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d103      	bne.n	8001e60 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e22d      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d075      	beq.n	8001f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e92:	4ba3      	ldr	r3, [pc, #652]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b9d      	ldr	r3, [pc, #628]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b99      	ldr	r3, [pc, #612]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e208      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x74>
 8001eda:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a90      	ldr	r2, [pc, #576]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b8b      	ldr	r3, [pc, #556]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a8a      	ldr	r2, [pc, #552]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a87      	ldr	r2, [pc, #540]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	4b84      	ldr	r3, [pc, #528]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a83      	ldr	r2, [pc, #524]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a80      	ldr	r2, [pc, #512]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fb32 	bl	8000594 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fb2e 	bl	8000594 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1cd      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe fb1e 	bl	8000594 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fb1a 	bl	8000594 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1b9      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e18d      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4952      	ldr	r1, [pc, #328]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_RCC_OscConfig+0x2b0>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fad3 	bl	8000594 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7fe facf 	bl	8000594 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e16e      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4940      	ldr	r1, [pc, #256]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_OscConfig+0x2b0>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fab2 	bl	8000594 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002034:	f7fe faae 	bl	8000594 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e14d      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d030      	beq.n	80020c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_RCC_OscConfig+0x2b4>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe fa92 	bl	8000594 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fa8e 	bl	8000594 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e12d      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x200>
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_OscConfig+0x2b4>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe fa7b 	bl	8000594 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a2:	f7fe fa77 	bl	8000594 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e116      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a0 	beq.w	800220e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_OscConfig+0x2b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d121      	bne.n	800214e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCC_OscConfig+0x2b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_RCC_OscConfig+0x2b8>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7fe fa3d 	bl	8000594 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e011      	b.n	8002142 <HAL_RCC_OscConfig+0x2ce>
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	42470000 	.word	0x42470000
 8002128:	42470e80 	.word	0x42470e80
 800212c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7fe fa30 	bl	8000594 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0cf      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d106      	bne.n	8002164 <HAL_RCC_OscConfig+0x2f0>
 8002156:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	e01c      	b.n	800219e <HAL_RCC_OscConfig+0x32a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_OscConfig+0x312>
 800216c:	4b60      	ldr	r3, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a5f      	ldr	r2, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0x32a>
 8002186:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d015      	beq.n	80021d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7fe f9f5 	bl	8000594 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7fe f9f1 	bl	8000594 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e08e      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ee      	beq.n	80021ae <HAL_RCC_OscConfig+0x33a>
 80021d0:	e014      	b.n	80021fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7fe f9df 	bl	8000594 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe f9db 	bl	8000594 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e078      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d105      	bne.n	800220e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d064      	beq.n	80022e0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d05c      	beq.n	80022dc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d141      	bne.n	80022ae <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_RCC_OscConfig+0x480>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe f9b0 	bl	8000594 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe f9ac 	bl	8000594 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04b      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	491d      	ldr	r1, [pc, #116]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_RCC_OscConfig+0x480>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe f985 	bl	8000594 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe f981 	bl	8000594 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e020      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x41a>
 80022ac:	e018      	b.n	80022e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_OscConfig+0x480>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe f96e 	bl	8000594 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe f96a 	bl	8000594 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e009      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_OscConfig+0x47c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x448>
 80022da:	e001      	b.n	80022e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40007000 	.word	0x40007000
 80022f0:	40023800 	.word	0x40023800
 80022f4:	42470060 	.word	0x42470060

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0ca      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d90c      	bls.n	8002334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b64      	ldr	r3, [pc, #400]	; (80024ac <HAL_RCC_ClockConfig+0x1b4>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b62      	ldr	r3, [pc, #392]	; (80024ac <HAL_RCC_ClockConfig+0x1b4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b6      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a57      	ldr	r2, [pc, #348]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a51      	ldr	r2, [pc, #324]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	494c      	ldr	r1, [pc, #304]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d044      	beq.n	8002418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d119      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07d      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06d      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e065      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4933      	ldr	r1, [pc, #204]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7fe f8d4 	bl	8000594 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7fe f8d0 	bl	8000594 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e04d      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d20c      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCC_ClockConfig+0x1b4>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <HAL_RCC_ClockConfig+0x1b4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e030      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4915      	ldr	r1, [pc, #84]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	490d      	ldr	r1, [pc, #52]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247e:	f000 f81d 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 8002482:	4601      	mov	r1, r0
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	fa21 f303 	lsr.w	r3, r1, r3
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe f836 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	0800363c 	.word	0x0800363c
 80024b8:	20000008 	.word	0x20000008

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d007      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x32>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d008      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x38>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 80b4 	bne.w	8002650 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024ea:	60bb      	str	r3, [r7, #8]
       break;
 80024ec:	e0b3      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ee:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024f0:	60bb      	str	r3, [r7, #8]
      break;
 80024f2:	e0b0      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f4:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fe:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d04a      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	4b55      	ldr	r3, [pc, #340]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	f04f 0400 	mov.w	r4, #0
 8002514:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	ea03 0501 	and.w	r5, r3, r1
 8002520:	ea04 0602 	and.w	r6, r4, r2
 8002524:	4629      	mov	r1, r5
 8002526:	4632      	mov	r2, r6
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	0154      	lsls	r4, r2, #5
 8002532:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002536:	014b      	lsls	r3, r1, #5
 8002538:	4619      	mov	r1, r3
 800253a:	4622      	mov	r2, r4
 800253c:	1b49      	subs	r1, r1, r5
 800253e:	eb62 0206 	sbc.w	r2, r2, r6
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	f04f 0400 	mov.w	r4, #0
 800254a:	0194      	lsls	r4, r2, #6
 800254c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002550:	018b      	lsls	r3, r1, #6
 8002552:	1a5b      	subs	r3, r3, r1
 8002554:	eb64 0402 	sbc.w	r4, r4, r2
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	00e2      	lsls	r2, r4, #3
 8002562:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002566:	00d9      	lsls	r1, r3, #3
 8002568:	460b      	mov	r3, r1
 800256a:	4614      	mov	r4, r2
 800256c:	195b      	adds	r3, r3, r5
 800256e:	eb44 0406 	adc.w	r4, r4, r6
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	0262      	lsls	r2, r4, #9
 800257c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002580:	0259      	lsls	r1, r3, #9
 8002582:	460b      	mov	r3, r1
 8002584:	4614      	mov	r4, r2
 8002586:	4618      	mov	r0, r3
 8002588:	4621      	mov	r1, r4
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f04f 0400 	mov.w	r4, #0
 8002590:	461a      	mov	r2, r3
 8002592:	4623      	mov	r3, r4
 8002594:	f7fd fe18 	bl	80001c8 <__aeabi_uldivmod>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e049      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a0:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	f04f 0400 	mov.w	r4, #0
 80025aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	ea03 0501 	and.w	r5, r3, r1
 80025b6:	ea04 0602 	and.w	r6, r4, r2
 80025ba:	4629      	mov	r1, r5
 80025bc:	4632      	mov	r2, r6
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	f04f 0400 	mov.w	r4, #0
 80025c6:	0154      	lsls	r4, r2, #5
 80025c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025cc:	014b      	lsls	r3, r1, #5
 80025ce:	4619      	mov	r1, r3
 80025d0:	4622      	mov	r2, r4
 80025d2:	1b49      	subs	r1, r1, r5
 80025d4:	eb62 0206 	sbc.w	r2, r2, r6
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f04f 0400 	mov.w	r4, #0
 80025e0:	0194      	lsls	r4, r2, #6
 80025e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	1a5b      	subs	r3, r3, r1
 80025ea:	eb64 0402 	sbc.w	r4, r4, r2
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	00e2      	lsls	r2, r4, #3
 80025f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025fc:	00d9      	lsls	r1, r3, #3
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	195b      	adds	r3, r3, r5
 8002604:	eb44 0406 	adc.w	r4, r4, r6
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	02a2      	lsls	r2, r4, #10
 8002612:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002616:	0299      	lsls	r1, r3, #10
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	4618      	mov	r0, r3
 800261e:	4621      	mov	r1, r4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	461a      	mov	r2, r3
 8002628:	4623      	mov	r3, r4
 800262a:	f7fd fdcd 	bl	80001c8 <__aeabi_uldivmod>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	3301      	adds	r3, #1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	60bb      	str	r3, [r7, #8]
      break;
 800264e:	e002      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002652:	60bb      	str	r3, [r7, #8]
      break;
 8002654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002656:	68bb      	ldr	r3, [r7, #8]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	00f42400 	.word	0x00f42400
 8002668:	007a1200 	.word	0x007a1200

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002690:	2b00      	cmp	r3, #0
 8002692:	d035      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002694:	4b62      	ldr	r3, [pc, #392]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800269a:	f7fd ff7b 	bl	8000594 <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026a2:	f7fd ff77 	bl	8000594 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0b0      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026b4:	4b5b      	ldr	r3, [pc, #364]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	019a      	lsls	r2, r3, #6
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	071b      	lsls	r3, r3, #28
 80026cc:	4955      	ldr	r1, [pc, #340]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026d4:	4b52      	ldr	r3, [pc, #328]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026da:	f7fd ff5b 	bl	8000594 <HAL_GetTick>
 80026de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026e2:	f7fd ff57 	bl	8000594 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e090      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026f4:	4b4b      	ldr	r3, [pc, #300]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8083 	beq.w	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b44      	ldr	r3, [pc, #272]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a43      	ldr	r2, [pc, #268]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3e      	ldr	r2, [pc, #248]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002736:	f7fd ff2d 	bl	8000594 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7fd ff29 	bl	8000594 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e062      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002750:	4b35      	ldr	r3, [pc, #212]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002764:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	429a      	cmp	r2, r3
 8002778:	d028      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002782:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002784:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002790:	4a24      	ldr	r2, [pc, #144]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002796:	4b23      	ldr	r3, [pc, #140]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d114      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fd fef7 	bl	8000594 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fd fef3 	bl	8000594 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e02a      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ee      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027d8:	d10d      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ee:	490d      	ldr	r1, [pc, #52]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
 80027f4:	e005      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002800:	6093      	str	r3, [r2, #8]
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	4905      	ldr	r1, [pc, #20]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002810:	4313      	orrs	r3, r2
 8002812:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	42470068 	.word	0x42470068
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000
 800282c:	42470e40 	.word	0x42470e40

08002830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3301      	adds	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <USB_FlushTxFifo+0x48>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d0f0      	beq.n	800288e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	00030d40 	.word	0x00030d40

080028c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2210      	movs	r2, #16
 80028d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3301      	adds	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <USB_FlushRxFifo+0x40>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d0f0      	beq.n	80028d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	00030d40 	.word	0x00030d40

08002904 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	3303      	adds	r3, #3
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e00b      	b.n	8002940 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	601a      	str	r2, [r3, #0]
    pDest++;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3304      	adds	r3, #4
 8002938:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3301      	adds	r3, #1
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	429a      	cmp	r2, r3
 8002946:	d3ef      	bcc.n	8002928 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8002948:	69fb      	ldr	r3, [r7, #28]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0301 	and.w	r3, r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	68f9      	ldr	r1, [r7, #12]
 80029cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e0:	461a      	mov	r2, r3
 80029e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80029e6:	6053      	str	r3, [r2, #4]
 80029e8:	e009      	b.n	80029fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d106      	bne.n	80029fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f6:	461a      	mov	r2, r3
 80029f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80029fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <USB_DriveVbus+0x44>
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d106      	bne.n	8002a50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002a4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	d109      	bne.n	8002a70 <USB_DriveVbus+0x64>
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	b29b      	uxth	r3, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0c9b      	lsrs	r3, r3, #18
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <USB_HC_Halt+0x3a>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d16c      	bne.n	8002bb4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	0151      	lsls	r1, r2, #5
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	440a      	add	r2, r1
 8002af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002af8:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d143      	bne.n	8002b8e <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	0151      	lsls	r1, r2, #5
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	440a      	add	r2, r1
 8002b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b24:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	0151      	lsls	r1, r2, #5
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	440a      	add	r2, r1
 8002b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b44:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	0151      	lsls	r1, r2, #5
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b64:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b72:	d81d      	bhi.n	8002bb0 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b8a:	d0ec      	beq.n	8002b66 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002b8c:	e080      	b.n	8002c90 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	0151      	lsls	r1, r2, #5
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	440a      	add	r2, r1
 8002ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bac:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002bae:	e06f      	b.n	8002c90 <USB_HC_Halt+0x1f0>
          break;
 8002bb0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002bb2:	e06d      	b.n	8002c90 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bd2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d143      	bne.n	8002c6c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	0151      	lsls	r1, r2, #5
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	440a      	add	r2, r1
 8002bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	0151      	lsls	r1, r2, #5
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	440a      	add	r2, r1
 8002c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	0151      	lsls	r1, r2, #5
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	440a      	add	r2, r1
 8002c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c42:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3301      	adds	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c50:	d81d      	bhi.n	8002c8e <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c68:	d0ec      	beq.n	8002c44 <USB_HC_Halt+0x1a4>
 8002c6a:	e011      	b.n	8002c90 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	0151      	lsls	r1, r2, #5
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	440a      	add	r2, r1
 8002c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e000      	b.n	8002c90 <USB_HC_Halt+0x1f0>
          break;
 8002c8e:	bf00      	nop
    }
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fdcf 	bl	8002852 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cb4:	2110      	movs	r1, #16
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fddc 	bl	8002874 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fdff 	bl	80028c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	e01f      	b.n	8002d08 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cde:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ce6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cee:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	3301      	adds	r3, #1
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	d9dc      	bls.n	8002cc8 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e034      	b.n	8002d7e <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d2a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d32:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d3a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d5a:	d80c      	bhi.n	8002d76 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d72:	d0ec      	beq.n	8002d4e <USB_StopHost+0xb0>
 8002d74:	e000      	b.n	8002d78 <USB_StopHost+0xda>
        break;
 8002d76:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d9c7      	bls.n	8002d14 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fd48 	bl	8002830 <USB_EnableGlobalInt>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f804 	bl	8002dce <USBH_HandleSof>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b0b      	cmp	r3, #11
 8002dde:	d10a      	bne.n	8002df6 <USBH_HandleSof+0x28>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
  }
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8002e0e:	bf00      	nop
}
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8002e2a:	bf00      	nop
}
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00e      	beq.n	8002e78 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8002e60:	2104      	movs	r1, #4
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	e007      	b.n	8002e78 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fb2d 	bl	80034ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	791b      	ldrb	r3, [r3, #4]
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f820 	bl	8002edc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	795b      	ldrb	r3, [r3, #5]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f81a 	bl	8002edc <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 faf4 	bl	80034b4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	2b0a      	cmp	r3, #10
 8002eec:	d80b      	bhi.n	8002f06 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	32e0      	adds	r2, #224	; 0xe0
 8002ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	32e0      	adds	r2, #224	; 0xe0
 8002f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f1a:	f7fd fad5 	bl	80004c8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002f1e:	f000 f859 	bl	8002fd4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f22:	f000 f8d7 	bl	80030d4 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  GPIOB->ODR = 0;
 8002f26:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <main+0xb0>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int countTime = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
  while (1)
  {


	  if(countTime % 2 == 0){
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <main+0x30>
		  HAL_GPIO_TogglePin(GPIOD, 1<<(13));
 8002f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f3e:	4822      	ldr	r0, [pc, #136]	; (8002fc8 <main+0xb4>)
 8002f40:	f7fd fdef 	bl	8000b22 <HAL_GPIO_TogglePin>
	  }

	  if(countTime % 10 == 0){
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <main+0xb8>)
 8002f48:	fb83 2301 	smull	r2, r3, r3, r1
 8002f4c:	109a      	asrs	r2, r3, #2
 8002f4e:	17cb      	asrs	r3, r1, #31
 8002f50:	1ad2      	subs	r2, r2, r3
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	1aca      	subs	r2, r1, r3
 8002f5c:	2a00      	cmp	r2, #0
 8002f5e:	d104      	bne.n	8002f6a <main+0x56>
		  HAL_GPIO_TogglePin(GPIOD, 1<<(12));
 8002f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f64:	4818      	ldr	r0, [pc, #96]	; (8002fc8 <main+0xb4>)
 8002f66:	f7fd fddc 	bl	8000b22 <HAL_GPIO_TogglePin>
	  }

	  if(countTime % 20 == 0){
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <main+0xb8>)
 8002f6e:	fb83 2301 	smull	r2, r3, r3, r1
 8002f72:	10da      	asrs	r2, r3, #3
 8002f74:	17cb      	asrs	r3, r1, #31
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	1aca      	subs	r2, r1, r3
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	d104      	bne.n	8002f90 <main+0x7c>
		  HAL_GPIO_TogglePin(GPIOD, 1<<(14));
 8002f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f8a:	480f      	ldr	r0, [pc, #60]	; (8002fc8 <main+0xb4>)
 8002f8c:	f7fd fdc9 	bl	8000b22 <HAL_GPIO_TogglePin>
	  }

	  if(countTime % 50 == 0){
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <main+0xbc>)
 8002f94:	fb83 1302 	smull	r1, r3, r3, r2
 8002f98:	1119      	asrs	r1, r3, #4
 8002f9a:	17d3      	asrs	r3, r2, #31
 8002f9c:	1acb      	subs	r3, r1, r3
 8002f9e:	2132      	movs	r1, #50	; 0x32
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <main+0xa0>
	 	  HAL_GPIO_TogglePin(GPIOD, 1<<(15));
 8002faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fae:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <main+0xb4>)
 8002fb0:	f7fd fdb7 	bl	8000b22 <HAL_GPIO_TogglePin>
 	 }
	  HAL_Delay(100);
 8002fb4:	2064      	movs	r0, #100	; 0x64
 8002fb6:	f7fd faf9 	bl	80005ac <HAL_Delay>
	  countTime += 1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
	  if(countTime % 2 == 0){
 8002fc0:	e7b6      	b.n	8002f30 <main+0x1c>
 8002fc2:	bf00      	nop
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	66666667 	.word	0x66666667
 8002fd0:	51eb851f 	.word	0x51eb851f

08002fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b098      	sub	sp, #96	; 0x60
 8002fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fde:	2230      	movs	r2, #48	; 0x30
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fb16 	bl	8003614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <SystemClock_Config+0xf8>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <SystemClock_Config+0xf8>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <SystemClock_Config+0xf8>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <SystemClock_Config+0xfc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <SystemClock_Config+0xfc>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <SystemClock_Config+0xfc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800303e:	2301      	movs	r3, #1
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003048:	2302      	movs	r3, #2
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800304c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003052:	2304      	movs	r3, #4
 8003054:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003056:	2360      	movs	r3, #96	; 0x60
 8003058:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800305a:	2302      	movs	r3, #2
 800305c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800305e:	2304      	movs	r3, #4
 8003060:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe ff04 	bl	8001e74 <HAL_RCC_OscConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003072:	f000 f92d 	bl	80032d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003076:	230f      	movs	r3, #15
 8003078:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800307a:	2302      	movs	r3, #2
 800307c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003082:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	2103      	movs	r1, #3
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff f92f 	bl	80022f8 <HAL_RCC_ClockConfig>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80030a0:	f000 f916 	bl	80032d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80030a4:	2301      	movs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80030a8:	2332      	movs	r3, #50	; 0x32
 80030aa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80030ac:	2302      	movs	r3, #2
 80030ae:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fad9 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80030c0:	f000 f906 	bl	80032d0 <Error_Handler>
  }
}
 80030c4:	bf00      	nop
 80030c6:	3760      	adds	r7, #96	; 0x60
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000

080030d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08c      	sub	sp, #48	; 0x30
 80030d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	4b71      	ldr	r3, [pc, #452]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a70      	ldr	r2, [pc, #448]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a69      	ldr	r2, [pc, #420]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a62      	ldr	r2, [pc, #392]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 800312c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b5c      	ldr	r3, [pc, #368]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a5b      	ldr	r2, [pc, #364]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a54      	ldr	r2, [pc, #336]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b52      	ldr	r3, [pc, #328]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a4d      	ldr	r2, [pc, #308]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <MX_GPIO_Init+0x1e0>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003192:	2200      	movs	r2, #0
 8003194:	2108      	movs	r1, #8
 8003196:	4848      	ldr	r0, [pc, #288]	; (80032b8 <MX_GPIO_Init+0x1e4>)
 8003198:	f7fd fcaa 	bl	8000af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800319c:	2201      	movs	r2, #1
 800319e:	2101      	movs	r1, #1
 80031a0:	4846      	ldr	r0, [pc, #280]	; (80032bc <MX_GPIO_Init+0x1e8>)
 80031a2:	f7fd fca5 	bl	8000af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80031a6:	2200      	movs	r2, #0
 80031a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80031ac:	4844      	ldr	r0, [pc, #272]	; (80032c0 <MX_GPIO_Init+0x1ec>)
 80031ae:	f7fd fc9f 	bl	8000af0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80031b2:	2308      	movs	r3, #8
 80031b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b6:	2301      	movs	r3, #1
 80031b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4619      	mov	r1, r3
 80031c8:	483b      	ldr	r0, [pc, #236]	; (80032b8 <MX_GPIO_Init+0x1e4>)
 80031ca:	f7fd faf7 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d2:	2301      	movs	r3, #1
 80031d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031da:	2300      	movs	r3, #0
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80031de:	f107 031c 	add.w	r3, r7, #28
 80031e2:	4619      	mov	r1, r3
 80031e4:	4835      	ldr	r0, [pc, #212]	; (80032bc <MX_GPIO_Init+0x1e8>)
 80031e6:	f7fd fae9 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80031ea:	2308      	movs	r3, #8
 80031ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031fa:	2305      	movs	r3, #5
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 031c 	add.w	r3, r7, #28
 8003202:	4619      	mov	r1, r3
 8003204:	482d      	ldr	r0, [pc, #180]	; (80032bc <MX_GPIO_Init+0x1e8>)
 8003206:	f7fd fad9 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800320a:	2301      	movs	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800320e:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <MX_GPIO_Init+0x1f0>)
 8003210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003216:	f107 031c 	add.w	r3, r7, #28
 800321a:	4619      	mov	r1, r3
 800321c:	482a      	ldr	r0, [pc, #168]	; (80032c8 <MX_GPIO_Init+0x1f4>)
 800321e:	f7fd facd 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003222:	2304      	movs	r3, #4
 8003224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	4825      	ldr	r0, [pc, #148]	; (80032cc <MX_GPIO_Init+0x1f8>)
 8003236:	f7fd fac1 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800323a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003248:	2300      	movs	r3, #0
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800324c:	2305      	movs	r3, #5
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003250:	f107 031c 	add.w	r3, r7, #28
 8003254:	4619      	mov	r1, r3
 8003256:	481d      	ldr	r0, [pc, #116]	; (80032cc <MX_GPIO_Init+0x1f8>)
 8003258:	f7fd fab0 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800325c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003260:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003262:	2301      	movs	r3, #1
 8003264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	4812      	ldr	r0, [pc, #72]	; (80032c0 <MX_GPIO_Init+0x1ec>)
 8003276:	f7fd faa1 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800327a:	2320      	movs	r3, #32
 800327c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003286:	f107 031c 	add.w	r3, r7, #28
 800328a:	4619      	mov	r1, r3
 800328c:	480c      	ldr	r0, [pc, #48]	; (80032c0 <MX_GPIO_Init+0x1ec>)
 800328e:	f7fd fa95 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003292:	2302      	movs	r3, #2
 8003294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <MX_GPIO_Init+0x1f0>)
 8003298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800329e:	f107 031c 	add.w	r3, r7, #28
 80032a2:	4619      	mov	r1, r3
 80032a4:	4804      	ldr	r0, [pc, #16]	; (80032b8 <MX_GPIO_Init+0x1e4>)
 80032a6:	f7fd fa89 	bl	80007bc <HAL_GPIO_Init>

}
 80032aa:	bf00      	nop
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	10120000 	.word	0x10120000
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020400 	.word	0x40020400

080032d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_MspInit+0x4c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a0f      	ldr	r2, [pc, #60]	; (800332c <HAL_MspInit+0x4c>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_MspInit+0x4c>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_MspInit+0x4c>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_MspInit+0x4c>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_MspInit+0x4c>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800331e:	2007      	movs	r0, #7
 8003320:	f7fd fa18 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003342:	e7fe      	b.n	8003342 <HardFault_Handler+0x4>

08003344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003348:	e7fe      	b.n	8003348 <MemManage_Handler+0x4>

0800334a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800334e:	e7fe      	b.n	800334e <BusFault_Handler+0x4>

08003350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <UsageFault_Handler+0x4>

08003356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003384:	f7fd f8f2 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}

0800338c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <OTG_FS_IRQHandler+0x10>)
 8003392:	f7fd fbe1 	bl	8000b58 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2000002c 	.word	0x2000002c

080033a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <SystemInit+0x60>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	4a15      	ldr	r2, [pc, #84]	; (8003400 <SystemInit+0x60>)
 80033ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <SystemInit+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a12      	ldr	r2, [pc, #72]	; (8003404 <SystemInit+0x64>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <SystemInit+0x64>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <SystemInit+0x64>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <SystemInit+0x64>)
 80033cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <SystemInit+0x64>)
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <SystemInit+0x68>)
 80033da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <SystemInit+0x64>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <SystemInit+0x64>)
 80033e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <SystemInit+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <SystemInit+0x60>)
 80033f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033f4:	609a      	str	r2, [r3, #8]
#endif
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00
 8003404:	40023800 	.word	0x40023800
 8003408:	24003010 	.word	0x24003010

0800340c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fcc5 	bl	8002daa <USBH_LL_IncTimer>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fcfd 	bl	8002e36 <USBH_LL_Connect>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fd15 	bl	8002e82 <USBH_LL_Disconnect>
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
 800346c:	4613      	mov	r3, r2
 800346e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fcb7 	bl	8002dfe <USBH_LL_PortEnabled>
} 
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fcb7 	bl	8002e1a <USBH_LL_PortDisabled>
} 
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fc4a 	bl	8000d64 <HAL_HCD_Start>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f822 	bl	8003520 <USBH_Get_USB_Status>
 80034dc:	4603      	mov	r3, r0
 80034de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80034e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fc52 	bl	8000daa <HAL_HCD_Stop>
 8003506:	4603      	mov	r3, r0
 8003508:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f807 	bl	8003520 <USBH_Get_USB_Status>
 8003512:	4603      	mov	r3, r0
 8003514:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8003516:	7bbb      	ldrb	r3, [r7, #14]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d817      	bhi.n	8003564 <USBH_Get_USB_Status+0x44>
 8003534:	a201      	add	r2, pc, #4	; (adr r2, 800353c <USBH_Get_USB_Status+0x1c>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003553 	.word	0x08003553
 8003544:	08003559 	.word	0x08003559
 8003548:	0800355f 	.word	0x0800355f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
    break;
 8003550:	e00b      	b.n	800356a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003552:	2302      	movs	r3, #2
 8003554:	73fb      	strb	r3, [r7, #15]
    break;
 8003556:	e008      	b.n	800356a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
    break;
 800355c:	e005      	b.n	800356a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800355e:	2302      	movs	r3, #2
 8003560:	73fb      	strb	r3, [r7, #15]
    break;
 8003562:	e002      	b.n	800356a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003564:	2302      	movs	r3, #2
 8003566:	73fb      	strb	r3, [r7, #15]
    break;
 8003568:	bf00      	nop
  }
  return usb_status;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800357c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800357e:	e003      	b.n	8003588 <LoopCopyDataInit>

08003580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003586:	3104      	adds	r1, #4

08003588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003588:	480b      	ldr	r0, [pc, #44]	; (80035b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800358c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800358e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003590:	d3f6      	bcc.n	8003580 <CopyDataInit>
  ldr  r2, =_sbss
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003594:	e002      	b.n	800359c <LoopFillZerobss>

08003596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003598:	f842 3b04 	str.w	r3, [r2], #4

0800359c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800359e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035a0:	d3f9      	bcc.n	8003596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035a2:	f7ff fefd 	bl	80033a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035a6:	f000 f811 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035aa:	f7ff fcb3 	bl	8002f14 <main>
  bx  lr    
 80035ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035b4:	0800365c 	.word	0x0800365c
  ldr  r0, =_sdata
 80035b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035bc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80035c0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80035c4:	200002f0 	.word	0x200002f0

080035c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035c8:	e7fe      	b.n	80035c8 <ADC_IRQHandler>
	...

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4e0d      	ldr	r6, [pc, #52]	; (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d2:	1ba4      	subs	r4, r4, r6
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2500      	movs	r5, #0
 80035d8:	42a5      	cmp	r5, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4e0b      	ldr	r6, [pc, #44]	; (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	; (8003610 <__libc_init_array+0x44>)
 80035e0:	f000 f820 	bl	8003624 <_init>
 80035e4:	1ba4      	subs	r4, r4, r6
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2500      	movs	r5, #0
 80035ea:	42a5      	cmp	r5, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035f4:	4798      	blx	r3
 80035f6:	3501      	adds	r5, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035fe:	4798      	blx	r3
 8003600:	3501      	adds	r5, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08003654 	.word	0x08003654
 8003608:	08003654 	.word	0x08003654
 800360c:	08003654 	.word	0x08003654
 8003610:	08003658 	.word	0x08003658

08003614 <memset>:
 8003614:	4402      	add	r2, r0
 8003616:	4603      	mov	r3, r0
 8003618:	4293      	cmp	r3, r2
 800361a:	d100      	bne.n	800361e <memset+0xa>
 800361c:	4770      	bx	lr
 800361e:	f803 1b01 	strb.w	r1, [r3], #1
 8003622:	e7f9      	b.n	8003618 <memset+0x4>

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
