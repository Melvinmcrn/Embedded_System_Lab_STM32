
Lab3-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d0c  08008d0c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d14  08008d14  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d14  08008d14  00018d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000090  08008dac  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  08008dac  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d592  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c72  00000000  00000000  0003d652  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001818  00000000  00000000  000412c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00042ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025764  00000000  00000000  00044160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bad  00000000  00000000  000698c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d398d  00000000  00000000  0007e471  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151dfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069cc  00000000  00000000  00151e7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c9c 	.word	0x08008c9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008c9c 	.word	0x08008c9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f94d 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f007 f974 	bl	80078a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f965 	bl	80008b2 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92d 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000c8 	.word	0x200000c8

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000c8 	.word	0x200000c8

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff8e 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff29 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff3e 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff8e 	bl	800079c <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff31 	bl	800070c <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	e16b      	b.n	8000bc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008e8:	2201      	movs	r2, #1
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	429a      	cmp	r2, r3
 8000902:	f040 815a 	bne.w	8000bba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x4a>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b12      	cmp	r3, #18
 8000914:	d123      	bne.n	800095e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	691a      	ldr	r2, [r3, #16]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	69b9      	ldr	r1, [r7, #24]
 800095a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4013      	ands	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0203 	and.w	r2, r3, #3
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4313      	orrs	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d00b      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d007      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a6:	2b11      	cmp	r3, #17
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d130      	bne.n	8000a14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e8:	2201      	movs	r2, #1
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	091b      	lsrs	r3, r3, #4
 80009fe:	f003 0201 	and.w	r2, r3, #1
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80b4 	beq.w	8000bba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b5f      	ldr	r3, [pc, #380]	; (8000bd4 <HAL_GPIO_Init+0x308>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a5e      	ldr	r2, [pc, #376]	; (8000bd4 <HAL_GPIO_Init+0x308>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b5c      	ldr	r3, [pc, #368]	; (8000bd4 <HAL_GPIO_Init+0x308>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a6e:	4a5a      	ldr	r2, [pc, #360]	; (8000bd8 <HAL_GPIO_Init+0x30c>)
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	3302      	adds	r3, #2
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <HAL_GPIO_Init+0x310>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d02b      	beq.n	8000af2 <HAL_GPIO_Init+0x226>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <HAL_GPIO_Init+0x314>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d025      	beq.n	8000aee <HAL_GPIO_Init+0x222>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_GPIO_Init+0x318>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d01f      	beq.n	8000aea <HAL_GPIO_Init+0x21e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <HAL_GPIO_Init+0x31c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d019      	beq.n	8000ae6 <HAL_GPIO_Init+0x21a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4d      	ldr	r2, [pc, #308]	; (8000bec <HAL_GPIO_Init+0x320>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x216>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4c      	ldr	r2, [pc, #304]	; (8000bf0 <HAL_GPIO_Init+0x324>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x212>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4b      	ldr	r2, [pc, #300]	; (8000bf4 <HAL_GPIO_Init+0x328>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x20e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <HAL_GPIO_Init+0x32c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x20a>
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	e00e      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	e00c      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ada:	2306      	movs	r3, #6
 8000adc:	e00a      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ade:	2305      	movs	r3, #5
 8000ae0:	e008      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e004      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000af2:	2300      	movs	r3, #0
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	f002 0203 	and.w	r2, r2, #3
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4093      	lsls	r3, r2
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b04:	4934      	ldr	r1, [pc, #208]	; (8000bd8 <HAL_GPIO_Init+0x30c>)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b12:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b60:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b8a:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	f67f ae90 	bls.w	80008e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3724      	adds	r7, #36	; 0x24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40021400 	.word	0x40021400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40021c00 	.word	0x40021c00
 8000bfc:	40013c00 	.word	0x40013c00

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	619a      	str	r2, [r3, #24]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	401a      	ands	r2, r3
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d104      	bne.n	8000c56 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c4c:	887b      	ldrh	r3, [r7, #2]
 8000c4e:	041a      	lsls	r2, r3, #16
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c54:	e002      	b.n	8000c5c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	b08f      	sub	sp, #60	; 0x3c
 8000c6c:	af0a      	add	r7, sp, #40	; 0x28
 8000c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e054      	b.n	8000d24 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d106      	bne.n	8000c9a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f007 f8e5 	bl	8007e64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 fdfd 	bl	80048b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	687e      	ldr	r6, [r7, #4]
 8000cc6:	466d      	mov	r5, sp
 8000cc8:	f106 0410 	add.w	r4, r6, #16
 8000ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cdc:	1d33      	adds	r3, r6, #4
 8000cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f003 fd77 	bl	80047d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2101      	movs	r1, #1
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fdf4 	bl	80048da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	687e      	ldr	r6, [r7, #4]
 8000cfa:	466d      	mov	r5, sp
 8000cfc:	f106 0410 	add.w	r4, r6, #16
 8000d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d10:	1d33      	adds	r3, r6, #4
 8000d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d14:	6838      	ldr	r0, [r7, #0]
 8000d16:	f003 ff07 	bl	8004b28 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d2c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	70fb      	strb	r3, [r7, #3]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70bb      	strb	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d101      	bne.n	8000d54 <HAL_HCD_HC_Init+0x28>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e07f      	b.n	8000e54 <HAL_HCD_HC_Init+0x128>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	333d      	adds	r3, #61	; 0x3d
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3338      	adds	r3, #56	; 0x38
 8000d80:	787a      	ldrb	r2, [r7, #1]
 8000d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	3340      	adds	r3, #64	; 0x40
 8000d94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d96:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	3339      	adds	r3, #57	; 0x39
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	440b      	add	r3, r1
 8000dba:	333f      	adds	r3, #63	; 0x3f
 8000dbc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000dc0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000dc2:	78fa      	ldrb	r2, [r7, #3]
 8000dc4:	78bb      	ldrb	r3, [r7, #2]
 8000dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dca:	b2d8      	uxtb	r0, r3
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	333a      	adds	r3, #58	; 0x3a
 8000dda:	4602      	mov	r2, r0
 8000ddc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000dde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da0a      	bge.n	8000dfc <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	333b      	adds	r3, #59	; 0x3b
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e009      	b.n	8000e10 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	440b      	add	r3, r1
 8000e0a:	333b      	adds	r3, #59	; 0x3b
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	333c      	adds	r3, #60	; 0x3c
 8000e20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e24:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	787c      	ldrb	r4, [r7, #1]
 8000e2c:	78ba      	ldrb	r2, [r7, #2]
 8000e2e:	78f9      	ldrb	r1, [r7, #3]
 8000e30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4623      	mov	r3, r4
 8000e42:	f003 fff3 	bl	8004e2c <USB_HC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}

08000e5c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_HCD_HC_Halt+0x1e>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e00f      	b.n	8000e9a <HAL_HCD_HC_Halt+0x3e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f004 fa2d 	bl	80052ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	70fb      	strb	r3, [r7, #3]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70bb      	strb	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	333b      	adds	r3, #59	; 0x3b
 8000ece:	78ba      	ldrb	r2, [r7, #2]
 8000ed0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000ed2:	78fa      	ldrb	r2, [r7, #3]
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	440b      	add	r3, r1
 8000ee0:	333f      	adds	r3, #63	; 0x3f
 8000ee2:	787a      	ldrb	r2, [r7, #1]
 8000ee4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000ee6:	7c3b      	ldrb	r3, [r7, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10a      	bne.n	8000f02 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000eec:	78fa      	ldrb	r2, [r7, #3]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	440b      	add	r3, r1
 8000efa:	3342      	adds	r3, #66	; 0x42
 8000efc:	2203      	movs	r2, #3
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e009      	b.n	8000f16 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3342      	adds	r3, #66	; 0x42
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	f200 80d6 	bhi.w	80010ca <HAL_HCD_HC_SubmitRequest+0x226>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f35 	.word	0x08000f35
 8000f28:	080010b5 	.word	0x080010b5
 8000f2c:	08000fa1 	.word	0x08000fa1
 8000f30:	0800102b 	.word	0x0800102b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000f34:	7c3b      	ldrb	r3, [r7, #16]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	f040 80c9 	bne.w	80010ce <HAL_HCD_HC_SubmitRequest+0x22a>
 8000f3c:	78bb      	ldrb	r3, [r7, #2]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 80c5 	bne.w	80010ce <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000f44:	8b3b      	ldrh	r3, [r7, #24]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f4a:	78fa      	ldrb	r2, [r7, #3]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3351      	adds	r3, #81	; 0x51
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3351      	adds	r3, #81	; 0x51
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3342      	adds	r3, #66	; 0x42
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f88:	e0a1      	b.n	80010ce <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3342      	adds	r3, #66	; 0x42
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
      break;
 8000f9e:	e096      	b.n	80010ce <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000fa0:	78bb      	ldrb	r3, [r7, #2]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d120      	bne.n	8000fe8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3351      	adds	r3, #81	; 0x51
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10a      	bne.n	8000fd2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3342      	adds	r3, #66	; 0x42
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000fd0:	e07e      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fd2:	78fa      	ldrb	r2, [r7, #3]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	3342      	adds	r3, #66	; 0x42
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
      break;
 8000fe6:	e073      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3350      	adds	r3, #80	; 0x50
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3342      	adds	r3, #66	; 0x42
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
      break;
 8001012:	e05d      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3342      	adds	r3, #66	; 0x42
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
      break;
 8001028:	e052      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800102a:	78bb      	ldrb	r3, [r7, #2]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d120      	bne.n	8001072 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3351      	adds	r3, #81	; 0x51
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10a      	bne.n	800105c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001046:	78fa      	ldrb	r2, [r7, #3]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	440b      	add	r3, r1
 8001054:	3342      	adds	r3, #66	; 0x42
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800105a:	e039      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	3342      	adds	r3, #66	; 0x42
 800106c:	2202      	movs	r2, #2
 800106e:	701a      	strb	r2, [r3, #0]
      break;
 8001070:	e02e      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001072:	78fa      	ldrb	r2, [r7, #3]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	3350      	adds	r3, #80	; 0x50
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10a      	bne.n	800109e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3342      	adds	r3, #66	; 0x42
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
      break;
 800109c:	e018      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800109e:	78fa      	ldrb	r2, [r7, #3]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	3342      	adds	r3, #66	; 0x42
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
      break;
 80010b2:	e00d      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	3342      	adds	r3, #66	; 0x42
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
      break;
 80010c8:	e002      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80010ca:	bf00      	nop
 80010cc:	e000      	b.n	80010d0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80010ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	3344      	adds	r3, #68	; 0x44
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80010e4:	78fa      	ldrb	r2, [r7, #3]
 80010e6:	8b39      	ldrh	r1, [r7, #24]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4403      	add	r3, r0
 80010f4:	3348      	adds	r3, #72	; 0x48
 80010f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80010f8:	78fa      	ldrb	r2, [r7, #3]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	335c      	adds	r3, #92	; 0x5c
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800110c:	78fa      	ldrb	r2, [r7, #3]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	334c      	adds	r3, #76	; 0x4c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001120:	78fa      	ldrb	r2, [r7, #3]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	3339      	adds	r3, #57	; 0x39
 8001130:	78fa      	ldrb	r2, [r7, #3]
 8001132:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001134:	78fa      	ldrb	r2, [r7, #3]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	335d      	adds	r3, #93	; 0x5d
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	78fa      	ldrb	r2, [r7, #3]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	3338      	adds	r3, #56	; 0x38
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	18d1      	adds	r1, r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	f003 ff6c 	bl	8005040 <USB_HC_StartXfer>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop

08001174 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fc89 	bl	8004aa2 <USB_GetMode>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	f040 80f1 	bne.w	800137a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fc6d 	bl	8004a7c <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80e7 	beq.w	8001378 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fc64 	bl	8004a7c <USB_ReadInterrupts>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011be:	d104      	bne.n	80011ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fc54 	bl	8004a7c <USB_ReadInterrupts>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011de:	d104      	bne.n	80011ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fc44 	bl	8004a7c <USB_ReadInterrupts>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011fe:	d104      	bne.n	800120a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001208:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fc34 	bl	8004a7c <USB_ReadInterrupts>
 8001214:	4603      	mov	r3, r0
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b02      	cmp	r3, #2
 800121c:	d103      	bne.n	8001226 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2202      	movs	r2, #2
 8001224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fc26 	bl	8004a7c <USB_ReadInterrupts>
 8001230:	4603      	mov	r3, r0
 8001232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800123a:	d117      	bne.n	800126c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800124a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800124e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f006 fe85 	bl	8007f60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fd1f 	bl	8004ca0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800126a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fc03 	bl	8004a7c <USB_ReadInterrupts>
 8001276:	4603      	mov	r3, r0
 8001278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d102      	bne.n	8001288 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f001 f8c8 	bl	8002418 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fbf5 	bl	8004a7c <USB_ReadInterrupts>
 8001292:	4603      	mov	r3, r0
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b08      	cmp	r3, #8
 800129a:	d106      	bne.n	80012aa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f006 fe43 	bl	8007f28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2208      	movs	r2, #8
 80012a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fbe4 	bl	8004a7c <USB_ReadInterrupts>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012be:	d138      	bne.n	8001332 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 ffff 	bl	80052c8 <USB_HC_ReadInterrupt>
 80012ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e025      	b.n	800131e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d018      	beq.n	8001318 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012fc:	d106      	bne.n	800130c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f8cf 	bl	80014a8 <HCD_HC_IN_IRQHandler>
 800130a:	e005      	b.n	8001318 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4619      	mov	r1, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fc5f 	bl	8001bd6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3d4      	bcc.n	80012d2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fba0 	bl	8004a7c <USB_ReadInterrupts>
 800133c:	4603      	mov	r3, r0
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b10      	cmp	r3, #16
 8001344:	d101      	bne.n	800134a <HAL_HCD_IRQHandler+0x1d6>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_HCD_IRQHandler+0x1d8>
 800134a:	2300      	movs	r3, #0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d014      	beq.n	800137a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	699a      	ldr	r2, [r3, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0210 	bic.w	r2, r2, #16
 800135e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 ffad 	bl	80022c0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699a      	ldr	r2, [r3, #24]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0210 	orr.w	r2, r2, #16
 8001374:	619a      	str	r2, [r3, #24]
 8001376:	e000      	b.n	800137a <HAL_HCD_IRQHandler+0x206>
      return;
 8001378:	bf00      	nop
    }
  }
}
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_HCD_Start+0x16>
 8001392:	2302      	movs	r3, #2
 8001394:	e013      	b.n	80013be <HAL_HCD_Start+0x3e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fa77 	bl	8004896 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 fcda 	bl	8004d68 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_HCD_Stop+0x16>
 80013d8:	2302      	movs	r3, #2
 80013da:	e00d      	b.n	80013f8 <HAL_HCD_Stop+0x32>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 f8b9 	bl	8005560 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fc81 	bl	8004d14 <USB_ResetPort>
 8001412:	4603      	mov	r3, r0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	335c      	adds	r3, #92	; 0x5c
 8001438:	781b      	ldrb	r3, [r3, #0]
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	334c      	adds	r3, #76	; 0x4c
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fcc3 	bl	8004e08 <USB_GetCurrentFrame>
 8001482:	4603      	mov	r3, r0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fc9e 	bl	8004dda <USB_GetHostSpeed>
 800149e:	4603      	mov	r3, r0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d119      	bne.n	800150c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e4:	461a      	mov	r2, r3
 80014e6:	2304      	movs	r3, #4
 80014e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	0151      	lsls	r1, r2, #5
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	440a      	add	r2, r1
 8001500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	60d3      	str	r3, [r2, #12]
 800150a:	e095      	b.n	8001638 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b20      	cmp	r3, #32
 8001520:	d109      	bne.n	8001536 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4413      	add	r3, r2
 800152a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152e:	461a      	mov	r2, r3
 8001530:	2320      	movs	r3, #32
 8001532:	6093      	str	r3, [r2, #8]
 8001534:	e080      	b.n	8001638 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4413      	add	r3, r2
 800153e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b08      	cmp	r3, #8
 800154a:	d134      	bne.n	80015b6 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4413      	add	r3, r2
 8001554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	0151      	lsls	r1, r2, #5
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	440a      	add	r2, r1
 8001562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	335d      	adds	r3, #93	; 0x5d
 800157c:	2205      	movs	r2, #5
 800157e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4413      	add	r3, r2
 8001588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158c:	461a      	mov	r2, r3
 800158e:	2310      	movs	r3, #16
 8001590:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4413      	add	r3, r2
 800159a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159e:	461a      	mov	r2, r3
 80015a0:	2308      	movs	r3, #8
 80015a2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fe9b 	bl	80052ea <USB_HC_Halt>
 80015b4:	e040      	b.n	8001638 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015cc:	d134      	bne.n	8001638 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	0151      	lsls	r1, r2, #5
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	440a      	add	r2, r1
 80015e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fe76 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4413      	add	r3, r2
 8001606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160a:	461a      	mov	r2, r3
 800160c:	2310      	movs	r3, #16
 800160e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	335d      	adds	r3, #93	; 0x5d
 8001620:	2208      	movs	r2, #8
 8001622:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4413      	add	r3, r2
 800162c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001630:	461a      	mov	r2, r3
 8001632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001636:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4413      	add	r3, r2
 8001640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164e:	d122      	bne.n	8001696 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4413      	add	r3, r2
 8001658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	0151      	lsls	r1, r2, #5
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	440a      	add	r2, r1
 8001666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fe35 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4413      	add	r3, r2
 8001688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800168c:	461a      	mov	r2, r3
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001694:	e29b      	b.n	8001bce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	f040 80c1 	bne.w	8001830 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01b      	beq.n	80016ee <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	3348      	adds	r3, #72	; 0x48
 80016c6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	0159      	lsls	r1, r3, #5
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	440b      	add	r3, r1
 80016d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80016da:	1ad1      	subs	r1, r2, r3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4403      	add	r3, r0
 80016ea:	334c      	adds	r3, #76	; 0x4c
 80016ec:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	335d      	adds	r3, #93	; 0x5d
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	3358      	adds	r3, #88	; 0x58
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4413      	add	r3, r2
 800171e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001722:	461a      	mov	r2, r3
 8001724:	2301      	movs	r3, #1
 8001726:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	333f      	adds	r3, #63	; 0x3f
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00a      	beq.n	8001754 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	333f      	adds	r3, #63	; 0x3f
 800174e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001750:	2b02      	cmp	r3, #2
 8001752:	d121      	bne.n	8001798 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	0151      	lsls	r1, r2, #5
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	440a      	add	r2, r1
 800176a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fdb3 	bl	80052ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4413      	add	r3, r2
 800178c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001790:	461a      	mov	r2, r3
 8001792:	2310      	movs	r3, #16
 8001794:	6093      	str	r3, [r2, #8]
 8001796:	e034      	b.n	8001802 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	333f      	adds	r3, #63	; 0x3f
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d129      	bne.n	8001802 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	0151      	lsls	r1, r2, #5
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	440a      	add	r2, r1
 80017c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017cc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	335c      	adds	r3, #92	; 0x5c
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	b2d8      	uxtb	r0, r3
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	335c      	adds	r3, #92	; 0x5c
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4601      	mov	r1, r0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f006 fbbd 	bl	8007f7c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3350      	adds	r3, #80	; 0x50
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f083 0301 	eor.w	r3, r3, #1
 8001818:	b2d8      	uxtb	r0, r3
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	3350      	adds	r3, #80	; 0x50
 800182a:	4602      	mov	r2, r0
 800182c:	701a      	strb	r2, [r3, #0]
}
 800182e:	e1ce      	b.n	8001bce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b02      	cmp	r3, #2
 8001844:	f040 80f1 	bne.w	8001a2a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	0151      	lsls	r1, r2, #5
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	440a      	add	r2, r1
 800185e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001862:	f023 0302 	bic.w	r3, r3, #2
 8001866:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	335d      	adds	r3, #93	; 0x5d
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10a      	bne.n	8001894 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	335c      	adds	r3, #92	; 0x5c
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e0b0      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	335d      	adds	r3, #93	; 0x5d
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10a      	bne.n	80018c0 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	335c      	adds	r3, #92	; 0x5c
 80018ba:	2205      	movs	r2, #5
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e09a      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	335d      	adds	r3, #93	; 0x5d
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d00a      	beq.n	80018ec <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	335d      	adds	r3, #93	; 0x5d
 80018e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d156      	bne.n	800199a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3358      	adds	r3, #88	; 0x58
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4403      	add	r3, r0
 800190e:	3358      	adds	r3, #88	; 0x58
 8001910:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	3358      	adds	r3, #88	; 0x58
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d914      	bls.n	8001952 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	3358      	adds	r3, #88	; 0x58
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	335c      	adds	r3, #92	; 0x5c
 800194c:	2204      	movs	r2, #4
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e009      	b.n	8001966 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	335c      	adds	r3, #92	; 0x5c
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4413      	add	r3, r2
 800196e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800197c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001984:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4413      	add	r3, r2
 800198e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e02d      	b.n	80019f6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	335d      	adds	r3, #93	; 0x5d
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d122      	bne.n	80019f6 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	335c      	adds	r3, #92	; 0x5c
 80019c0:	2202      	movs	r2, #2
 80019c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a02:	461a      	mov	r2, r3
 8001a04:	2302      	movs	r3, #2
 8001a06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	b2d8      	uxtb	r0, r3
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	335c      	adds	r3, #92	; 0x5c
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4601      	mov	r1, r0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f006 faaa 	bl	8007f7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a28:	e0d1      	b.n	8001bce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d13e      	bne.n	8001abe <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	0151      	lsls	r1, r2, #5
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	440a      	add	r2, r1
 8001a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3358      	adds	r3, #88	; 0x58
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4403      	add	r3, r0
 8001a82:	3358      	adds	r3, #88	; 0x58
 8001a84:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	335d      	adds	r3, #93	; 0x5d
 8001a96:	2206      	movs	r2, #6
 8001a98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fc20 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	6093      	str	r3, [r2, #8]
}
 8001abc:	e087      	b.n	8001bce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d17c      	bne.n	8001bce <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	333f      	adds	r3, #63	; 0x3f
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d122      	bne.n	8001b30 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	3358      	adds	r3, #88	; 0x58
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	0151      	lsls	r1, r2, #5
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	440a      	add	r2, r1
 8001b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fbde 	bl	80052ea <USB_HC_Halt>
 8001b2e:	e045      	b.n	8001bbc <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	333f      	adds	r3, #63	; 0x3f
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00a      	beq.n	8001b5c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	333f      	adds	r3, #63	; 0x3f
 8001b56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d12f      	bne.n	8001bbc <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3358      	adds	r3, #88	; 0x58
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d121      	bne.n	8001bbc <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	335d      	adds	r3, #93	; 0x5d
 8001b88:	2203      	movs	r2, #3
 8001b8a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	0151      	lsls	r1, r2, #5
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	440a      	add	r2, r1
 8001ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fb97 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2310      	movs	r3, #16
 8001bcc:	6093      	str	r3, [r2, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	015a      	lsls	r2, r3, #5
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d119      	bne.n	8001c3a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c12:	461a      	mov	r2, r3
 8001c14:	2304      	movs	r3, #4
 8001c16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	0151      	lsls	r1, r2, #5
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	440a      	add	r2, r1
 8001c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001c38:	e33e      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d141      	bne.n	8001cd4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2320      	movs	r3, #32
 8001c60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	333d      	adds	r3, #61	; 0x3d
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	f040 831f 	bne.w	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	333d      	adds	r3, #61	; 0x3d
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	335c      	adds	r3, #92	; 0x5c
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	0151      	lsls	r1, r2, #5
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	440a      	add	r2, r1
 8001cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fb0c 	bl	80052ea <USB_HC_Halt>
}
 8001cd2:	e2f1      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d13f      	bne.n	8001d6a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	335d      	adds	r3, #93	; 0x5d
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	333d      	adds	r3, #61	; 0x3d
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3358      	adds	r3, #88	; 0x58
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	0151      	lsls	r1, r2, #5
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	440a      	add	r2, r1
 8001d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 faca 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	461a      	mov	r2, r3
 8001d64:	2340      	movs	r3, #64	; 0x40
 8001d66:	6093      	str	r3, [r2, #8]
}
 8001d68:	e2a6      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d122      	bne.n	8001dc8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	0151      	lsls	r1, r2, #5
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	440a      	add	r2, r1
 8001d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fa9c 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc4:	6093      	str	r3, [r2, #8]
}
 8001dc6:	e277      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d135      	bne.n	8001e4a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3358      	adds	r3, #88	; 0x58
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	0151      	lsls	r1, r2, #5
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	440a      	add	r2, r1
 8001e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fa64 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	335d      	adds	r3, #93	; 0x5d
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
}
 8001e48:	e236      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d12b      	bne.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2308      	movs	r3, #8
 8001e70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	0151      	lsls	r1, r2, #5
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	440a      	add	r2, r1
 8001e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fa24 	bl	80052ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	335d      	adds	r3, #93	; 0x5d
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	701a      	strb	r2, [r3, #0]
}
 8001eb6:	e1ff      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d155      	bne.n	8001f7a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	3358      	adds	r3, #88	; 0x58
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	335d      	adds	r3, #93	; 0x5d
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	333d      	adds	r3, #61	; 0x3d
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d114      	bne.n	8001f36 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	333c      	adds	r3, #60	; 0x3c
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	333d      	adds	r3, #61	; 0x3d
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	0151      	lsls	r1, r2, #5
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	440a      	add	r2, r1
 8001f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f9c2 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	2310      	movs	r3, #16
 8001f76:	6093      	str	r3, [r2, #8]
}
 8001f78:	e19e      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d12b      	bne.n	8001fe8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	0151      	lsls	r1, r2, #5
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	440a      	add	r2, r1
 8001fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 f995 	bl	80052ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	335d      	adds	r3, #93	; 0x5d
 8001fd0:	2206      	movs	r2, #6
 8001fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	6093      	str	r3, [r2, #8]
}
 8001fe6:	e167      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffe:	d135      	bne.n	800206c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	0151      	lsls	r1, r2, #5
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	440a      	add	r2, r1
 8002016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f003 f95d 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	461a      	mov	r2, r3
 800203e:	2310      	movs	r3, #16
 8002040:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	461a      	mov	r2, r3
 8002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002054:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	335d      	adds	r3, #93	; 0x5d
 8002066:	2208      	movs	r2, #8
 8002068:	701a      	strb	r2, [r3, #0]
}
 800206a:	e125      	b.n	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b02      	cmp	r3, #2
 8002080:	f040 811a 	bne.w	80022b8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	0151      	lsls	r1, r2, #5
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	440a      	add	r2, r1
 800209a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800209e:	f023 0302 	bic.w	r3, r3, #2
 80020a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	335d      	adds	r3, #93	; 0x5d
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d137      	bne.n	800212a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	335c      	adds	r3, #92	; 0x5c
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d00b      	beq.n	80020fc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	333f      	adds	r3, #63	; 0x3f
 80020f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	f040 80c5 	bne.w	8002286 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3351      	adds	r3, #81	; 0x51
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f083 0301 	eor.w	r3, r3, #1
 8002112:	b2d8      	uxtb	r0, r3
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3351      	adds	r3, #81	; 0x51
 8002124:	4602      	mov	r2, r0
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e0ad      	b.n	8002286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	335d      	adds	r3, #93	; 0x5d
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d10a      	bne.n	8002156 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	335c      	adds	r3, #92	; 0x5c
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e097      	b.n	8002286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	335d      	adds	r3, #93	; 0x5d
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d10a      	bne.n	8002182 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	335c      	adds	r3, #92	; 0x5c
 800217c:	2202      	movs	r2, #2
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e081      	b.n	8002286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	335d      	adds	r3, #93	; 0x5d
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b05      	cmp	r3, #5
 8002196:	d10a      	bne.n	80021ae <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	335c      	adds	r3, #92	; 0x5c
 80021a8:	2205      	movs	r2, #5
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e06b      	b.n	8002286 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	335d      	adds	r3, #93	; 0x5d
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b06      	cmp	r3, #6
 80021c2:	d00a      	beq.n	80021da <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	335d      	adds	r3, #93	; 0x5d
 80021d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d155      	bne.n	8002286 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	3358      	adds	r3, #88	; 0x58
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	1c59      	adds	r1, r3, #1
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4403      	add	r3, r0
 80021fc:	3358      	adds	r3, #88	; 0x58
 80021fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3358      	adds	r3, #88	; 0x58
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d914      	bls.n	8002240 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3358      	adds	r3, #88	; 0x58
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	335c      	adds	r3, #92	; 0x5c
 800223a:	2204      	movs	r2, #4
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e009      	b.n	8002254 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800226a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002272:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2302      	movs	r3, #2
 8002296:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	b2d8      	uxtb	r0, r3
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	335c      	adds	r3, #92	; 0x5c
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	4601      	mov	r1, r0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 fe62 	bl	8007f7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	0c5b      	lsrs	r3, r3, #17
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d003      	beq.n	8002304 <HCD_RXQLVL_IRQHandler+0x44>
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	f000 8082 	beq.w	8002406 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002302:	e083      	b.n	800240c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07f      	beq.n	800240a <HCD_RXQLVL_IRQHandler+0x14a>
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3344      	adds	r3, #68	; 0x44
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d074      	beq.n	800240a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	3344      	adds	r3, #68	; 0x44
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	b292      	uxth	r2, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f002 fb75 	bl	8004a2a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3344      	adds	r3, #68	; 0x44
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	18d1      	adds	r1, r2, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4403      	add	r3, r0
 8002364:	3344      	adds	r3, #68	; 0x44
 8002366:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	334c      	adds	r3, #76	; 0x4c
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	18d1      	adds	r1, r2, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4403      	add	r3, r0
 800238c:	334c      	adds	r3, #76	; 0x4c
 800238e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HCD_RXQLVL_IRQHandler+0x154>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d031      	beq.n	800240a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	3350      	adds	r3, #80	; 0x50
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2d8      	uxtb	r0, r3
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3350      	adds	r3, #80	; 0x50
 8002400:	4602      	mov	r2, r0
 8002402:	701a      	strb	r2, [r3, #0]
      break;
 8002404:	e001      	b.n	800240a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800240a:	bf00      	nop
  }
}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	1ff80000 	.word	0x1ff80000

08002418 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002444:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	d113      	bne.n	8002478 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10a      	bne.n	8002470 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002468:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f005 fd6a 	bl	8007f44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d147      	bne.n	8002512 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d129      	bne.n	80024e8 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d113      	bne.n	80024c4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a6:	d106      	bne.n	80024b6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fbf6 	bl	8004ca0 <USB_InitFSLSPClkSel>
 80024b4:	e011      	b.n	80024da <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 fbef 	bl	8004ca0 <USB_InitFSLSPClkSel>
 80024c2:	e00a      	b.n	80024da <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d2:	461a      	mov	r2, r3
 80024d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024d8:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f005 fd5c 	bl	8007f98 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f005 fd2f 	bl	8007f44 <HAL_HCD_Connect_Callback>
 80024e6:	e014      	b.n	8002512 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f005 fd63 	bl	8007fb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80024fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002500:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002510:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b20      	cmp	r3, #32
 800251a:	d103      	bne.n	8002524 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f043 0320 	orr.w	r3, r3, #32
 8002522:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e10f      	b.n	800276a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f005 f9c6 	bl	80078f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	; 0x24
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800257c:	f001 f9ac 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8002580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a7b      	ldr	r2, [pc, #492]	; (8002774 <HAL_I2C_Init+0x23c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d807      	bhi.n	800259c <HAL_I2C_Init+0x64>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a7a      	ldr	r2, [pc, #488]	; (8002778 <HAL_I2C_Init+0x240>)
 8002590:	4293      	cmp	r3, r2
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e006      	b.n	80025aa <HAL_I2C_Init+0x72>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a77      	ldr	r2, [pc, #476]	; (800277c <HAL_I2C_Init+0x244>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0db      	b.n	800276a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a72      	ldr	r2, [pc, #456]	; (8002780 <HAL_I2C_Init+0x248>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0c9b      	lsrs	r3, r3, #18
 80025bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a64      	ldr	r2, [pc, #400]	; (8002774 <HAL_I2C_Init+0x23c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d802      	bhi.n	80025ec <HAL_I2C_Init+0xb4>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3301      	adds	r3, #1
 80025ea:	e009      	b.n	8002600 <HAL_I2C_Init+0xc8>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a63      	ldr	r2, [pc, #396]	; (8002784 <HAL_I2C_Init+0x24c>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	3301      	adds	r3, #1
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4956      	ldr	r1, [pc, #344]	; (8002774 <HAL_I2C_Init+0x23c>)
 800261c:	428b      	cmp	r3, r1
 800261e:	d80d      	bhi.n	800263c <HAL_I2C_Init+0x104>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e59      	subs	r1, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fbb1 f3f3 	udiv	r3, r1, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	bf38      	it	cc
 8002638:	2304      	movcc	r3, #4
 800263a:	e04f      	b.n	80026dc <HAL_I2C_Init+0x1a4>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <HAL_I2C_Init+0x130>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e012      	b.n	800268e <HAL_I2C_Init+0x156>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e58      	subs	r0, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	0099      	lsls	r1, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	fbb0 f3f3 	udiv	r3, r0, r3
 800267e:	3301      	adds	r3, #1
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x15e>
 8002692:	2301      	movs	r3, #1
 8002694:	e022      	b.n	80026dc <HAL_I2C_Init+0x1a4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <HAL_I2C_Init+0x184>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1e58      	subs	r0, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	440b      	add	r3, r1
 80026ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ba:	e00f      	b.n	80026dc <HAL_I2C_Init+0x1a4>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	0099      	lsls	r1, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	6809      	ldr	r1, [r1, #0]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800270a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6911      	ldr	r1, [r2, #16]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	430b      	orrs	r3, r1
 800271e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	000186a0 	.word	0x000186a0
 8002778:	001e847f 	.word	0x001e847f
 800277c:	003d08ff 	.word	0x003d08ff
 8002780:	431bde83 	.word	0x431bde83
 8002784:	10624dd3 	.word	0x10624dd3

08002788 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e128      	b.n	80029ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a90      	ldr	r2, [pc, #576]	; (80029f4 <HAL_I2S_Init+0x26c>)
 80027b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f005 f8e3 	bl	8007980 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027d0:	f023 030f 	bic.w	r3, r3, #15
 80027d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2202      	movs	r2, #2
 80027dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d060      	beq.n	80028a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027ee:	2310      	movs	r3, #16
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e001      	b.n	80027f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d802      	bhi.n	8002806 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002806:	2001      	movs	r0, #1
 8002808:	f001 f970 	bl	8003aec <HAL_RCCEx_GetPeriphCLKFreq>
 800280c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002816:	d125      	bne.n	8002864 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d010      	beq.n	8002842 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	fbb2 f2f3 	udiv	r2, r2, r3
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	3305      	adds	r3, #5
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e01f      	b.n	8002882 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	fbb2 f2f3 	udiv	r2, r2, r3
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	3305      	adds	r3, #5
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	e00e      	b.n	8002882 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fbb2 f2f3 	udiv	r2, r2, r3
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	461a      	mov	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	3305      	adds	r3, #5
 8002880:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_I2S_Init+0x270>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	08db      	lsrs	r3, r3, #3
 800288c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e003      	b.n	80028b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d902      	bls.n	80028bc <HAL_I2S_Init+0x134>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	2bff      	cmp	r3, #255	; 0xff
 80028ba:	d907      	bls.n	80028cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	f043 0210 	orr.w	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e08f      	b.n	80029ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	ea42 0103 	orr.w	r1, r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	430a      	orrs	r2, r1
 80028de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028ea:	f023 030f 	bic.w	r3, r3, #15
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6851      	ldr	r1, [r2, #4]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6892      	ldr	r2, [r2, #8]
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68d2      	ldr	r2, [r2, #12]
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6992      	ldr	r2, [r2, #24]
 8002902:	430a      	orrs	r2, r1
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d161      	bne.n	80029dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a38      	ldr	r2, [pc, #224]	; (80029fc <HAL_I2S_Init+0x274>)
 800291c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a37      	ldr	r2, [pc, #220]	; (8002a00 <HAL_I2S_Init+0x278>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_I2S_Init+0x1a4>
 8002928:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_I2S_Init+0x27c>)
 800292a:	e001      	b.n	8002930 <HAL_I2S_Init+0x1a8>
 800292c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4932      	ldr	r1, [pc, #200]	; (8002a00 <HAL_I2S_Init+0x278>)
 8002938:	428a      	cmp	r2, r1
 800293a:	d101      	bne.n	8002940 <HAL_I2S_Init+0x1b8>
 800293c:	4a31      	ldr	r2, [pc, #196]	; (8002a04 <HAL_I2S_Init+0x27c>)
 800293e:	e001      	b.n	8002944 <HAL_I2S_Init+0x1bc>
 8002940:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002944:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002948:	f023 030f 	bic.w	r3, r3, #15
 800294c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <HAL_I2S_Init+0x278>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_I2S_Init+0x1d4>
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_I2S_Init+0x27c>)
 800295a:	e001      	b.n	8002960 <HAL_I2S_Init+0x1d8>
 800295c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002960:	2202      	movs	r2, #2
 8002962:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_I2S_Init+0x278>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <HAL_I2S_Init+0x1ea>
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_I2S_Init+0x27c>)
 8002970:	e001      	b.n	8002976 <HAL_I2S_Init+0x1ee>
 8002972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002982:	d003      	beq.n	800298c <HAL_I2S_Init+0x204>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d103      	bne.n	8002994 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800298c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	e001      	b.n	8002998 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	b299      	uxth	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80029ae:	4303      	orrs	r3, r0
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	430b      	orrs	r3, r1
 80029b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	4313      	orrs	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_I2S_Init+0x278>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_I2S_Init+0x24c>
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <HAL_I2S_Init+0x27c>)
 80029d2:	e001      	b.n	80029d8 <HAL_I2S_Init+0x250>
 80029d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d8:	897a      	ldrh	r2, [r7, #10]
 80029da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	08002aff 	.word	0x08002aff
 80029f8:	cccccccd 	.word	0xcccccccd
 80029fc:	08002c15 	.word	0x08002c15
 8002a00:	40003800 	.word	0x40003800
 8002a04:	40003400 	.word	0x40003400

08002a08 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10e      	bne.n	8002a98 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ffb8 	bl	8002a08 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	1c9a      	adds	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10e      	bne.n	8002af6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ae6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff93 	bl	8002a1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d13a      	bne.n	8002b90 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d109      	bne.n	8002b38 <I2S_IRQHandler+0x3a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d102      	bne.n	8002b38 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffb4 	bl	8002aa0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d126      	bne.n	8002b90 <I2S_IRQHandler+0x92>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d11f      	bne.n	8002b90 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f043 0202 	orr.w	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff50 	bl	8002a30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d136      	bne.n	8002c0a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d109      	bne.n	8002bba <I2S_IRQHandler+0xbc>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d102      	bne.n	8002bba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff45 	bl	8002a44 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d122      	bne.n	8002c0a <I2S_IRQHandler+0x10c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d11b      	bne.n	8002c0a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002be0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff13 	bl	8002a30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4aa2      	ldr	r2, [pc, #648]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c2e:	4ba2      	ldr	r3, [pc, #648]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c30:	e001      	b.n	8002c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a9b      	ldr	r2, [pc, #620]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c4c:	4b9a      	ldr	r3, [pc, #616]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c4e:	e001      	b.n	8002c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d004      	beq.n	8002c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8099 	bne.w	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f925 	bl	8002ed0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f9c8 	bl	8003030 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d13a      	bne.n	8002d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d035      	beq.n	8002d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7e      	ldr	r2, [pc, #504]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002cbe:	4b7e      	ldr	r3, [pc, #504]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cc0:	e001      	b.n	8002cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4979      	ldr	r1, [pc, #484]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cce:	428b      	cmp	r3, r1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cd2:	4b79      	ldr	r3, [pc, #484]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cd4:	e001      	b.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cde:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fe88 	bl	8002a30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	f040 80be 	bne.w	8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80b8 	beq.w	8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a59      	ldr	r2, [pc, #356]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d52:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d54:	e001      	b.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4954      	ldr	r1, [pc, #336]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d62:	428b      	cmp	r3, r1
 8002d64:	d101      	bne.n	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d66:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d68:	e001      	b.n	8002d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f043 0204 	orr.w	r2, r3, #4
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fe4a 	bl	8002a30 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d9c:	e084      	b.n	8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d107      	bne.n	8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f8be 	bl	8002f34 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8fd 	bl	8002fcc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d12f      	bne.n	8002e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02a      	beq.n	8002e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002df4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e02:	e001      	b.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4929      	ldr	r1, [pc, #164]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e16:	e001      	b.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fdfa 	bl	8002a30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d131      	bne.n	8002eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02c      	beq.n	8002eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e5c:	e001      	b.n	8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4912      	ldr	r1, [pc, #72]	; (8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e70:	e001      	b.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e8a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fdc5 	bl	8002a30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ea6:	e000      	b.n	8002eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ea8:	bf00      	nop
}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40003800 	.word	0x40003800
 8002eb8:	40003400 	.word	0x40003400

08002ebc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	1c99      	adds	r1, r3, #2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6251      	str	r1, [r2, #36]	; 0x24
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d113      	bne.n	8002f2a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ffc9 	bl	8002ebc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	1c99      	adds	r1, r3, #2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6251      	str	r1, [r2, #36]	; 0x24
 8002f46:	8819      	ldrh	r1, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <I2SEx_TxISR_I2SExt+0x22>
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002f54:	e001      	b.n	8002f5a <I2SEx_TxISR_I2SExt+0x26>
 8002f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d121      	bne.n	8002fba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <I2SEx_TxISR_I2SExt+0x50>
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002f82:	e001      	b.n	8002f88 <I2SEx_TxISR_I2SExt+0x54>
 8002f84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	490d      	ldr	r1, [pc, #52]	; (8002fc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002f90:	428b      	cmp	r3, r1
 8002f92:	d101      	bne.n	8002f98 <I2SEx_TxISR_I2SExt+0x64>
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002f96:	e001      	b.n	8002f9c <I2SEx_TxISR_I2SExt+0x68>
 8002f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff81 	bl	8002ebc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40003800 	.word	0x40003800
 8002fc8:	40003400 	.word	0x40003400

08002fcc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68d8      	ldr	r0, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	1c99      	adds	r1, r3, #2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fe4:	b282      	uxth	r2, r0
 8002fe6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d113      	bne.n	8003028 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800300e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff4a 	bl	8002ebc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <I2SEx_RxISR_I2SExt+0x90>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <I2SEx_RxISR_I2SExt+0x16>
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003044:	e001      	b.n	800304a <I2SEx_RxISR_I2SExt+0x1a>
 8003046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800304a:	68d8      	ldr	r0, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	1c99      	adds	r1, r3, #2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003056:	b282      	uxth	r2, r0
 8003058:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d121      	bne.n	80030b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <I2SEx_RxISR_I2SExt+0x90>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <I2SEx_RxISR_I2SExt+0x50>
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <I2SEx_RxISR_I2SExt+0x94>)
 800307e:	e001      	b.n	8003084 <I2SEx_RxISR_I2SExt+0x54>
 8003080:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	490d      	ldr	r1, [pc, #52]	; (80030c0 <I2SEx_RxISR_I2SExt+0x90>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d101      	bne.n	8003094 <I2SEx_RxISR_I2SExt+0x64>
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003092:	e001      	b.n	8003098 <I2SEx_RxISR_I2SExt+0x68>
 8003094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003098:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800309c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff03 	bl	8002ebc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40003800 	.word	0x40003800
 80030c4:	40003400 	.word	0x40003400

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e22d      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d075      	beq.n	80031d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e6:	4ba3      	ldr	r3, [pc, #652]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d00c      	beq.n	800310c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4ba0      	ldr	r3, [pc, #640]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d112      	bne.n	8003124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b9d      	ldr	r3, [pc, #628]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310a:	d10b      	bne.n	8003124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	4b99      	ldr	r3, [pc, #612]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x108>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d157      	bne.n	80031d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e208      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x74>
 800312e:	4b91      	ldr	r3, [pc, #580]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a90      	ldr	r2, [pc, #576]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e01d      	b.n	8003178 <HAL_RCC_OscConfig+0xb0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x98>
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a8a      	ldr	r2, [pc, #552]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a87      	ldr	r2, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0xb0>
 8003160:	4b84      	ldr	r3, [pc, #528]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a83      	ldr	r2, [pc, #524]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fd fa64 	bl	800064c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7fd fa60 	bl	800064c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1cd      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0xc0>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fd fa50 	bl	800064c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fd fa4c 	bl	800064c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e1b9      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	4b6c      	ldr	r3, [pc, #432]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0xe8>
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d063      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ea:	4b62      	ldr	r3, [pc, #392]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d11c      	bne.n	8003230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_RCC_OscConfig+0x152>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d001      	beq.n	800321a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e18d      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4952      	ldr	r1, [pc, #328]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	e03a      	b.n	80032a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003238:	4b4f      	ldr	r3, [pc, #316]	; (8003378 <HAL_RCC_OscConfig+0x2b0>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fd fa05 	bl	800064c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003246:	f7fd fa01 	bl	800064c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e16e      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4940      	ldr	r1, [pc, #256]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e015      	b.n	80032a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <HAL_RCC_OscConfig+0x2b0>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd f9e4 	bl	800064c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003288:	f7fd f9e0 	bl	800064c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e14d      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d030      	beq.n	8003314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <HAL_RCC_OscConfig+0x2b4>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fd f9c4 	bl	800064c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fd f9c0 	bl	800064c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e12d      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	4b26      	ldr	r3, [pc, #152]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x200>
 80032e6:	e015      	b.n	8003314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x2b4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fd f9ad 	bl	800064c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fd f9a9 	bl	800064c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e116      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a0 	beq.w	8003462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x2b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d121      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x2b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_RCC_OscConfig+0x2b8>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7fd f96f 	bl	800064c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	e011      	b.n	8003396 <HAL_RCC_OscConfig+0x2ce>
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
 8003380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fd f962 	bl	800064c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0cf      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_OscConfig+0x478>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2f0>
 80033aa:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a65      	ldr	r2, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	e01c      	b.n	80033f2 <HAL_RCC_OscConfig+0x32a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d10c      	bne.n	80033da <HAL_RCC_OscConfig+0x312>
 80033c0:	4b60      	ldr	r3, [pc, #384]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a5f      	ldr	r2, [pc, #380]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a5c      	ldr	r2, [pc, #368]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e00b      	b.n	80033f2 <HAL_RCC_OscConfig+0x32a>
 80033da:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a59      	ldr	r2, [pc, #356]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a56      	ldr	r2, [pc, #344]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fd f927 	bl	800064c <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd f923 	bl	800064c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e08e      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCC_OscConfig+0x33a>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fd f911 	bl	800064c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fd f90d 	bl	800064c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e078      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a3a      	ldr	r2, [pc, #232]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d064      	beq.n	8003534 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	d05c      	beq.n	8003530 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d141      	bne.n	8003502 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <HAL_RCC_OscConfig+0x480>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fd f8e2 	bl	800064c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fd f8de 	bl	800064c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04b      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	491d      	ldr	r1, [pc, #116]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_RCC_OscConfig+0x480>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fd f8b7 	bl	800064c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fd f8b3 	bl	800064c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e020      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x41a>
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_OscConfig+0x480>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fd f8a0 	bl	800064c <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7fd f89c 	bl	800064c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e009      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCC_OscConfig+0x47c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x448>
 800352e:	e001      	b.n	8003534 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40007000 	.word	0x40007000
 8003544:	40023800 	.word	0x40023800
 8003548:	42470060 	.word	0x42470060

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0ca      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b67      	ldr	r3, [pc, #412]	; (8003700 <HAL_RCC_ClockConfig+0x1b4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d90c      	bls.n	8003588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_RCC_ClockConfig+0x1b4>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b62      	ldr	r3, [pc, #392]	; (8003700 <HAL_RCC_ClockConfig+0x1b4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b6      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b58      	ldr	r3, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a57      	ldr	r2, [pc, #348]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b52      	ldr	r3, [pc, #328]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b4f      	ldr	r3, [pc, #316]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494c      	ldr	r1, [pc, #304]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d044      	beq.n	800366c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b46      	ldr	r3, [pc, #280]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d119      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07d      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d003      	beq.n	800360a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	2b03      	cmp	r3, #3
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06d      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e065      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4933      	ldr	r1, [pc, #204]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800363c:	f7fd f806 	bl	800064c <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fd f802 	bl	800064c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04d      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 020c 	and.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d1eb      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCC_ClockConfig+0x1b4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d20c      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_RCC_ClockConfig+0x1b4>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_RCC_ClockConfig+0x1b4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e030      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4915      	ldr	r1, [pc, #84]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490d      	ldr	r1, [pc, #52]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f81d 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036d6:	4601      	mov	r1, r0
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a09      	ldr	r2, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ea:	4a08      	ldr	r2, [pc, #32]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7fc ff68 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00
 8003704:	40023800 	.word	0x40023800
 8003708:	08008cc0 	.word	0x08008cc0
 800370c:	20000028 	.word	0x20000028

08003710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	2300      	movs	r3, #0
 8003720:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b04      	cmp	r3, #4
 8003730:	d007      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x32>
 8003732:	2b08      	cmp	r3, #8
 8003734:	d008      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x38>
 8003736:	2b00      	cmp	r3, #0
 8003738:	f040 80b4 	bne.w	80038a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800373e:	60bb      	str	r3, [r7, #8]
       break;
 8003740:	e0b3      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003742:	4b5e      	ldr	r3, [pc, #376]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003744:	60bb      	str	r3, [r7, #8]
      break;
 8003746:	e0b0      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003748:	4b5a      	ldr	r3, [pc, #360]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003750:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003752:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04a      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	f04f 0400 	mov.w	r4, #0
 8003768:	f240 11ff 	movw	r1, #511	; 0x1ff
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	ea03 0501 	and.w	r5, r3, r1
 8003774:	ea04 0602 	and.w	r6, r4, r2
 8003778:	4629      	mov	r1, r5
 800377a:	4632      	mov	r2, r6
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	0154      	lsls	r4, r2, #5
 8003786:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800378a:	014b      	lsls	r3, r1, #5
 800378c:	4619      	mov	r1, r3
 800378e:	4622      	mov	r2, r4
 8003790:	1b49      	subs	r1, r1, r5
 8003792:	eb62 0206 	sbc.w	r2, r2, r6
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	f04f 0400 	mov.w	r4, #0
 800379e:	0194      	lsls	r4, r2, #6
 80037a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037a4:	018b      	lsls	r3, r1, #6
 80037a6:	1a5b      	subs	r3, r3, r1
 80037a8:	eb64 0402 	sbc.w	r4, r4, r2
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	00e2      	lsls	r2, r4, #3
 80037b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ba:	00d9      	lsls	r1, r3, #3
 80037bc:	460b      	mov	r3, r1
 80037be:	4614      	mov	r4, r2
 80037c0:	195b      	adds	r3, r3, r5
 80037c2:	eb44 0406 	adc.w	r4, r4, r6
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	0262      	lsls	r2, r4, #9
 80037d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037d4:	0259      	lsls	r1, r3, #9
 80037d6:	460b      	mov	r3, r1
 80037d8:	4614      	mov	r4, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	4621      	mov	r1, r4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	461a      	mov	r2, r3
 80037e6:	4623      	mov	r3, r4
 80037e8:	f7fc fd4a 	bl	8000280 <__aeabi_uldivmod>
 80037ec:	4603      	mov	r3, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e049      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	f04f 0400 	mov.w	r4, #0
 80037fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	ea03 0501 	and.w	r5, r3, r1
 800380a:	ea04 0602 	and.w	r6, r4, r2
 800380e:	4629      	mov	r1, r5
 8003810:	4632      	mov	r2, r6
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f04f 0400 	mov.w	r4, #0
 800381a:	0154      	lsls	r4, r2, #5
 800381c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003820:	014b      	lsls	r3, r1, #5
 8003822:	4619      	mov	r1, r3
 8003824:	4622      	mov	r2, r4
 8003826:	1b49      	subs	r1, r1, r5
 8003828:	eb62 0206 	sbc.w	r2, r2, r6
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	0194      	lsls	r4, r2, #6
 8003836:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800383a:	018b      	lsls	r3, r1, #6
 800383c:	1a5b      	subs	r3, r3, r1
 800383e:	eb64 0402 	sbc.w	r4, r4, r2
 8003842:	f04f 0100 	mov.w	r1, #0
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	00e2      	lsls	r2, r4, #3
 800384c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003850:	00d9      	lsls	r1, r3, #3
 8003852:	460b      	mov	r3, r1
 8003854:	4614      	mov	r4, r2
 8003856:	195b      	adds	r3, r3, r5
 8003858:	eb44 0406 	adc.w	r4, r4, r6
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	02a2      	lsls	r2, r4, #10
 8003866:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800386a:	0299      	lsls	r1, r3, #10
 800386c:	460b      	mov	r3, r1
 800386e:	4614      	mov	r4, r2
 8003870:	4618      	mov	r0, r3
 8003872:	4621      	mov	r1, r4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	461a      	mov	r2, r3
 800387c:	4623      	mov	r3, r4
 800387e:	f7fc fcff 	bl	8000280 <__aeabi_uldivmod>
 8003882:	4603      	mov	r3, r0
 8003884:	460c      	mov	r4, r1
 8003886:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	3301      	adds	r3, #1
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	60bb      	str	r3, [r7, #8]
      break;
 80038a2:	e002      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038a6:	60bb      	str	r3, [r7, #8]
      break;
 80038a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038aa:	68bb      	ldr	r3, [r7, #8]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	00f42400 	.word	0x00f42400
 80038bc:	007a1200 	.word	0x007a1200

080038c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000028 	.word	0x20000028

080038d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038dc:	f7ff fff0 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 80038e0:	4601      	mov	r1, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4a03      	ldr	r2, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08008cd0 	.word	0x08008cd0

08003900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003904:	f7ff ffdc 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8003908:	4601      	mov	r1, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0b5b      	lsrs	r3, r3, #13
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08008cd0 	.word	0x08008cd0

08003928 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800394c:	2b00      	cmp	r3, #0
 800394e:	d035      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003950:	4b62      	ldr	r3, [pc, #392]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003956:	f7fc fe79 	bl	800064c <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800395e:	f7fc fe75 	bl	800064c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0b0      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003970:	4b5b      	ldr	r3, [pc, #364]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	019a      	lsls	r2, r3, #6
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	071b      	lsls	r3, r3, #28
 8003988:	4955      	ldr	r1, [pc, #340]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003990:	4b52      	ldr	r3, [pc, #328]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003996:	f7fc fe59 	bl	800064c <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800399e:	f7fc fe55 	bl	800064c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e090      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039b0:	4b4b      	ldr	r3, [pc, #300]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8083 	beq.w	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	4b44      	ldr	r3, [pc, #272]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039e6:	4b3f      	ldr	r3, [pc, #252]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a3e      	ldr	r2, [pc, #248]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039f2:	f7fc fe2b 	bl	800064c <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fc fe27 	bl	800064c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e062      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a0c:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a18:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02f      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d028      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a36:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a46:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a4c:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d114      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7fc fdf5 	bl	800064c <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fc fdf1 	bl	800064c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e02a      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	4b18      	ldr	r3, [pc, #96]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ee      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a94:	d10d      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	490d      	ldr	r1, [pc, #52]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]
 8003ab0:	e005      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003abc:	6093      	str	r3, [r2, #8]
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aca:	4905      	ldr	r1, [pc, #20]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	42470068 	.word	0x42470068
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40007000 	.word	0x40007000
 8003ae8:	42470e40 	.word	0x42470e40

08003aec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d13d      	bne.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b12:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d12f      	bne.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b20:	617b      	str	r3, [r7, #20]
          break;
 8003b22:	e02f      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b30:	d108      	bne.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e007      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b44:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6e:	0f1b      	lsrs	r3, r3, #28
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	617b      	str	r3, [r7, #20]
          break;
 8003b7c:	e002      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
          break;
 8003b82:	bf00      	nop
        }
      }
      break;
 8003b84:	bf00      	nop
    }
  }
  return frequency;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00bb8000 	.word	0x00bb8000
 8003b9c:	007a1200 	.word	0x007a1200
 8003ba0:	00f42400 	.word	0x00f42400

08003ba4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e056      	b.n	8003c64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f003 ff3d 	bl	8007a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	ea42 0103 	orr.w	r1, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	f003 0104 	and.w	r1, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e01d      	b.n	8003cba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f003 ff24 	bl	8007ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f000 f95e 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d007      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d122      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11b      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f06f 0202 	mvn.w	r2, #2
 8003d36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8ee 	bl	8003f2e <HAL_TIM_IC_CaptureCallback>
 8003d52:	e005      	b.n	8003d60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8e0 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8f1 	bl	8003f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d122      	bne.n	8003dba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d11b      	bne.n	8003dba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0204 	mvn.w	r2, #4
 8003d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8c4 	bl	8003f2e <HAL_TIM_IC_CaptureCallback>
 8003da6:	e005      	b.n	8003db4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8b6 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8c7 	bl	8003f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d122      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d11b      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f06f 0208 	mvn.w	r2, #8
 8003dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2204      	movs	r2, #4
 8003de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f89a 	bl	8003f2e <HAL_TIM_IC_CaptureCallback>
 8003dfa:	e005      	b.n	8003e08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f88c 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f89d 	bl	8003f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d122      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d11b      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f06f 0210 	mvn.w	r2, #16
 8003e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2208      	movs	r2, #8
 8003e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f870 	bl	8003f2e <HAL_TIM_IC_CaptureCallback>
 8003e4e:	e005      	b.n	8003e5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f862 	bl	8003f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f873 	bl	8003f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10e      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0201 	mvn.w	r2, #1
 8003e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f003 f9b9 	bl	8007200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d10e      	bne.n	8003eba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f948 	bl	800414a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f838 	bl	8003f56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0220 	mvn.w	r2, #32
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f912 	bl	8004136 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a40      	ldr	r2, [pc, #256]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d00f      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3d      	ldr	r2, [pc, #244]	; (8004084 <TIM_Base_SetConfig+0x118>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00b      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <TIM_Base_SetConfig+0x11c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3b      	ldr	r2, [pc, #236]	; (800408c <TIM_Base_SetConfig+0x120>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d108      	bne.n	8003fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d027      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2c      	ldr	r2, [pc, #176]	; (8004084 <TIM_Base_SetConfig+0x118>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d023      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <TIM_Base_SetConfig+0x11c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01f      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <TIM_Base_SetConfig+0x120>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d017      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a28      	ldr	r2, [pc, #160]	; (8004094 <TIM_Base_SetConfig+0x128>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a27      	ldr	r2, [pc, #156]	; (8004098 <TIM_Base_SetConfig+0x12c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00f      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a26      	ldr	r2, [pc, #152]	; (800409c <TIM_Base_SetConfig+0x130>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <TIM_Base_SetConfig+0x134>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <TIM_Base_SetConfig+0x138>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <TIM_Base_SetConfig+0x13c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_Base_SetConfig+0xf8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800
 800408c:	40000c00 	.word	0x40000c00
 8004090:	40010400 	.word	0x40010400
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800
 80040a0:	40001800 	.word	0x40001800
 80040a4:	40001c00 	.word	0x40001c00
 80040a8:	40002000 	.word	0x40002000

080040ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e032      	b.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040fc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e03f      	b.n	80041f0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f003 fd0f 	bl	8007ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2224      	movs	r2, #36	; 0x24
 800418e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f90c 	bl	80043c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b20      	cmp	r3, #32
 8004216:	f040 8083 	bne.w	8004320 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_UART_Transmit+0x2e>
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e07b      	b.n	8004322 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_UART_Transmit+0x40>
 8004234:	2302      	movs	r3, #2
 8004236:	e074      	b.n	8004322 <HAL_UART_Transmit+0x12a>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2221      	movs	r2, #33	; 0x21
 800424a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800424e:	f7fc f9fd 	bl	800064c <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	88fa      	ldrh	r2, [r7, #6]
 800425e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004260:	e042      	b.n	80042e8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004278:	d122      	bne.n	80042c0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f850 	bl	800432a <UART_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e046      	b.n	8004322 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	3302      	adds	r3, #2
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	e017      	b.n	80042e8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	e013      	b.n	80042e8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f82d 	bl	800432a <UART_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e023      	b.n	8004322 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	60ba      	str	r2, [r7, #8]
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1b7      	bne.n	8004262 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	2140      	movs	r1, #64	; 0x40
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f814 	bl	800432a <UART_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e00a      	b.n	8004322 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433a:	e02c      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d028      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x30>
 800434a:	f7fc f97f 	bl	800064c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	429a      	cmp	r2, r3
 8004358:	d21d      	bcs.n	8004396 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004368:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e00f      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d0c3      	beq.n	800433c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c0:	b5b0      	push	{r4, r5, r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004400:	f023 030c 	bic.w	r3, r3, #12
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	68f9      	ldr	r1, [r7, #12]
 800440a:	430b      	orrs	r3, r1
 800440c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442c:	f040 80e4 	bne.w	80045f8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4aab      	ldr	r2, [pc, #684]	; (80046e4 <UART_SetConfig+0x324>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <UART_SetConfig+0x84>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4aaa      	ldr	r2, [pc, #680]	; (80046e8 <UART_SetConfig+0x328>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d16c      	bne.n	800451e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004444:	f7ff fa5c 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8004448:	4602      	mov	r2, r0
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009a      	lsls	r2, r3, #2
 8004452:	441a      	add	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	4aa3      	ldr	r2, [pc, #652]	; (80046ec <UART_SetConfig+0x32c>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	011c      	lsls	r4, r3, #4
 8004468:	f7ff fa4a 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 800446c:	4602      	mov	r2, r0
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009a      	lsls	r2, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004482:	f7ff fa3d 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8004486:	4602      	mov	r2, r0
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	4a93      	ldr	r2, [pc, #588]	; (80046ec <UART_SetConfig+0x32c>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2264      	movs	r2, #100	; 0x64
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	1aeb      	subs	r3, r5, r3
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	3332      	adds	r3, #50	; 0x32
 80044b0:	4a8e      	ldr	r2, [pc, #568]	; (80046ec <UART_SetConfig+0x32c>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044be:	441c      	add	r4, r3
 80044c0:	f7ff fa1e 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009a      	lsls	r2, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80044da:	f7ff fa11 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 80044de:	4602      	mov	r2, r0
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009a      	lsls	r2, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	4a7d      	ldr	r2, [pc, #500]	; (80046ec <UART_SetConfig+0x32c>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2264      	movs	r2, #100	; 0x64
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	1aeb      	subs	r3, r5, r3
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	3332      	adds	r3, #50	; 0x32
 8004508:	4a78      	ldr	r2, [pc, #480]	; (80046ec <UART_SetConfig+0x32c>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	f003 0207 	and.w	r2, r3, #7
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4422      	add	r2, r4
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	e154      	b.n	80047c8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800451e:	f7ff f9db 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004522:	4602      	mov	r2, r0
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	4a6c      	ldr	r2, [pc, #432]	; (80046ec <UART_SetConfig+0x32c>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	011c      	lsls	r4, r3, #4
 8004542:	f7ff f9c9 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004546:	4602      	mov	r2, r0
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	009a      	lsls	r2, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fbb2 f5f3 	udiv	r5, r2, r3
 800455c:	f7ff f9bc 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004560:	4602      	mov	r2, r0
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009a      	lsls	r2, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	4a5d      	ldr	r2, [pc, #372]	; (80046ec <UART_SetConfig+0x32c>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	2264      	movs	r2, #100	; 0x64
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	1aeb      	subs	r3, r5, r3
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	3332      	adds	r3, #50	; 0x32
 800458a:	4a58      	ldr	r2, [pc, #352]	; (80046ec <UART_SetConfig+0x32c>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004598:	441c      	add	r4, r3
 800459a:	f7ff f99d 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 800459e:	4602      	mov	r2, r0
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009a      	lsls	r2, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80045b4:	f7ff f990 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009a      	lsls	r2, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	4a47      	ldr	r2, [pc, #284]	; (80046ec <UART_SetConfig+0x32c>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	2264      	movs	r2, #100	; 0x64
 80045d8:	fb02 f303 	mul.w	r3, r2, r3
 80045dc:	1aeb      	subs	r3, r5, r3
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	3332      	adds	r3, #50	; 0x32
 80045e2:	4a42      	ldr	r2, [pc, #264]	; (80046ec <UART_SetConfig+0x32c>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f003 0207 	and.w	r2, r3, #7
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4422      	add	r2, r4
 80045f4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80045f6:	e0e7      	b.n	80047c8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a39      	ldr	r2, [pc, #228]	; (80046e4 <UART_SetConfig+0x324>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <UART_SetConfig+0x24c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <UART_SetConfig+0x328>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d171      	bne.n	80046f0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800460c:	f7ff f978 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8004610:	4602      	mov	r2, r0
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009a      	lsls	r2, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	fbb2 f3f3 	udiv	r3, r2, r3
 8004626:	4a31      	ldr	r2, [pc, #196]	; (80046ec <UART_SetConfig+0x32c>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	011c      	lsls	r4, r3, #4
 8004630:	f7ff f966 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8004634:	4602      	mov	r2, r0
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009a      	lsls	r2, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	fbb2 f5f3 	udiv	r5, r2, r3
 800464a:	f7ff f959 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 800464e:	4602      	mov	r2, r0
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009a      	lsls	r2, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	4a21      	ldr	r2, [pc, #132]	; (80046ec <UART_SetConfig+0x32c>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2264      	movs	r2, #100	; 0x64
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	1aeb      	subs	r3, r5, r3
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	3332      	adds	r3, #50	; 0x32
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <UART_SetConfig+0x32c>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004684:	441c      	add	r4, r3
 8004686:	f7ff f93b 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 800468a:	4602      	mov	r2, r0
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	009a      	lsls	r2, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	fbb2 f5f3 	udiv	r5, r2, r3
 80046a0:	f7ff f92e 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009a      	lsls	r2, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <UART_SetConfig+0x32c>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2264      	movs	r2, #100	; 0x64
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	1aeb      	subs	r3, r5, r3
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <UART_SetConfig+0x32c>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4422      	add	r2, r4
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	e071      	b.n	80047c8 <UART_SetConfig+0x408>
 80046e4:	40011000 	.word	0x40011000
 80046e8:	40011400 	.word	0x40011400
 80046ec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80046f0:	f7ff f8f2 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	009a      	lsls	r2, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	4a31      	ldr	r2, [pc, #196]	; (80047d0 <UART_SetConfig+0x410>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	011c      	lsls	r4, r3, #4
 8004714:	f7ff f8e0 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004718:	4602      	mov	r2, r0
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009a      	lsls	r2, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	fbb2 f5f3 	udiv	r5, r2, r3
 800472e:	f7ff f8d3 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004732:	4602      	mov	r2, r0
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009a      	lsls	r2, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <UART_SetConfig+0x410>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2264      	movs	r2, #100	; 0x64
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	1aeb      	subs	r3, r5, r3
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	3332      	adds	r3, #50	; 0x32
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <UART_SetConfig+0x410>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004768:	441c      	add	r4, r3
 800476a:	f7ff f8b5 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 800476e:	4602      	mov	r2, r0
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009a      	lsls	r2, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	fbb2 f5f3 	udiv	r5, r2, r3
 8004784:	f7ff f8a8 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004788:	4602      	mov	r2, r0
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009a      	lsls	r2, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <UART_SetConfig+0x410>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	2264      	movs	r2, #100	; 0x64
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	1aeb      	subs	r3, r5, r3
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	3332      	adds	r3, #50	; 0x32
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <UART_SetConfig+0x410>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	f003 020f 	and.w	r2, r3, #15
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4422      	add	r2, r4
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	e7ff      	b.n	80047c8 <UART_SetConfig+0x408>
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bdb0      	pop	{r4, r5, r7, pc}
 80047d0:	51eb851f 	.word	0x51eb851f

080047d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d4:	b084      	sub	sp, #16
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	f107 001c 	add.w	r0, r7, #28
 80047e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d122      	bne.n	8004832 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f94a 	bl	8004ac0 <USB_CoreReset>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e01a      	b.n	8004868 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f93e 	bl	8004ac0 <USB_CoreReset>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
 800485a:	e005      	b.n	8004868 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10b      	bne.n	8004886 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f043 0206 	orr.w	r2, r3, #6
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004892:	b004      	add	sp, #16
 8004894:	4770      	bx	lr

08004896 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 0201 	bic.w	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d106      	bne.n	8004906 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
 8004904:	e00b      	b.n	800491e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e001      	b.n	800491e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e003      	b.n	8004926 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800491e:	2032      	movs	r0, #50	; 0x32
 8004920:	f7fb fea0 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <USB_FlushTxFifo+0x48>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e006      	b.n	800496a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b20      	cmp	r3, #32
 8004966:	d0f0      	beq.n	800494a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2210      	movs	r2, #16
 800498c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3301      	adds	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <USB_FlushRxFifo+0x40>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d901      	bls.n	80049a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e006      	b.n	80049ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d0f0      	beq.n	800498e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	00030d40 	.word	0x00030d40

080049c0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	4611      	mov	r1, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	460b      	mov	r3, r1
 80049d0:	71fb      	strb	r3, [r7, #7]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80049de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d11a      	bne.n	8004a1c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049e6:	88bb      	ldrh	r3, [r7, #4]
 80049e8:	3303      	adds	r3, #3
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e00f      	b.n	8004a14 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	031a      	lsls	r2, r3, #12
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a00:	461a      	mov	r2, r3
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	3301      	adds	r3, #1
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d3eb      	bcc.n	80049f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3724      	adds	r7, #36	; 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b089      	sub	sp, #36	; 0x24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	3303      	adds	r3, #3
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e00b      	b.n	8004a66 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d3ef      	bcc.n	8004a4e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3724      	adds	r7, #36	; 0x24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a94:	68fb      	ldr	r3, [r7, #12]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0301 	and.w	r3, r3, #1
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <USB_CoreReset+0x64>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e01b      	b.n	8004b16 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	daf2      	bge.n	8004acc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3301      	adds	r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <USB_CoreReset+0x64>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e006      	b.n	8004b16 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d0f0      	beq.n	8004af6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	00030d40 	.word	0x00030d40

08004b28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b28:	b084      	sub	sp, #16
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	f107 001c 	add.w	r0, r7, #28
 8004b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b44:	461a      	mov	r2, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d018      	beq.n	8004bac <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d10a      	bne.n	8004b96 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e014      	b.n	8004bc0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e009      	b.n	8004bc0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bba:	f023 0304 	bic.w	r3, r3, #4
 8004bbe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004bc0:	2110      	movs	r1, #16
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff feb4 	bl	8004930 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff fed7 	bl	800497c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e015      	b.n	8004c00 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be0:	461a      	mov	r2, r3
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d3e5      	bcc.n	8004bd4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8ac 	bl	8004d68 <USB_DriveVbus>

  HAL_Delay(200U);
 8004c10:	20c8      	movs	r0, #200	; 0xc8
 8004c12:	f7fb fd27 	bl	8000664 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c22:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <USB_HostInit+0x164>)
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <USB_HostInit+0x168>)
 8004c42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c46:	e009      	b.n	8004c5c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <USB_HostInit+0x16c>)
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <USB_HostInit+0x170>)
 8004c58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f043 0210 	orr.w	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <USB_HostInit+0x174>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c86:	b004      	add	sp, #16
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	01000200 	.word	0x01000200
 8004c90:	00e00300 	.word	0x00e00300
 8004c94:	00600080 	.word	0x00600080
 8004c98:	004000e0 	.word	0x004000e0
 8004c9c:	a3200008 	.word	0xa3200008

08004ca0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d107      	bne.n	8004cf2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004cee:	6053      	str	r3, [r2, #4]
 8004cf0:	e009      	b.n	8004d06 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d106      	bne.n	8004d06 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d04:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d42:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d44:	2064      	movs	r0, #100	; 0x64
 8004d46:	f7fb fc8d 	bl	8000664 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d56:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d58:	200a      	movs	r0, #10
 8004d5a:	f7fb fc83 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <USB_DriveVbus+0x44>
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d106      	bne.n	8004dac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004daa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db6:	d109      	bne.n	8004dcc <USB_DriveVbus+0x64>
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	0c5b      	lsrs	r3, r3, #17
 8004df8:	f003 0303 	and.w	r3, r3, #3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	b29b      	uxth	r3, r3
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	70fb      	strb	r3, [r7, #3]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70bb      	strb	r3, [r7, #2]
 8004e42:	4613      	mov	r3, r2
 8004e44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d87e      	bhi.n	8004f68 <USB_HC_Init+0x13c>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <USB_HC_Init+0x44>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004f2b 	.word	0x08004f2b
 8004e78:	08004e81 	.word	0x08004e81
 8004e7c:	08004eed 	.word	0x08004eed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da10      	bge.n	8004ebe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004ebc:	e057      	b.n	8004f6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d051      	beq.n	8004f6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ee8:	60d3      	str	r3, [r2, #12]
      break;
 8004eea:	e040      	b.n	8004f6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f240 639d 	movw	r3, #1693	; 0x69d
 8004efe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da34      	bge.n	8004f72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f28:	e023      	b.n	8004f72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f36:	461a      	mov	r2, r3
 8004f38:	f240 2325 	movw	r3, #549	; 0x225
 8004f3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da17      	bge.n	8004f76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f66:	e006      	b.n	8004f76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	e004      	b.n	8004f78 <USB_HC_Init+0x14c>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e002      	b.n	8004f78 <USB_HC_Init+0x14c>
      break;
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <USB_HC_Init+0x14c>
      break;
 8004f76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	2101      	movs	r1, #1
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f92:	4313      	orrs	r3, r2
 8004f94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004fa2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	da03      	bge.n	8004fb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	e001      	b.n	8004fb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004fb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d103      	bne.n	8004fc6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e001      	b.n	8004fca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fca:	787b      	ldrb	r3, [r7, #1]
 8004fcc:	059b      	lsls	r3, r3, #22
 8004fce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fd2:	78bb      	ldrb	r3, [r7, #2]
 8004fd4:	02db      	lsls	r3, r3, #11
 8004fd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004fe0:	049b      	lsls	r3, r3, #18
 8004fe2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fe6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fe8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	0159      	lsls	r1, r3, #5
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005006:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005008:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800500c:	2b03      	cmp	r3, #3
 800500e:	d10f      	bne.n	8005030 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	440a      	add	r2, r1
 8005026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800502e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
}
 8005032:	4618      	mov	r0, r3
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop

08005040 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08c      	sub	sp, #48	; 0x30
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800505c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d028      	beq.n	80050bc <USB_HC_StartXfer+0x7c>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	791b      	ldrb	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d124      	bne.n	80050bc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <USB_HC_StartXfer+0x50>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	795b      	ldrb	r3, [r3, #5]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d107      	bne.n	8005090 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	4619      	mov	r1, r3
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa2e 	bl	80054e8 <USB_DoPing>
      return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e112      	b.n	80052b6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d112      	bne.n	80050bc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	6a3a      	ldr	r2, [r7, #32]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80050b4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d018      	beq.n	80050f6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	8912      	ldrh	r2, [r2, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	3b01      	subs	r3, #1
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	8912      	ldrh	r2, [r2, #8]
 80050d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80050da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050dc:	8b7b      	ldrh	r3, [r7, #26]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d90b      	bls.n	80050fa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80050e2:	8b7b      	ldrh	r3, [r7, #26]
 80050e4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80050e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	8912      	ldrh	r2, [r2, #8]
 80050ec:	fb02 f203 	mul.w	r2, r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	611a      	str	r2, [r3, #16]
 80050f4:	e001      	b.n	80050fa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80050f6:	2301      	movs	r3, #1
 80050f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	78db      	ldrb	r3, [r3, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d006      	beq.n	8005110 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	8912      	ldrh	r2, [r2, #8]
 8005108:	fb02 f203 	mul.w	r2, r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800511a:	04d9      	lsls	r1, r3, #19
 800511c:	4b68      	ldr	r3, [pc, #416]	; (80052c0 <USB_HC_StartXfer+0x280>)
 800511e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005120:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	7a9b      	ldrb	r3, [r3, #10]
 8005126:	075b      	lsls	r3, r3, #29
 8005128:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800512c:	69f9      	ldr	r1, [r7, #28]
 800512e:	0148      	lsls	r0, r1, #5
 8005130:	6a39      	ldr	r1, [r7, #32]
 8005132:	4401      	add	r1, r0
 8005134:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005138:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800513a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	68d9      	ldr	r1, [r3, #12]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	460a      	mov	r2, r1
 8005154:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	440a      	add	r2, r1
 8005184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005188:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800518c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	7e7b      	ldrb	r3, [r7, #25]
 800519e:	075b      	lsls	r3, r3, #29
 80051a0:	69f9      	ldr	r1, [r7, #28]
 80051a2:	0148      	lsls	r0, r1, #5
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	4401      	add	r1, r0
 80051a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051c0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051c2:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051ca:	4a3e      	ldr	r2, [pc, #248]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051cc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	78db      	ldrb	r3, [r3, #3]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80051d6:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	4a39      	ldr	r2, [pc, #228]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e005      	b.n	80051f0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80051e4:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051ec:	4a35      	ldr	r2, [pc, #212]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051ee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051f0:	4b34      	ldr	r3, [pc, #208]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051f8:	4a32      	ldr	r2, [pc, #200]	; (80052c4 <USB_HC_StartXfer+0x284>)
 80051fa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	461a      	mov	r2, r3
 800520a:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <USB_HC_StartXfer+0x284>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d14e      	bne.n	80052b4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	78db      	ldrb	r3, [r3, #3]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d14a      	bne.n	80052b4 <USB_HC_StartXfer+0x274>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d046      	beq.n	80052b4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	79db      	ldrb	r3, [r3, #7]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d830      	bhi.n	8005290 <USB_HC_StartXfer+0x250>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <USB_HC_StartXfer+0x1f4>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005245 	.word	0x08005245
 8005238:	08005269 	.word	0x08005269
 800523c:	08005245 	.word	0x08005245
 8005240:	08005269 	.word	0x08005269
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	3303      	adds	r3, #3
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800524e:	8afa      	ldrh	r2, [r7, #22]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	b29b      	uxth	r3, r3
 8005256:	429a      	cmp	r2, r3
 8005258:	d91c      	bls.n	8005294 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f043 0220 	orr.w	r2, r3, #32
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	619a      	str	r2, [r3, #24]
          }
          break;
 8005266:	e015      	b.n	8005294 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	3303      	adds	r3, #3
 800526e:	089b      	lsrs	r3, r3, #2
 8005270:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005272:	8afa      	ldrh	r2, [r7, #22]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	b29b      	uxth	r3, r3
 800527e:	429a      	cmp	r2, r3
 8005280:	d90a      	bls.n	8005298 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	619a      	str	r2, [r3, #24]
          }
          break;
 800528e:	e003      	b.n	8005298 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <USB_HC_StartXfer+0x25a>
          break;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <USB_HC_StartXfer+0x25a>
          break;
 8005298:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	68d9      	ldr	r1, [r3, #12]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	785a      	ldrb	r2, [r3, #1]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	b298      	uxth	r0, r3
 80052a8:	2300      	movs	r3, #0
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4603      	mov	r3, r0
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fb86 	bl	80049c0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3728      	adds	r7, #40	; 0x28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	1ff80000 	.word	0x1ff80000
 80052c4:	200000ac 	.word	0x200000ac

080052c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	b29b      	uxth	r3, r3
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b087      	sub	sp, #28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	0c9b      	lsrs	r3, r3, #18
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <USB_HC_Halt+0x3a>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d16c      	bne.n	80053fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	440a      	add	r2, r1
 800533a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005342:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d143      	bne.n	80053d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	440a      	add	r2, r1
 8005366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800536a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	440a      	add	r2, r1
 8005386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800538e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3301      	adds	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053bc:	d81d      	bhi.n	80053fa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d4:	d0ec      	beq.n	80053b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053d6:	e080      	b.n	80054da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053f8:	e06f      	b.n	80054da <USB_HC_Halt+0x1f0>
          break;
 80053fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053fc:	e06d      	b.n	80054da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	440a      	add	r2, r1
 8005414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800541c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d143      	bne.n	80054b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	440a      	add	r2, r1
 8005444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800544c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4413      	add	r3, r2
 8005456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	440a      	add	r2, r1
 8005464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800546c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	440a      	add	r2, r1
 8005484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005488:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800548c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	3301      	adds	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549a:	d81d      	bhi.n	80054d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b2:	d0ec      	beq.n	800548e <USB_HC_Halt+0x1a4>
 80054b4:	e011      	b.n	80054da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	0151      	lsls	r1, r2, #5
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e000      	b.n	80054da <USB_HC_Halt+0x1f0>
          break;
 80054d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80054fc:	2301      	movs	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	04da      	lsls	r2, r3, #19
 8005504:	4b15      	ldr	r3, [pc, #84]	; (800555c <USB_DoPing+0x74>)
 8005506:	4013      	ands	r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	440a      	add	r2, r1
 8005510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005518:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005530:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005538:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	1ff80000 	.word	0x1ff80000

08005560 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff f9a1 	bl	80048b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005576:	2110      	movs	r1, #16
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff f9d9 	bl	8004930 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff f9fc 	bl	800497c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	e01f      	b.n	80055ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055be:	461a      	mov	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3301      	adds	r3, #1
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	d9dc      	bls.n	800558a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	e034      	b.n	8005640 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3301      	adds	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561c:	d80c      	bhi.n	8005638 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005634:	d0ec      	beq.n	8005610 <USB_StopHost+0xb0>
 8005636:	e000      	b.n	800563a <USB_StopHost+0xda>
        break;
 8005638:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3301      	adds	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b0f      	cmp	r3, #15
 8005644:	d9c7      	bls.n	80055d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564c:	461a      	mov	r2, r3
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
 8005652:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f04f 32ff 	mov.w	r2, #4294967295
 800565a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff f91a 	bl	8004896 <USB_EnableGlobalInt>

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af04      	add	r7, sp, #16
 8005672:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005674:	2302      	movs	r3, #2
 8005676:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005678:	2301      	movs	r3, #1
 800567a:	2202      	movs	r2, #2
 800567c:	2102      	movs	r1, #2
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fc3a 	bl	8005ef8 <USBH_FindInterface>
 8005684:	4603      	mov	r3, r0
 8005686:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005688:	7bbb      	ldrb	r3, [r7, #14]
 800568a:	2bff      	cmp	r3, #255	; 0xff
 800568c:	f000 812a 	beq.w	80058e4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fc13 	bl	8005ec0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80056a0:	2050      	movs	r0, #80	; 0x50
 80056a2:	f002 fedd 	bl	8008460 <malloc>
 80056a6:	4603      	mov	r3, r0
 80056a8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056b4:	7bbb      	ldrb	r3, [r7, #14]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	211a      	movs	r1, #26
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da15      	bge.n	80056f8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	211a      	movs	r1, #26
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	211a      	movs	r1, #26
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80056f2:	881a      	ldrh	r2, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fd21 	bl	8007146 <USBH_AllocPipe>
 8005704:	4603      	mov	r3, r0
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	7819      	ldrb	r1, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	7858      	ldrb	r0, [r3, #1]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	8952      	ldrh	r2, [r2, #10]
 8005724:	9202      	str	r2, [sp, #8]
 8005726:	2203      	movs	r2, #3
 8005728:	9201      	str	r2, [sp, #4]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4623      	mov	r3, r4
 800572e:	4602      	mov	r2, r0
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 fcd9 	bl	80070e8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f002 fdb4 	bl	80082ac <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005744:	2300      	movs	r3, #0
 8005746:	2200      	movs	r2, #0
 8005748:	210a      	movs	r1, #10
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fbd4 	bl	8005ef8 <USBH_FindInterface>
 8005750:	4603      	mov	r3, r0
 8005752:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	2bff      	cmp	r3, #255	; 0xff
 8005758:	f000 80c4 	beq.w	80058e4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	211a      	movs	r1, #26
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b25b      	sxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	da16      	bge.n	80057a2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	211a      	movs	r1, #26
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	4413      	add	r3, r2
 8005780:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005784:	781a      	ldrb	r2, [r3, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	211a      	movs	r1, #26
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	4413      	add	r3, r2
 8005796:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800579a:	881a      	ldrh	r2, [r3, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	835a      	strh	r2, [r3, #26]
 80057a0:	e015      	b.n	80057ce <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057a2:	7bbb      	ldrb	r3, [r7, #14]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	211a      	movs	r1, #26
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057b8:	7bbb      	ldrb	r3, [r7, #14]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	211a      	movs	r1, #26
 80057be:	fb01 f303 	mul.w	r3, r1, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	211a      	movs	r1, #26
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	f203 3352 	addw	r3, r3, #850	; 0x352
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	b25b      	sxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da16      	bge.n	8005814 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	211a      	movs	r1, #26
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80057f6:	781a      	ldrb	r2, [r3, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	211a      	movs	r1, #26
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4413      	add	r3, r2
 8005808:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	835a      	strh	r2, [r3, #26]
 8005812:	e015      	b.n	8005840 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	211a      	movs	r1, #26
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	4413      	add	r3, r2
 8005820:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	211a      	movs	r1, #26
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	7b9b      	ldrb	r3, [r3, #14]
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fc7d 	bl	8007146 <USBH_AllocPipe>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	7bdb      	ldrb	r3, [r3, #15]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fc73 	bl	8007146 <USBH_AllocPipe>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	7b59      	ldrb	r1, [r3, #13]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	7b98      	ldrb	r0, [r3, #14]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	8b12      	ldrh	r2, [r2, #24]
 8005880:	9202      	str	r2, [sp, #8]
 8005882:	2202      	movs	r2, #2
 8005884:	9201      	str	r2, [sp, #4]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4623      	mov	r3, r4
 800588a:	4602      	mov	r2, r0
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 fc2b 	bl	80070e8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	7b19      	ldrb	r1, [r3, #12]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	7bd8      	ldrb	r0, [r3, #15]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	8b52      	ldrh	r2, [r2, #26]
 80058aa:	9202      	str	r2, [sp, #8]
 80058ac:	2202      	movs	r2, #2
 80058ae:	9201      	str	r2, [sp, #4]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	4623      	mov	r3, r4
 80058b4:	4602      	mov	r2, r0
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fc16 	bl	80070e8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	7b5b      	ldrb	r3, [r3, #13]
 80058c8:	2200      	movs	r2, #0
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f002 fced 	bl	80082ac <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	7b1b      	ldrb	r3, [r3, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f002 fce6 	bl	80082ac <USBH_LL_SetToggle>
      status = USBH_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd90      	pop	{r4, r7, pc}

080058ee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fc09 	bl	8007126 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 fc31 	bl	8007182 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	7b1b      	ldrb	r3, [r3, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00e      	beq.n	800594c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	7b1b      	ldrb	r3, [r3, #12]
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 fbf6 	bl	8007126 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	7b1b      	ldrb	r3, [r3, #12]
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 fc1e 	bl	8007182 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	7b5b      	ldrb	r3, [r3, #13]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00e      	beq.n	8005972 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	7b5b      	ldrb	r3, [r3, #13]
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 fbe3 	bl	8007126 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	7b5b      	ldrb	r3, [r3, #13]
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 fc0b 	bl	8007182 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	4618      	mov	r0, r3
 8005988:	f002 fd72 	bl	8008470 <free>
    phost->pActiveClass->pData = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005992:	2200      	movs	r2, #0
 8005994:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80059a8:	2302      	movs	r3, #2
 80059aa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	3340      	adds	r3, #64	; 0x40
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f8b2 	bl	8005b26 <GetLineCoding>
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80059d2:	2102      	movs	r1, #2
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
  }
  return status;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d877      	bhi.n	8005af8 <USBH_CDC_Process+0x114>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USBH_CDC_Process+0x2c>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a25 	.word	0x08005a25
 8005a14:	08005a2b 	.word	0x08005a2b
 8005a18:	08005a5b 	.word	0x08005a5b
 8005a1c:	08005acf 	.word	0x08005acf
 8005a20:	08005add 	.word	0x08005add
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
    break;
 8005a28:	e06d      	b.n	8005b06 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f897 	bl	8005b64 <SetLineCoding>
 8005a36:	4603      	mov	r3, r0
 8005a38:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005a48:	e058      	b.n	8005afc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d055      	beq.n	8005afc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2204      	movs	r2, #4
 8005a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005a58:	e050      	b.n	8005afc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3340      	adds	r3, #64	; 0x40
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f860 	bl	8005b26 <GetLineCoding>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d126      	bne.n	8005abe <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	791b      	ldrb	r3, [r3, #4]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d13b      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d133      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d12b      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d124      	bne.n	8005b00 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f95a 	bl	8005d70 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005abc:	e020      	b.n	8005b00 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d01d      	beq.n	8005b00 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005acc:	e018      	b.n	8005b00 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f867 	bl	8005ba2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8dc 	bl	8005c92 <CDC_ProcessReception>
    break;
 8005ada:	e014      	b.n	8005b06 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005adc:	2100      	movs	r1, #0
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fece 	bl	8006880 <USBH_ClrFeature>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005af6:	e005      	b.n	8005b04 <USBH_CDC_Process+0x120>

  default:
    break;
 8005af8:	bf00      	nop
 8005afa:	e004      	b.n	8005b06 <USBH_CDC_Process+0x122>
    break;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <USBH_CDC_Process+0x122>
    break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <USBH_CDC_Process+0x122>
    break;
 8005b04:	bf00      	nop

  }

  return status;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	22a1      	movs	r2, #161	; 0xa1
 8005b34:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2221      	movs	r2, #33	; 0x21
 8005b3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2207      	movs	r2, #7
 8005b4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2207      	movs	r2, #7
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 f873 	bl	8006c40 <USBH_CtlReq>
 8005b5a:	4603      	mov	r3, r0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2221      	movs	r2, #33	; 0x21
 8005b72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2207      	movs	r2, #7
 8005b8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2207      	movs	r2, #7
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 f854 	bl	8006c40 <USBH_CtlReq>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d002      	beq.n	8005bc8 <CDC_ProcessTransmission+0x26>
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d025      	beq.n	8005c12 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005bc6:	e060      	b.n	8005c8a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	8b12      	ldrh	r2, [r2, #24]
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d90c      	bls.n	8005bee <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	69d9      	ldr	r1, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8b1a      	ldrh	r2, [r3, #24]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	7b58      	ldrb	r0, [r3, #13]
 8005be0:	2301      	movs	r3, #1
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	4603      	mov	r3, r0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fa3b 	bl	8007062 <USBH_BulkSendData>
 8005bec:	e00c      	b.n	8005c08 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	7b58      	ldrb	r0, [r3, #13]
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	4603      	mov	r3, r0
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 fa2d 	bl	8007062 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005c10:	e03b      	b.n	8005c8a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	7b5b      	ldrb	r3, [r3, #13]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 fb1d 	bl	8008258 <USBH_LL_GetURBState>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005c22:	7afb      	ldrb	r3, [r7, #11]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d128      	bne.n	8005c7a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	8b12      	ldrh	r2, [r2, #24]
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d90e      	bls.n	8005c52 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	8b12      	ldrh	r2, [r2, #24]
 8005c3c:	1a9a      	subs	r2, r3, r2
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	8b12      	ldrh	r2, [r2, #24]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	61da      	str	r2, [r3, #28]
 8005c50:	e002      	b.n	8005c58 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005c68:	e00e      	b.n	8005c88 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f868 	bl	8005d48 <USBH_CDC_TransmitCallback>
    break;
 8005c78:	e006      	b.n	8005c88 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d103      	bne.n	8005c88 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005c88:	bf00      	nop
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d002      	beq.n	8005cb8 <CDC_ProcessReception+0x26>
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d00e      	beq.n	8005cd4 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005cb6:	e043      	b.n	8005d40 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	6a19      	ldr	r1, [r3, #32]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	8b5a      	ldrh	r2, [r3, #26]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	7b1b      	ldrb	r3, [r3, #12]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 f9f1 	bl	80070ac <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005cd2:	e035      	b.n	8005d40 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	7b1b      	ldrb	r3, [r3, #12]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f002 fabc 	bl	8008258 <USBH_LL_GetURBState>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005ce4:	7cfb      	ldrb	r3, [r7, #19]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d129      	bne.n	8005d3e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	7b1b      	ldrb	r3, [r3, #12]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f002 fa1f 	bl	8008134 <USBH_LL_GetLastXferSize>
 8005cf6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d016      	beq.n	8005d30 <CDC_ProcessReception+0x9e>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	8b5b      	ldrh	r3, [r3, #26]
 8005d06:	461a      	mov	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d910      	bls.n	8005d30 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	441a      	add	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005d2e:	e006      	b.n	8005d3e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f80f 	bl	8005d5c <USBH_CDC_ReceiveCallback>
    break;
 8005d3e:	bf00      	nop
  }
}
 8005d40:	bf00      	nop
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e019      	b.n	8005dd0 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	79fa      	ldrb	r2, [r7, #7]
 8005da0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f80f 	bl	8005dd8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f002 f901 	bl	8007fd0 <USBH_LL_Init>

  return USBH_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005de4:	e008      	b.n	8005df8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	32e0      	adds	r2, #224	; 0xe0
 8005dec:	2100      	movs	r1, #0
 8005dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b0e      	cmp	r3, #14
 8005dfc:	d9f3      	bls.n	8005de6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e009      	b.n	8005e18 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1e:	d3f1      	bcc.n	8005e04 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d017      	beq.n	8005eae <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10f      	bne.n	8005ea8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8e:	1c59      	adds	r1, r3, #1
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	33dc      	adds	r3, #220	; 0xdc
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
 8005ea6:	e004      	b.n	8005eb2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	73fb      	strb	r3, [r7, #15]
 8005eac:	e001      	b.n	8005eb2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d204      	bcs.n	8005ee6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	78fa      	ldrb	r2, [r7, #3]
 8005ee0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005ee4:	e001      	b.n	8005eea <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	70fb      	strb	r3, [r7, #3]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70bb      	strb	r3, [r7, #2]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005f20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f22:	e025      	b.n	8005f70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	221a      	movs	r2, #26
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	3302      	adds	r3, #2
 8005f34:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	795b      	ldrb	r3, [r3, #5]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <USBH_FindInterface+0x4e>
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2bff      	cmp	r3, #255	; 0xff
 8005f44:	d111      	bne.n	8005f6a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005f4a:	78ba      	ldrb	r2, [r7, #2]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d002      	beq.n	8005f56 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005f50:	78bb      	ldrb	r3, [r7, #2]
 8005f52:	2bff      	cmp	r3, #255	; 0xff
 8005f54:	d109      	bne.n	8005f6a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005f5a:	787a      	ldrb	r2, [r7, #1]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d002      	beq.n	8005f66 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f60:	787b      	ldrb	r3, [r7, #1]
 8005f62:	2bff      	cmp	r3, #255	; 0xff
 8005f64:	d101      	bne.n	8005f6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	e006      	b.n	8005f78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d9d6      	bls.n	8005f24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005f76:	23ff      	movs	r3, #255	; 0xff
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f002 f85b 	bl	8008048 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005f92:	2101      	movs	r1, #1
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f002 f972 	bl	800827e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af04      	add	r7, sp, #16
 8005faa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005fac:	2302      	movs	r3, #2
 8005fae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 faec 	bl	8006592 <USBH_IsPortEnabled>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10c      	bne.n	8005fda <USBH_Process+0x36>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d002      	beq.n	8005fda <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b0b      	cmp	r3, #11
 8005fe2:	f200 814c 	bhi.w	800627e <USBH_Process+0x2da>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <USBH_Process+0x48>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	0800601d 	.word	0x0800601d
 8005ff0:	0800603f 	.word	0x0800603f
 8005ff4:	08006053 	.word	0x08006053
 8005ff8:	08006259 	.word	0x08006259
 8005ffc:	0800627f 	.word	0x0800627f
 8006000:	080060e1 	.word	0x080060e1
 8006004:	0800620f 	.word	0x0800620f
 8006008:	08006111 	.word	0x08006111
 800600c:	08006131 	.word	0x08006131
 8006010:	08006151 	.word	0x08006151
 8006014:	0800617f 	.word	0x0800617f
 8006018:	08006241 	.word	0x08006241
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 812c 	beq.w	8006282 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006030:	20c8      	movs	r0, #200	; 0xc8
 8006032:	f002 f96e 	bl	8008312 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 f861 	bl	80080fe <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800603c:	e121      	b.n	8006282 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006044:	2b01      	cmp	r3, #1
 8006046:	f040 811e 	bne.w	8006286 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2202      	movs	r2, #2
 800604e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006050:	e119      	b.n	8006286 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006052:	2064      	movs	r0, #100	; 0x64
 8006054:	f002 f95d 	bl	8008312 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f002 f82b 	bl	80080b4 <USBH_LL_GetSpeed>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2205      	movs	r2, #5
 800606c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800606e:	2100      	movs	r1, #0
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f868 	bl	8007146 <USBH_AllocPipe>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f860 	bl	8007146 <USBH_AllocPipe>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7919      	ldrb	r1, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80060a2:	b292      	uxth	r2, r2
 80060a4:	9202      	str	r2, [sp, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	2280      	movs	r2, #128	; 0x80
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 f819 	bl	80070e8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7959      	ldrb	r1, [r3, #5]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80060ca:	b292      	uxth	r2, r2
 80060cc:	9202      	str	r2, [sp, #8]
 80060ce:	2200      	movs	r2, #0
 80060d0:	9201      	str	r2, [sp, #4]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	4603      	mov	r3, r0
 80060d6:	2200      	movs	r2, #0
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 f805 	bl	80070e8 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80060de:	e0e3      	b.n	80062a8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8e7 	bl	80062b4 <USBH_HandleEnum>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 80ce 	bne.w	800628a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d103      	bne.n	8006108 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2208      	movs	r2, #8
 8006104:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006106:	e0c0      	b.n	800628a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2207      	movs	r2, #7
 800610c:	701a      	strb	r2, [r3, #0]
    break;
 800610e:	e0bc      	b.n	800628a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 80b9 	beq.w	800628e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006122:	2101      	movs	r1, #1
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2208      	movs	r2, #8
 800612c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800612e:	e0ae      	b.n	800628e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006136:	b29b      	uxth	r3, r3
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb59 	bl	80067f2 <USBH_SetCfg>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	f040 80a5 	bne.w	8006292 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2209      	movs	r2, #9
 800614c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800614e:	e0a0      	b.n	8006292 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800615e:	2101      	movs	r1, #1
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb69 	bl	8006838 <USBH_SetFeature>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 8094 	bne.w	8006296 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	220a      	movs	r2, #10
 8006172:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006174:	e08f      	b.n	8006296 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	220a      	movs	r2, #10
 800617a:	701a      	strb	r2, [r3, #0]
    break;
 800617c:	e08b      	b.n	8006296 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8088 	beq.w	800629a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
 8006196:	e017      	b.n	80061c8 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	33dc      	adds	r3, #220	; 0xdc
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	791a      	ldrb	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d108      	bne.n	80061c2 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	33dc      	adds	r3, #220	; 0xdc
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	3301      	adds	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0e4      	beq.n	8006198 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d016      	beq.n	8006206 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2206      	movs	r2, #6
 80061ee:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061f6:	2103      	movs	r1, #3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80061fc:	e04d      	b.n	800629a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	220d      	movs	r2, #13
 8006202:	701a      	strb	r2, [r3, #0]
    break;
 8006204:	e049      	b.n	800629a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	220d      	movs	r2, #13
 800620a:	701a      	strb	r2, [r3, #0]
    break;
 800620c:	e045      	b.n	800629a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00f      	beq.n	8006238 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
 8006224:	4603      	mov	r3, r0
 8006226:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d136      	bne.n	800629e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	220b      	movs	r2, #11
 8006234:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006236:	e032      	b.n	800629e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	220d      	movs	r2, #13
 800623c:	701a      	strb	r2, [r3, #0]
    break;
 800623e:	e02e      	b.n	800629e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02b      	beq.n	80062a2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
    }
    break;
 8006256:	e024      	b.n	80062a2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff fdbd 	bl	8005dd8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01e      	beq.n	80062a6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800627c:	e013      	b.n	80062a6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800627e:	bf00      	nop
 8006280:	e012      	b.n	80062a8 <USBH_Process+0x304>
    break;
 8006282:	bf00      	nop
 8006284:	e010      	b.n	80062a8 <USBH_Process+0x304>
    break;
 8006286:	bf00      	nop
 8006288:	e00e      	b.n	80062a8 <USBH_Process+0x304>
    break;
 800628a:	bf00      	nop
 800628c:	e00c      	b.n	80062a8 <USBH_Process+0x304>
    break;
 800628e:	bf00      	nop
 8006290:	e00a      	b.n	80062a8 <USBH_Process+0x304>
    break;
 8006292:	bf00      	nop
 8006294:	e008      	b.n	80062a8 <USBH_Process+0x304>
    break;
 8006296:	bf00      	nop
 8006298:	e006      	b.n	80062a8 <USBH_Process+0x304>
    break;
 800629a:	bf00      	nop
 800629c:	e004      	b.n	80062a8 <USBH_Process+0x304>
    break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <USBH_Process+0x304>
    break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <USBH_Process+0x304>
    break;
 80062a6:	bf00      	nop
  }
 return USBH_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop

080062b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af04      	add	r7, sp, #16
 80062ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b07      	cmp	r3, #7
 80062c6:	f200 80f8 	bhi.w	80064ba <USBH_HandleEnum+0x206>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <USBH_HandleEnum+0x1c>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062f1 	.word	0x080062f1
 80062d4:	08006363 	.word	0x08006363
 80062d8:	0800637b 	.word	0x0800637b
 80062dc:	080063f1 	.word	0x080063f1
 80062e0:	08006407 	.word	0x08006407
 80062e4:	08006423 	.word	0x08006423
 80062e8:	08006457 	.word	0x08006457
 80062ec:	0800648b 	.word	0x0800648b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80062f0:	2108      	movs	r1, #8
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f9ad 	bl	8006652 <USBH_Get_DevDesc>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 80df 	bne.w	80064be <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7919      	ldrb	r1, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006324:	b292      	uxth	r2, r2
 8006326:	9202      	str	r2, [sp, #8]
 8006328:	2200      	movs	r2, #0
 800632a:	9201      	str	r2, [sp, #4]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	4603      	mov	r3, r0
 8006330:	2280      	movs	r2, #128	; 0x80
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fed8 	bl	80070e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	7959      	ldrb	r1, [r3, #5]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800634c:	b292      	uxth	r2, r2
 800634e:	9202      	str	r2, [sp, #8]
 8006350:	2200      	movs	r2, #0
 8006352:	9201      	str	r2, [sp, #4]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	4603      	mov	r3, r0
 8006358:	2200      	movs	r2, #0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fec4 	bl	80070e8 <USBH_OpenPipe>

    }
    break;
 8006360:	e0ad      	b.n	80064be <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006362:	2112      	movs	r1, #18
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f974 	bl	8006652 <USBH_Get_DevDesc>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 80a8 	bne.w	80064c2 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006378:	e0a3      	b.n	80064c2 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800637a:	2101      	movs	r1, #1
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa14 	bl	80067aa <USBH_SetAddress>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 809e 	bne.w	80064c6 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800638a:	2002      	movs	r0, #2
 800638c:	f001 ffc1 	bl	8008312 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2203      	movs	r2, #3
 800639c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7919      	ldrb	r1, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80063b2:	b292      	uxth	r2, r2
 80063b4:	9202      	str	r2, [sp, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	9201      	str	r2, [sp, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	4603      	mov	r3, r0
 80063be:	2280      	movs	r2, #128	; 0x80
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fe91 	bl	80070e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7959      	ldrb	r1, [r3, #5]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80063da:	b292      	uxth	r2, r2
 80063dc:	9202      	str	r2, [sp, #8]
 80063de:	2200      	movs	r2, #0
 80063e0:	9201      	str	r2, [sp, #4]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4603      	mov	r3, r0
 80063e6:	2200      	movs	r2, #0
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fe7d 	bl	80070e8 <USBH_OpenPipe>
    }
    break;
 80063ee:	e06a      	b.n	80064c6 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80063f0:	2109      	movs	r1, #9
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f955 	bl	80066a2 <USBH_Get_CfgDesc>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d165      	bne.n	80064ca <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006404:	e061      	b.n	80064ca <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f947 	bl	80066a2 <USBH_Get_CfgDesc>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d159      	bne.n	80064ce <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2205      	movs	r2, #5
 800641e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006420:	e055      	b.n	80064ce <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006438:	23ff      	movs	r3, #255	; 0xff
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f955 	bl	80066ea <USBH_Get_StringDesc>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d145      	bne.n	80064d2 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2206      	movs	r2, #6
 800644a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800644c:	e041      	b.n	80064d2 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2206      	movs	r2, #6
 8006452:	705a      	strb	r2, [r3, #1]
    break;
 8006454:	e03d      	b.n	80064d2 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800645c:	2b00      	cmp	r3, #0
 800645e:	d010      	beq.n	8006482 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800646c:	23ff      	movs	r3, #255	; 0xff
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f93b 	bl	80066ea <USBH_Get_StringDesc>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d12d      	bne.n	80064d6 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2207      	movs	r2, #7
 800647e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006480:	e029      	b.n	80064d6 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2207      	movs	r2, #7
 8006486:	705a      	strb	r2, [r3, #1]
    break;
 8006488:	e025      	b.n	80064d6 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00f      	beq.n	80064b4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80064a0:	23ff      	movs	r3, #255	; 0xff
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f921 	bl	80066ea <USBH_Get_StringDesc>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d115      	bne.n	80064da <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80064b2:	e012      	b.n	80064da <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	73fb      	strb	r3, [r7, #15]
    break;
 80064b8:	e00f      	b.n	80064da <USBH_HandleEnum+0x226>

  default:
    break;
 80064ba:	bf00      	nop
 80064bc:	e00e      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064be:	bf00      	nop
 80064c0:	e00c      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064c2:	bf00      	nop
 80064c4:	e00a      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064c6:	bf00      	nop
 80064c8:	e008      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064ca:	bf00      	nop
 80064cc:	e006      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064ce:	bf00      	nop
 80064d0:	e004      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064d2:	bf00      	nop
 80064d4:	e002      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064d6:	bf00      	nop
 80064d8:	e000      	b.n	80064dc <USBH_HandleEnum+0x228>
    break;
 80064da:	bf00      	nop
  }
  return Status;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop

080064e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f804 	bl	800652a <USBH_HandleSof>
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b0b      	cmp	r3, #11
 800653a:	d10a      	bne.n	8006552 <USBH_HandleSof+0x28>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
  }
}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800656a:	bf00      	nop
}
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006586:	bf00      	nop
}
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10f      	bne.n	80065de <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00e      	beq.n	80065ee <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065d6:	2104      	movs	r1, #4
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
 80065dc:	e007      	b.n	80065ee <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d102      	bne.n	80065ee <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fd3c 	bl	800807e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	791b      	ldrb	r3, [r3, #4]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fdb8 	bl	8007182 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	795b      	ldrb	r3, [r3, #5]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fdb2 	bl	8007182 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006636:	2105      	movs	r1, #5
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 fd03 	bl	8008048 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2203      	movs	r2, #3
 8006646:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b086      	sub	sp, #24
 8006656:	af02      	add	r7, sp, #8
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b29b      	uxth	r3, r3
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	4613      	mov	r3, r2
 800666c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006670:	2100      	movs	r1, #0
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f864 	bl	8006740 <USBH_GetDescriptor>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	b292      	uxth	r2, r2
 8006692:	4619      	mov	r1, r3
 8006694:	f000 f918 	bl	80068c8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af02      	add	r7, sp, #8
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	331c      	adds	r3, #28
 80066b2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80066b4:	887b      	ldrh	r3, [r7, #2]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066be:	2100      	movs	r1, #0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f83d 	bl	8006740 <USBH_GetDescriptor>
 80066c6:	4603      	mov	r3, r0
 80066c8:	72fb      	strb	r3, [r7, #11]
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80066d6:	887a      	ldrh	r2, [r7, #2]
 80066d8:	68f9      	ldr	r1, [r7, #12]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f964 	bl	80069a8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80066e0:	7afb      	ldrb	r3, [r7, #11]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b088      	sub	sp, #32
 80066ee:	af02      	add	r7, sp, #8
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	461a      	mov	r2, r3
 80066f6:	460b      	mov	r3, r1
 80066f8:	72fb      	strb	r3, [r7, #11]
 80066fa:	4613      	mov	r3, r2
 80066fc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006706:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800670e:	893b      	ldrh	r3, [r7, #8]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	460b      	mov	r3, r1
 8006714:	2100      	movs	r1, #0
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f812 	bl	8006740 <USBH_GetDescriptor>
 800671c:	4603      	mov	r3, r0
 800671e:	75fb      	strb	r3, [r7, #23]
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800672c:	893a      	ldrh	r2, [r7, #8]
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fa37 	bl	8006ba4 <USBH_ParseStringDesc>
  }
  return status;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	72fb      	strb	r3, [r7, #11]
 800674e:	4613      	mov	r3, r2
 8006750:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	789b      	ldrb	r3, [r3, #2]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d11c      	bne.n	8006794 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2206      	movs	r2, #6
 800676a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	893a      	ldrh	r2, [r7, #8]
 8006770:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006772:	893b      	ldrh	r3, [r7, #8]
 8006774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800677c:	d104      	bne.n	8006788 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f240 4209 	movw	r2, #1033	; 0x409
 8006784:	829a      	strh	r2, [r3, #20]
 8006786:	e002      	b.n	800678e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8b3a      	ldrh	r2, [r7, #24]
 8006792:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006794:	8b3b      	ldrh	r3, [r7, #24]
 8006796:	461a      	mov	r2, r3
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fa50 	bl	8006c40 <USBH_CtlReq>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	789b      	ldrb	r3, [r3, #2]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d10f      	bne.n	80067de <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2205      	movs	r2, #5
 80067c8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80067de:	2200      	movs	r2, #0
 80067e0:	2100      	movs	r1, #0
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa2c 	bl	8006c40 <USBH_CtlReq>
 80067e8:	4603      	mov	r3, r0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	460b      	mov	r3, r1
 80067fc:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	789b      	ldrb	r3, [r3, #2]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d10e      	bne.n	8006824 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2209      	movs	r2, #9
 8006810:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	887a      	ldrh	r2, [r7, #2]
 8006816:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006824:	2200      	movs	r2, #0
 8006826:	2100      	movs	r1, #0
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa09 	bl	8006c40 <USBH_CtlReq>
 800682e:	4603      	mov	r3, r0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	789b      	ldrb	r3, [r3, #2]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d10f      	bne.n	800686c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2203      	movs	r2, #3
 8006856:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800686c:	2200      	movs	r2, #0
 800686e:	2100      	movs	r1, #0
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f9e5 	bl	8006c40 <USBH_CtlReq>
 8006876:	4603      	mov	r3, r0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	789b      	ldrb	r3, [r3, #2]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d10f      	bne.n	80068b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80068b4:	2200      	movs	r2, #0
 80068b6:	2100      	movs	r1, #0
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9c1 	bl	8006c40 <USBH_CtlReq>
 80068be:	4603      	mov	r3, r0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	4613      	mov	r3, r2
 80068d4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	785a      	ldrb	r2, [r3, #1]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3302      	adds	r3, #2
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3303      	adds	r3, #3
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	791a      	ldrb	r2, [r3, #4]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	795a      	ldrb	r2, [r3, #5]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	799a      	ldrb	r2, [r3, #6]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	79da      	ldrb	r2, [r3, #7]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d939      	bls.n	800699c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	3308      	adds	r3, #8
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	b29a      	uxth	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	3309      	adds	r3, #9
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	b29b      	uxth	r3, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	330a      	adds	r3, #10
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b29a      	uxth	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	330b      	adds	r3, #11
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	b29b      	uxth	r3, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	330c      	adds	r3, #12
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b29a      	uxth	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	330d      	adds	r3, #13
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	b29b      	uxth	r3, r3
 8006974:	4313      	orrs	r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	7b9a      	ldrb	r2, [r3, #14]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	7bda      	ldrb	r2, [r3, #15]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	7c1a      	ldrb	r2, [r3, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	7c5a      	ldrb	r2, [r3, #17]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	745a      	strb	r2, [r3, #17]
  }
}
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	785a      	ldrb	r2, [r3, #1]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3302      	adds	r3, #2
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	3303      	adds	r3, #3
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	791a      	ldrb	r2, [r3, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	795a      	ldrb	r2, [r3, #5]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	799a      	ldrb	r2, [r3, #6]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	79da      	ldrb	r2, [r3, #7]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	7a1a      	ldrb	r2, [r3, #8]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b09      	cmp	r3, #9
 8006a22:	d95f      	bls.n	8006ae4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006a24:	2309      	movs	r3, #9
 8006a26:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a2c:	e051      	b.n	8006ad2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a2e:	f107 0316 	add.w	r3, r7, #22
 8006a32:	4619      	mov	r1, r3
 8006a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a36:	f000 f8e8 	bl	8006c0a <USBH_GetNextDesc>
 8006a3a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d146      	bne.n	8006ad2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a48:	221a      	movs	r2, #26
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	3308      	adds	r3, #8
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	3302      	adds	r3, #2
 8006a56:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a5a:	69f8      	ldr	r0, [r7, #28]
 8006a5c:	f000 f846 	bl	8006aec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a6a:	e022      	b.n	8006ab2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006a6c:	f107 0316 	add.w	r3, r7, #22
 8006a70:	4619      	mov	r1, r3
 8006a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a74:	f000 f8c9 	bl	8006c0a <USBH_GetNextDesc>
 8006a78:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d117      	bne.n	8006ab2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a8a:	3201      	adds	r2, #1
 8006a8c:	00d2      	lsls	r2, r2, #3
 8006a8e:	211a      	movs	r1, #26
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	3308      	adds	r3, #8
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aa2:	69b8      	ldr	r0, [r7, #24]
 8006aa4:	f000 f851 	bl	8006b4a <USBH_ParseEPDesc>
            ep_ix++;
 8006aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006aac:	3301      	adds	r3, #1
 8006aae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	791b      	ldrb	r3, [r3, #4]
 8006ab6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d204      	bcs.n	8006ac8 <USBH_ParseCfgDesc+0x120>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	885a      	ldrh	r2, [r3, #2]
 8006ac2:	8afb      	ldrh	r3, [r7, #22]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d8d1      	bhi.n	8006a6c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006acc:	3301      	adds	r3, #1
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d804      	bhi.n	8006ae4 <USBH_ParseCfgDesc+0x13c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	885a      	ldrh	r2, [r3, #2]
 8006ade:	8afb      	ldrh	r3, [r7, #22]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d8a4      	bhi.n	8006a2e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3728      	adds	r7, #40	; 0x28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781a      	ldrb	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	785a      	ldrb	r2, [r3, #1]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	789a      	ldrb	r2, [r3, #2]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	78da      	ldrb	r2, [r3, #3]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	791a      	ldrb	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	795a      	ldrb	r2, [r3, #5]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	799a      	ldrb	r2, [r3, #6]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	79da      	ldrb	r2, [r3, #7]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	7a1a      	ldrb	r2, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	721a      	strb	r2, [r3, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	785a      	ldrb	r2, [r3, #1]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	789a      	ldrb	r2, [r3, #2]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	78da      	ldrb	r2, [r3, #3]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	3304      	adds	r3, #4
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	3305      	adds	r3, #5
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	799a      	ldrb	r2, [r3, #6]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	719a      	strb	r2, [r3, #6]
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d120      	bne.n	8006bfe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	1e9a      	subs	r2, r3, #2
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	bf28      	it	cs
 8006bc8:	4613      	movcs	r3, r2
 8006bca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	82fb      	strh	r3, [r7, #22]
 8006bd6:	e00b      	b.n	8006bf0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006bd8:	8afb      	ldrh	r3, [r7, #22]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	781a      	ldrb	r2, [r3, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006bea:	8afb      	ldrh	r3, [r7, #22]
 8006bec:	3302      	adds	r3, #2
 8006bee:	82fb      	strh	r3, [r7, #22]
 8006bf0:	8afa      	ldrh	r2, [r7, #22]
 8006bf2:	8abb      	ldrh	r3, [r7, #20]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d3ef      	bcc.n	8006bd8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
  }
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	881a      	ldrh	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	789b      	ldrb	r3, [r3, #2]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d002      	beq.n	8006c60 <USBH_CtlReq+0x20>
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d00f      	beq.n	8006c7e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006c5e:	e034      	b.n	8006cca <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2202      	movs	r2, #2
 8006c76:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]
    break;
 8006c7c:	e025      	b.n	8006cca <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f828 	bl	8006cd4 <USBH_HandleControl>
 8006c84:	4603      	mov	r3, r0
 8006c86:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d108      	bne.n	8006ca0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	75fb      	strb	r3, [r7, #23]
    break;
 8006c9e:	e013      	b.n	8006cc8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d108      	bne.n	8006cb8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	75fb      	strb	r3, [r7, #23]
    break;
 8006cb6:	e007      	b.n	8006cc8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d104      	bne.n	8006cc8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	75fb      	strb	r3, [r7, #23]
    break;
 8006cc8:	bf00      	nop
  }
  return status;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7e1b      	ldrb	r3, [r3, #24]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	2b0a      	cmp	r3, #10
 8006cec:	f200 814c 	bhi.w	8006f88 <USBH_HandleControl+0x2b4>
 8006cf0:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <USBH_HandleControl+0x24>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d25 	.word	0x08006d25
 8006cfc:	08006d3f 	.word	0x08006d3f
 8006d00:	08006da9 	.word	0x08006da9
 8006d04:	08006dcf 	.word	0x08006dcf
 8006d08:	08006e07 	.word	0x08006e07
 8006d0c:	08006e33 	.word	0x08006e33
 8006d10:	08006e85 	.word	0x08006e85
 8006d14:	08006ea7 	.word	0x08006ea7
 8006d18:	08006ee3 	.word	0x08006ee3
 8006d1c:	08006f0b 	.word	0x08006f0b
 8006d20:	08006f49 	.word	0x08006f49
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f103 0110 	add.w	r1, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	795b      	ldrb	r3, [r3, #5]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f939 	bl	8006fa8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	761a      	strb	r2, [r3, #24]
    break;
 8006d3c:	e12f      	b.n	8006f9e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	795b      	ldrb	r3, [r3, #5]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 fa87 	bl	8008258 <USBH_LL_GetURBState>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d11e      	bne.n	8006d92 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7c1b      	ldrb	r3, [r3, #16]
 8006d58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d5c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8adb      	ldrh	r3, [r3, #22]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006d66:	7b7b      	ldrb	r3, [r7, #13]
 8006d68:	2b80      	cmp	r3, #128	; 0x80
 8006d6a:	d103      	bne.n	8006d74 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2203      	movs	r2, #3
 8006d70:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d72:	e10b      	b.n	8006f8c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2205      	movs	r2, #5
 8006d78:	761a      	strb	r2, [r3, #24]
    break;
 8006d7a:	e107      	b.n	8006f8c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006d7c:	7b7b      	ldrb	r3, [r7, #13]
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d103      	bne.n	8006d8a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2209      	movs	r2, #9
 8006d86:	761a      	strb	r2, [r3, #24]
    break;
 8006d88:	e100      	b.n	8006f8c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2207      	movs	r2, #7
 8006d8e:	761a      	strb	r2, [r3, #24]
    break;
 8006d90:	e0fc      	b.n	8006f8c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d003      	beq.n	8006da0 <USBH_HandleControl+0xcc>
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	f040 80f6 	bne.w	8006f8c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	220b      	movs	r2, #11
 8006da4:	761a      	strb	r2, [r3, #24]
    break;
 8006da6:	e0f1      	b.n	8006f8c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6899      	ldr	r1, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	899a      	ldrh	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	791b      	ldrb	r3, [r3, #4]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f930 	bl	8007026 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	761a      	strb	r2, [r3, #24]
    break;
 8006dcc:	e0e7      	b.n	8006f9e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	791b      	ldrb	r3, [r3, #4]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fa3f 	bl	8008258 <USBH_LL_GetURBState>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d102      	bne.n	8006dea <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2209      	movs	r2, #9
 8006de8:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	d102      	bne.n	8006df6 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006df0:	2303      	movs	r3, #3
 8006df2:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006df4:	e0cc      	b.n	8006f90 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	f040 80c9 	bne.w	8006f90 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	220b      	movs	r2, #11
 8006e02:	761a      	strb	r2, [r3, #24]
    break;
 8006e04:	e0c4      	b.n	8006f90 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6899      	ldr	r1, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	899a      	ldrh	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7958      	ldrb	r0, [r3, #5]
 8006e12:	2301      	movs	r3, #1
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4603      	mov	r3, r0
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8df 	bl	8006fdc <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2206      	movs	r2, #6
 8006e2e:	761a      	strb	r2, [r3, #24]
    break;
 8006e30:	e0b5      	b.n	8006f9e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	795b      	ldrb	r3, [r3, #5]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fa0d 	bl	8008258 <USBH_LL_GetURBState>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d103      	bne.n	8006e50 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2207      	movs	r2, #7
 8006e4c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e4e:	e0a1      	b.n	8006f94 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	d105      	bne.n	8006e62 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	220c      	movs	r2, #12
 8006e5a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e60:	e098      	b.n	8006f94 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d103      	bne.n	8006e70 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	761a      	strb	r2, [r3, #24]
    break;
 8006e6e:	e091      	b.n	8006f94 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	f040 808e 	bne.w	8006f94 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	220b      	movs	r2, #11
 8006e7c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	73fb      	strb	r3, [r7, #15]
    break;
 8006e82:	e087      	b.n	8006f94 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	791b      	ldrb	r3, [r3, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8ca 	bl	8007026 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	761a      	strb	r2, [r3, #24]

    break;
 8006ea4:	e07b      	b.n	8006f9e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f9d3 	bl	8008258 <USBH_LL_GetURBState>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d105      	bne.n	8006ec8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	220d      	movs	r2, #13
 8006ec0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ec6:	e067      	b.n	8006f98 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d103      	bne.n	8006ed6 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	220b      	movs	r2, #11
 8006ed2:	761a      	strb	r2, [r3, #24]
    break;
 8006ed4:	e060      	b.n	8006f98 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b05      	cmp	r3, #5
 8006eda:	d15d      	bne.n	8006f98 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006edc:	2303      	movs	r3, #3
 8006ede:	73fb      	strb	r3, [r7, #15]
    break;
 8006ee0:	e05a      	b.n	8006f98 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	795a      	ldrb	r2, [r3, #5]
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4613      	mov	r3, r2
 8006eec:	2200      	movs	r2, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f873 	bl	8006fdc <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	220a      	movs	r2, #10
 8006f06:	761a      	strb	r2, [r3, #24]
    break;
 8006f08:	e049      	b.n	8006f9e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	795b      	ldrb	r3, [r3, #5]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f9a1 	bl	8008258 <USBH_LL_GetURBState>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d105      	bne.n	8006f2c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	220d      	movs	r2, #13
 8006f28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006f2a:	e037      	b.n	8006f9c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d103      	bne.n	8006f3a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2209      	movs	r2, #9
 8006f36:	761a      	strb	r2, [r3, #24]
    break;
 8006f38:	e030      	b.n	8006f9c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d12d      	bne.n	8006f9c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	220b      	movs	r2, #11
 8006f44:	761a      	strb	r2, [r3, #24]
    break;
 8006f46:	e029      	b.n	8006f9c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7e5b      	ldrb	r3, [r3, #25]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	765a      	strb	r2, [r3, #25]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7e5b      	ldrb	r3, [r3, #25]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d809      	bhi.n	8006f70 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 f88e 	bl	800807e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006f6e:	e016      	b.n	8006f9e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f76:	2106      	movs	r1, #6
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006f82:	2302      	movs	r3, #2
 8006f84:	73fb      	strb	r3, [r7, #15]
    break;
 8006f86:	e00a      	b.n	8006f9e <USBH_HandleControl+0x2ca>

  default:
    break;
 8006f88:	bf00      	nop
 8006f8a:	e008      	b.n	8006f9e <USBH_HandleControl+0x2ca>
    break;
 8006f8c:	bf00      	nop
 8006f8e:	e006      	b.n	8006f9e <USBH_HandleControl+0x2ca>
    break;
 8006f90:	bf00      	nop
 8006f92:	e004      	b.n	8006f9e <USBH_HandleControl+0x2ca>
    break;
 8006f94:	bf00      	nop
 8006f96:	e002      	b.n	8006f9e <USBH_HandleControl+0x2ca>
    break;
 8006f98:	bf00      	nop
 8006f9a:	e000      	b.n	8006f9e <USBH_HandleControl+0x2ca>
    break;
 8006f9c:	bf00      	nop
  }
  return status;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006fb6:	79f9      	ldrb	r1, [r7, #7]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9303      	str	r3, [sp, #12]
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	9302      	str	r3, [sp, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2200      	movs	r2, #0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 f912 	bl	80081f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	460b      	mov	r3, r1
 8006fec:	80fb      	strh	r3, [r7, #6]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007000:	7979      	ldrb	r1, [r7, #5]
 8007002:	7e3b      	ldrb	r3, [r7, #24]
 8007004:	9303      	str	r3, [sp, #12]
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	9302      	str	r3, [sp, #8]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	2301      	movs	r3, #1
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	2300      	movs	r3, #0
 8007014:	2200      	movs	r2, #0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f001 f8ed 	bl	80081f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b088      	sub	sp, #32
 800702a:	af04      	add	r7, sp, #16
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	4611      	mov	r1, r2
 8007032:	461a      	mov	r2, r3
 8007034:	460b      	mov	r3, r1
 8007036:	80fb      	strh	r3, [r7, #6]
 8007038:	4613      	mov	r3, r2
 800703a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800703c:	7979      	ldrb	r1, [r7, #5]
 800703e:	2300      	movs	r3, #0
 8007040:	9303      	str	r3, [sp, #12]
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	2301      	movs	r3, #1
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2300      	movs	r3, #0
 8007050:	2201      	movs	r2, #1
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f001 f8cf 	bl	80081f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007058:	2300      	movs	r3, #0

}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b088      	sub	sp, #32
 8007066:	af04      	add	r7, sp, #16
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	4611      	mov	r1, r2
 800706e:	461a      	mov	r2, r3
 8007070:	460b      	mov	r3, r1
 8007072:	80fb      	strh	r3, [r7, #6]
 8007074:	4613      	mov	r3, r2
 8007076:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007086:	7979      	ldrb	r1, [r7, #5]
 8007088:	7e3b      	ldrb	r3, [r7, #24]
 800708a:	9303      	str	r3, [sp, #12]
 800708c:	88fb      	ldrh	r3, [r7, #6]
 800708e:	9302      	str	r3, [sp, #8]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	2301      	movs	r3, #1
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	2302      	movs	r3, #2
 800709a:	2200      	movs	r2, #0
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f001 f8aa 	bl	80081f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af04      	add	r7, sp, #16
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	460b      	mov	r3, r1
 80070bc:	80fb      	strh	r3, [r7, #6]
 80070be:	4613      	mov	r3, r2
 80070c0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80070c2:	7979      	ldrb	r1, [r7, #5]
 80070c4:	2300      	movs	r3, #0
 80070c6:	9303      	str	r3, [sp, #12]
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	9302      	str	r3, [sp, #8]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	2301      	movs	r3, #1
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	2302      	movs	r3, #2
 80070d6:	2201      	movs	r2, #1
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f001 f88c 	bl	80081f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	70fb      	strb	r3, [r7, #3]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70bb      	strb	r3, [r7, #2]
 80070fe:	4613      	mov	r3, r2
 8007100:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007102:	7878      	ldrb	r0, [r7, #1]
 8007104:	78ba      	ldrb	r2, [r7, #2]
 8007106:	78f9      	ldrb	r1, [r7, #3]
 8007108:	8b3b      	ldrh	r3, [r7, #24]
 800710a:	9302      	str	r3, [sp, #8]
 800710c:	7d3b      	ldrb	r3, [r7, #20]
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	7c3b      	ldrb	r3, [r7, #16]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4603      	mov	r3, r0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 f81f 	bl	800815a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800711c:	2300      	movs	r3, #0

}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 f83e 	bl	80081b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800713c:	2300      	movs	r3, #0

}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f831 	bl	80071ba <USBH_GetFreePipe>
 8007158:	4603      	mov	r3, r0
 800715a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800715c:	89fb      	ldrh	r3, [r7, #14]
 800715e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007162:	4293      	cmp	r3, r2
 8007164:	d007      	beq.n	8007176 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	89fa      	ldrh	r2, [r7, #14]
 800716a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	32e0      	adds	r2, #224	; 0xe0
 8007172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007176:	89fb      	ldrh	r3, [r7, #14]
 8007178:	b2db      	uxtb	r3, r3
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	2b0a      	cmp	r3, #10
 8007192:	d80b      	bhi.n	80071ac <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007194:	78fa      	ldrb	r2, [r7, #3]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	32e0      	adds	r2, #224	; 0xe0
 800719a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	32e0      	adds	r2, #224	; 0xe0
 80071a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]
 80071ca:	e00e      	b.n	80071ea <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80071cc:	7bfa      	ldrb	r2, [r7, #15]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32e0      	adds	r2, #224	; 0xe0
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	e007      	b.n	80071f4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	3301      	adds	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b0a      	cmp	r3, #10
 80071ee:	d9ed      	bls.n	80071cc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80071f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
int c1 = 0;
int c2=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b0b6      	sub	sp, #216	; 0xd8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	char buffer[1];
	char tmp[200];
	buffer[0] = 'x';
 8007208:	2378      	movs	r3, #120	; 0x78
 800720a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4


  if (htim == &htim6){
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d109      	bne.n	800722a <HAL_TIM_PeriodElapsedCallback+0x2a>
	  //HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	  c1++;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800721e:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8007220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007224:	4819      	ldr	r0, [pc, #100]	; (800728c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8007226:	f7f9 fd04 	bl	8000c32 <HAL_GPIO_TogglePin>
  }
  if (htim == &htim7){
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a18      	ldr	r2, [pc, #96]	; (8007290 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d109      	bne.n	8007246 <HAL_TIM_PeriodElapsedCallback+0x46>
	  c2++;
 8007232:	4b18      	ldr	r3, [pc, #96]	; (8007294 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	4a16      	ldr	r2, [pc, #88]	; (8007294 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800723a:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800723c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007240:	4812      	ldr	r0, [pc, #72]	; (800728c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8007242:	f7f9 fcf6 	bl	8000c32 <HAL_GPIO_TogglePin>
  }
  if (htim == &htim10){
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a13      	ldr	r2, [pc, #76]	; (8007298 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d116      	bne.n	800727c <HAL_TIM_PeriodElapsedCallback+0x7c>
	  sprintf(tmp, "%d %d\r\n", c1, c2);
 800724e:	4b0e      	ldr	r3, [pc, #56]	; (8007288 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f107 000c 	add.w	r0, r7, #12
 800725a:	4910      	ldr	r1, [pc, #64]	; (800729c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800725c:	f001 f9d0 	bl	8008600 <siprintf>
	  HAL_UART_Transmit(&huart2, tmp, strlen(tmp), HAL_MAX_DELAY);
 8007260:	f107 030c 	add.w	r3, r7, #12
 8007264:	4618      	mov	r0, r3
 8007266:	f7f8 ffb3 	bl	80001d0 <strlen>
 800726a:	4603      	mov	r3, r0
 800726c:	b29a      	uxth	r2, r3
 800726e:	f107 010c 	add.w	r1, r7, #12
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	480a      	ldr	r0, [pc, #40]	; (80072a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8007278:	f7fc ffbe 	bl	80041f8 <HAL_UART_Transmit>
  }
}
 800727c:	bf00      	nop
 800727e:	37d8      	adds	r7, #216	; 0xd8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000160 	.word	0x20000160
 8007288:	200000b0 	.word	0x200000b0
 800728c:	40020c00 	.word	0x40020c00
 8007290:	20000238 	.word	0x20000238
 8007294:	200000b4 	.word	0x200000b4
 8007298:	20000120 	.word	0x20000120
 800729c:	08008cb8 	.word	0x08008cb8
 80072a0:	200001f8 	.word	0x200001f8

080072a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072a8:	f7f9 f96a 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072ac:	f000 f824 	bl	80072f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072b0:	f000 f9f0 	bl	8007694 <MX_GPIO_Init>
  MX_I2C1_Init();
 80072b4:	f000 f8a0 	bl	80073f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80072b8:	f000 f8cc 	bl	8007454 <MX_I2S3_Init>
  MX_SPI1_Init();
 80072bc:	f000 f8fa 	bl	80074b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80072c0:	f000 fd72 	bl	8007da8 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 80072c4:	f000 f92c 	bl	8007520 <MX_TIM6_Init>
  MX_TIM7_Init();
 80072c8:	f000 f960 	bl	800758c <MX_TIM7_Init>
  MX_TIM10_Init();
 80072cc:	f000 f994 	bl	80075f8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80072d0:	f000 f9b6 	bl	8007640 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80072d4:	4805      	ldr	r0, [pc, #20]	; (80072ec <main+0x48>)
 80072d6:	f7fc fcf4 	bl	8003cc2 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 80072da:	4805      	ldr	r0, [pc, #20]	; (80072f0 <main+0x4c>)
 80072dc:	f7fc fcf1 	bl	8003cc2 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);
 80072e0:	4804      	ldr	r0, [pc, #16]	; (80072f4 <main+0x50>)
 80072e2:	f7fc fcee 	bl	8003cc2 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80072e6:	f000 fd85 	bl	8007df4 <MX_USB_HOST_Process>
 80072ea:	e7fc      	b.n	80072e6 <main+0x42>
 80072ec:	20000160 	.word	0x20000160
 80072f0:	20000238 	.word	0x20000238
 80072f4:	20000120 	.word	0x20000120

080072f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b098      	sub	sp, #96	; 0x60
 80072fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007302:	2230      	movs	r2, #48	; 0x30
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f001 f8ba 	bl	8008480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800730c:	f107 031c 	add.w	r3, r7, #28
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	609a      	str	r2, [r3, #8]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	605a      	str	r2, [r3, #4]
 8007326:	609a      	str	r2, [r3, #8]
 8007328:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	4b30      	ldr	r3, [pc, #192]	; (80073f0 <SystemClock_Config+0xf8>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	4a2f      	ldr	r2, [pc, #188]	; (80073f0 <SystemClock_Config+0xf8>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007338:	6413      	str	r3, [r2, #64]	; 0x40
 800733a:	4b2d      	ldr	r3, [pc, #180]	; (80073f0 <SystemClock_Config+0xf8>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007346:	2300      	movs	r3, #0
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	4b2a      	ldr	r3, [pc, #168]	; (80073f4 <SystemClock_Config+0xfc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a29      	ldr	r2, [pc, #164]	; (80073f4 <SystemClock_Config+0xfc>)
 8007350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <SystemClock_Config+0xfc>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007362:	2301      	movs	r3, #1
 8007364:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800736a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800736c:	2302      	movs	r3, #2
 800736e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007374:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007376:	2304      	movs	r3, #4
 8007378:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800737a:	23a8      	movs	r3, #168	; 0xa8
 800737c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800737e:	2302      	movs	r3, #2
 8007380:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007382:	2307      	movs	r3, #7
 8007384:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800738a:	4618      	mov	r0, r3
 800738c:	f7fb fe9c 	bl	80030c8 <HAL_RCC_OscConfig>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007396:	f000 fa7b 	bl	8007890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800739a:	230f      	movs	r3, #15
 800739c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800739e:	2302      	movs	r3, #2
 80073a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073a2:	2300      	movs	r3, #0
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80073a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80073ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80073b2:	f107 031c 	add.w	r3, r7, #28
 80073b6:	2105      	movs	r1, #5
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fc f8c7 	bl	800354c <HAL_RCC_ClockConfig>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80073c4:	f000 fa64 	bl	8007890 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80073c8:	2301      	movs	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80073cc:	2332      	movs	r3, #50	; 0x32
 80073ce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80073d0:	2302      	movs	r3, #2
 80073d2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fc faa5 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80073e4:	f000 fa54 	bl	8007890 <Error_Handler>
  }
}
 80073e8:	bf00      	nop
 80073ea:	3760      	adds	r7, #96	; 0x60
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40023800 	.word	0x40023800
 80073f4:	40007000 	.word	0x40007000

080073f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80073fc:	4b12      	ldr	r3, [pc, #72]	; (8007448 <MX_I2C1_Init+0x50>)
 80073fe:	4a13      	ldr	r2, [pc, #76]	; (800744c <MX_I2C1_Init+0x54>)
 8007400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007402:	4b11      	ldr	r3, [pc, #68]	; (8007448 <MX_I2C1_Init+0x50>)
 8007404:	4a12      	ldr	r2, [pc, #72]	; (8007450 <MX_I2C1_Init+0x58>)
 8007406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007408:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <MX_I2C1_Init+0x50>)
 800740a:	2200      	movs	r2, #0
 800740c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800740e:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <MX_I2C1_Init+0x50>)
 8007410:	2200      	movs	r2, #0
 8007412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <MX_I2C1_Init+0x50>)
 8007416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800741a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <MX_I2C1_Init+0x50>)
 800741e:	2200      	movs	r2, #0
 8007420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <MX_I2C1_Init+0x50>)
 8007424:	2200      	movs	r2, #0
 8007426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007428:	4b07      	ldr	r3, [pc, #28]	; (8007448 <MX_I2C1_Init+0x50>)
 800742a:	2200      	movs	r2, #0
 800742c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800742e:	4b06      	ldr	r3, [pc, #24]	; (8007448 <MX_I2C1_Init+0x50>)
 8007430:	2200      	movs	r2, #0
 8007432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007434:	4804      	ldr	r0, [pc, #16]	; (8007448 <MX_I2C1_Init+0x50>)
 8007436:	f7fb f87f 	bl	8002538 <HAL_I2C_Init>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007440:	f000 fa26 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007444:	bf00      	nop
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200000cc 	.word	0x200000cc
 800744c:	40005400 	.word	0x40005400
 8007450:	000186a0 	.word	0x000186a0

08007454 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007458:	4b13      	ldr	r3, [pc, #76]	; (80074a8 <MX_I2S3_Init+0x54>)
 800745a:	4a14      	ldr	r2, [pc, #80]	; (80074ac <MX_I2S3_Init+0x58>)
 800745c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <MX_I2S3_Init+0x54>)
 8007460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007464:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8007466:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <MX_I2S3_Init+0x54>)
 8007468:	2200      	movs	r2, #0
 800746a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800746c:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <MX_I2S3_Init+0x54>)
 800746e:	2200      	movs	r2, #0
 8007470:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <MX_I2S3_Init+0x54>)
 8007474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007478:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <MX_I2S3_Init+0x54>)
 800747c:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <MX_I2S3_Init+0x5c>)
 800747e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007480:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <MX_I2S3_Init+0x54>)
 8007482:	2200      	movs	r2, #0
 8007484:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8007486:	4b08      	ldr	r3, [pc, #32]	; (80074a8 <MX_I2S3_Init+0x54>)
 8007488:	2200      	movs	r2, #0
 800748a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <MX_I2S3_Init+0x54>)
 800748e:	2200      	movs	r2, #0
 8007490:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8007492:	4805      	ldr	r0, [pc, #20]	; (80074a8 <MX_I2S3_Init+0x54>)
 8007494:	f7fb f978 	bl	8002788 <HAL_I2S_Init>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800749e:	f000 f9f7 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000278 	.word	0x20000278
 80074ac:	40003c00 	.word	0x40003c00
 80074b0:	00017700 	.word	0x00017700

080074b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <MX_SPI1_Init+0x64>)
 80074ba:	4a18      	ldr	r2, [pc, #96]	; (800751c <MX_SPI1_Init+0x68>)
 80074bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80074be:	4b16      	ldr	r3, [pc, #88]	; (8007518 <MX_SPI1_Init+0x64>)
 80074c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80074c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80074c6:	4b14      	ldr	r3, [pc, #80]	; (8007518 <MX_SPI1_Init+0x64>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80074cc:	4b12      	ldr	r3, [pc, #72]	; (8007518 <MX_SPI1_Init+0x64>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <MX_SPI1_Init+0x64>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074d8:	4b0f      	ldr	r3, [pc, #60]	; (8007518 <MX_SPI1_Init+0x64>)
 80074da:	2200      	movs	r2, #0
 80074dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <MX_SPI1_Init+0x64>)
 80074e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074e6:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <MX_SPI1_Init+0x64>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <MX_SPI1_Init+0x64>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80074f2:	4b09      	ldr	r3, [pc, #36]	; (8007518 <MX_SPI1_Init+0x64>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <MX_SPI1_Init+0x64>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <MX_SPI1_Init+0x64>)
 8007500:	220a      	movs	r2, #10
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007504:	4804      	ldr	r0, [pc, #16]	; (8007518 <MX_SPI1_Init+0x64>)
 8007506:	f7fc fb4d 	bl	8003ba4 <HAL_SPI_Init>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007510:	f000 f9be 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007514:	bf00      	nop
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200001a0 	.word	0x200001a0
 800751c:	40013000 	.word	0x40013000

08007520 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007526:	463b      	mov	r3, r7
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800752e:	4b15      	ldr	r3, [pc, #84]	; (8007584 <MX_TIM6_Init+0x64>)
 8007530:	4a15      	ldr	r2, [pc, #84]	; (8007588 <MX_TIM6_Init+0x68>)
 8007532:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 8007534:	4b13      	ldr	r3, [pc, #76]	; (8007584 <MX_TIM6_Init+0x64>)
 8007536:	f640 729f 	movw	r2, #3999	; 0xf9f
 800753a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800753c:	4b11      	ldr	r3, [pc, #68]	; (8007584 <MX_TIM6_Init+0x64>)
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20999;
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <MX_TIM6_Init+0x64>)
 8007544:	f245 2207 	movw	r2, #20999	; 0x5207
 8007548:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800754a:	4b0e      	ldr	r3, [pc, #56]	; (8007584 <MX_TIM6_Init+0x64>)
 800754c:	2280      	movs	r2, #128	; 0x80
 800754e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007550:	480c      	ldr	r0, [pc, #48]	; (8007584 <MX_TIM6_Init+0x64>)
 8007552:	f7fc fb8b 	bl	8003c6c <HAL_TIM_Base_Init>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800755c:	f000 f998 	bl	8007890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007560:	2300      	movs	r3, #0
 8007562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007564:	2300      	movs	r3, #0
 8007566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007568:	463b      	mov	r3, r7
 800756a:	4619      	mov	r1, r3
 800756c:	4805      	ldr	r0, [pc, #20]	; (8007584 <MX_TIM6_Init+0x64>)
 800756e:	f7fc fd9d 	bl	80040ac <HAL_TIMEx_MasterConfigSynchronization>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8007578:	f000 f98a 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000160 	.word	0x20000160
 8007588:	40001000 	.word	0x40001000

0800758c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007592:	463b      	mov	r3, r7
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800759a:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <MX_TIM7_Init+0x64>)
 800759c:	4a15      	ldr	r2, [pc, #84]	; (80075f4 <MX_TIM7_Init+0x68>)
 800759e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3999;
 80075a0:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <MX_TIM7_Init+0x64>)
 80075a2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80075a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <MX_TIM7_Init+0x64>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20608;
 80075ae:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <MX_TIM7_Init+0x64>)
 80075b0:	f44f 42a1 	mov.w	r2, #20608	; 0x5080
 80075b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <MX_TIM7_Init+0x64>)
 80075b8:	2280      	movs	r2, #128	; 0x80
 80075ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80075bc:	480c      	ldr	r0, [pc, #48]	; (80075f0 <MX_TIM7_Init+0x64>)
 80075be:	f7fc fb55 	bl	8003c6c <HAL_TIM_Base_Init>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80075c8:	f000 f962 	bl	8007890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80075cc:	2300      	movs	r3, #0
 80075ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80075d4:	463b      	mov	r3, r7
 80075d6:	4619      	mov	r1, r3
 80075d8:	4805      	ldr	r0, [pc, #20]	; (80075f0 <MX_TIM7_Init+0x64>)
 80075da:	f7fc fd67 	bl	80040ac <HAL_TIMEx_MasterConfigSynchronization>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80075e4:	f000 f954 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000238 	.word	0x20000238
 80075f4:	40001400 	.word	0x40001400

080075f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80075fc:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <MX_TIM10_Init+0x40>)
 80075fe:	4a0f      	ldr	r2, [pc, #60]	; (800763c <MX_TIM10_Init+0x44>)
 8007600:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 3999;
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <MX_TIM10_Init+0x40>)
 8007604:	f640 729f 	movw	r2, #3999	; 0xf9f
 8007608:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800760a:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <MX_TIM10_Init+0x40>)
 800760c:	2200      	movs	r2, #0
 800760e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 41995;
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <MX_TIM10_Init+0x40>)
 8007612:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8007616:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <MX_TIM10_Init+0x40>)
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800761e:	4b06      	ldr	r3, [pc, #24]	; (8007638 <MX_TIM10_Init+0x40>)
 8007620:	2280      	movs	r2, #128	; 0x80
 8007622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8007624:	4804      	ldr	r0, [pc, #16]	; (8007638 <MX_TIM10_Init+0x40>)
 8007626:	f7fc fb21 	bl	8003c6c <HAL_TIM_Base_Init>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8007630:	f000 f92e 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8007634:	bf00      	nop
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20000120 	.word	0x20000120
 800763c:	40014400 	.word	0x40014400

08007640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007644:	4b11      	ldr	r3, [pc, #68]	; (800768c <MX_USART2_UART_Init+0x4c>)
 8007646:	4a12      	ldr	r2, [pc, #72]	; (8007690 <MX_USART2_UART_Init+0x50>)
 8007648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800764a:	4b10      	ldr	r3, [pc, #64]	; (800768c <MX_USART2_UART_Init+0x4c>)
 800764c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007652:	4b0e      	ldr	r3, [pc, #56]	; (800768c <MX_USART2_UART_Init+0x4c>)
 8007654:	2200      	movs	r2, #0
 8007656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <MX_USART2_UART_Init+0x4c>)
 800765a:	2200      	movs	r2, #0
 800765c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800765e:	4b0b      	ldr	r3, [pc, #44]	; (800768c <MX_USART2_UART_Init+0x4c>)
 8007660:	2200      	movs	r2, #0
 8007662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <MX_USART2_UART_Init+0x4c>)
 8007666:	220c      	movs	r2, #12
 8007668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <MX_USART2_UART_Init+0x4c>)
 800766c:	2200      	movs	r2, #0
 800766e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007670:	4b06      	ldr	r3, [pc, #24]	; (800768c <MX_USART2_UART_Init+0x4c>)
 8007672:	2200      	movs	r2, #0
 8007674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007676:	4805      	ldr	r0, [pc, #20]	; (800768c <MX_USART2_UART_Init+0x4c>)
 8007678:	f7fc fd71 	bl	800415e <HAL_UART_Init>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007682:	f000 f905 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	200001f8 	.word	0x200001f8
 8007690:	40004400 	.word	0x40004400

08007694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800769a:	f107 031c 	add.w	r3, r7, #28
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	605a      	str	r2, [r3, #4]
 80076a4:	609a      	str	r2, [r3, #8]
 80076a6:	60da      	str	r2, [r3, #12]
 80076a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	4b71      	ldr	r3, [pc, #452]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	4a70      	ldr	r2, [pc, #448]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076b4:	f043 0310 	orr.w	r3, r3, #16
 80076b8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ba:	4b6e      	ldr	r3, [pc, #440]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	4b6a      	ldr	r3, [pc, #424]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	4a69      	ldr	r2, [pc, #420]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076d0:	f043 0304 	orr.w	r3, r3, #4
 80076d4:	6313      	str	r3, [r2, #48]	; 0x30
 80076d6:	4b67      	ldr	r3, [pc, #412]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	4b63      	ldr	r3, [pc, #396]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	4a62      	ldr	r2, [pc, #392]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	6313      	str	r3, [r2, #48]	; 0x30
 80076f2:	4b60      	ldr	r3, [pc, #384]	; (8007874 <MX_GPIO_Init+0x1e0>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fa:	613b      	str	r3, [r7, #16]
 80076fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	4b5c      	ldr	r3, [pc, #368]	; (8007874 <MX_GPIO_Init+0x1e0>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	4a5b      	ldr	r2, [pc, #364]	; (8007874 <MX_GPIO_Init+0x1e0>)
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	6313      	str	r3, [r2, #48]	; 0x30
 800770e:	4b59      	ldr	r3, [pc, #356]	; (8007874 <MX_GPIO_Init+0x1e0>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]
 800771e:	4b55      	ldr	r3, [pc, #340]	; (8007874 <MX_GPIO_Init+0x1e0>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	4a54      	ldr	r2, [pc, #336]	; (8007874 <MX_GPIO_Init+0x1e0>)
 8007724:	f043 0302 	orr.w	r3, r3, #2
 8007728:	6313      	str	r3, [r2, #48]	; 0x30
 800772a:	4b52      	ldr	r3, [pc, #328]	; (8007874 <MX_GPIO_Init+0x1e0>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	60bb      	str	r3, [r7, #8]
 8007734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	4b4e      	ldr	r3, [pc, #312]	; (8007874 <MX_GPIO_Init+0x1e0>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a4d      	ldr	r2, [pc, #308]	; (8007874 <MX_GPIO_Init+0x1e0>)
 8007740:	f043 0308 	orr.w	r3, r3, #8
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b4b      	ldr	r3, [pc, #300]	; (8007874 <MX_GPIO_Init+0x1e0>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007752:	2200      	movs	r2, #0
 8007754:	2108      	movs	r1, #8
 8007756:	4848      	ldr	r0, [pc, #288]	; (8007878 <MX_GPIO_Init+0x1e4>)
 8007758:	f7f9 fa52 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800775c:	2201      	movs	r2, #1
 800775e:	2101      	movs	r1, #1
 8007760:	4846      	ldr	r0, [pc, #280]	; (800787c <MX_GPIO_Init+0x1e8>)
 8007762:	f7f9 fa4d 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8007766:	2200      	movs	r2, #0
 8007768:	f24f 0110 	movw	r1, #61456	; 0xf010
 800776c:	4844      	ldr	r0, [pc, #272]	; (8007880 <MX_GPIO_Init+0x1ec>)
 800776e:	f7f9 fa47 	bl	8000c00 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007772:	2308      	movs	r3, #8
 8007774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007776:	2301      	movs	r3, #1
 8007778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777a:	2300      	movs	r3, #0
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800777e:	2300      	movs	r3, #0
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007782:	f107 031c 	add.w	r3, r7, #28
 8007786:	4619      	mov	r1, r3
 8007788:	483b      	ldr	r0, [pc, #236]	; (8007878 <MX_GPIO_Init+0x1e4>)
 800778a:	f7f9 f89f 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800778e:	2301      	movs	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007792:	2301      	movs	r3, #1
 8007794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800779a:	2300      	movs	r3, #0
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800779e:	f107 031c 	add.w	r3, r7, #28
 80077a2:	4619      	mov	r1, r3
 80077a4:	4835      	ldr	r0, [pc, #212]	; (800787c <MX_GPIO_Init+0x1e8>)
 80077a6:	f7f9 f891 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80077aa:	2308      	movs	r3, #8
 80077ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ae:	2302      	movs	r3, #2
 80077b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077b6:	2300      	movs	r3, #0
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077ba:	2305      	movs	r3, #5
 80077bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80077be:	f107 031c 	add.w	r3, r7, #28
 80077c2:	4619      	mov	r1, r3
 80077c4:	482d      	ldr	r0, [pc, #180]	; (800787c <MX_GPIO_Init+0x1e8>)
 80077c6:	f7f9 f881 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80077ca:	2301      	movs	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80077ce:	4b2d      	ldr	r3, [pc, #180]	; (8007884 <MX_GPIO_Init+0x1f0>)
 80077d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80077d6:	f107 031c 	add.w	r3, r7, #28
 80077da:	4619      	mov	r1, r3
 80077dc:	482a      	ldr	r0, [pc, #168]	; (8007888 <MX_GPIO_Init+0x1f4>)
 80077de:	f7f9 f875 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80077e2:	2304      	movs	r3, #4
 80077e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077e6:	2300      	movs	r3, #0
 80077e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80077ee:	f107 031c 	add.w	r3, r7, #28
 80077f2:	4619      	mov	r1, r3
 80077f4:	4825      	ldr	r0, [pc, #148]	; (800788c <MX_GPIO_Init+0x1f8>)
 80077f6:	f7f9 f869 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80077fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007800:	2302      	movs	r3, #2
 8007802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007804:	2300      	movs	r3, #0
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007808:	2300      	movs	r3, #0
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800780c:	2305      	movs	r3, #5
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007810:	f107 031c 	add.w	r3, r7, #28
 8007814:	4619      	mov	r1, r3
 8007816:	481d      	ldr	r0, [pc, #116]	; (800788c <MX_GPIO_Init+0x1f8>)
 8007818:	f7f9 f858 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800781c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8007820:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007822:	2301      	movs	r3, #1
 8007824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007826:	2300      	movs	r3, #0
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800782a:	2300      	movs	r3, #0
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800782e:	f107 031c 	add.w	r3, r7, #28
 8007832:	4619      	mov	r1, r3
 8007834:	4812      	ldr	r0, [pc, #72]	; (8007880 <MX_GPIO_Init+0x1ec>)
 8007836:	f7f9 f849 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800783a:	2320      	movs	r3, #32
 800783c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800783e:	2300      	movs	r3, #0
 8007840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007842:	2300      	movs	r3, #0
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007846:	f107 031c 	add.w	r3, r7, #28
 800784a:	4619      	mov	r1, r3
 800784c:	480c      	ldr	r0, [pc, #48]	; (8007880 <MX_GPIO_Init+0x1ec>)
 800784e:	f7f9 f83d 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007852:	2302      	movs	r3, #2
 8007854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007856:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <MX_GPIO_Init+0x1f0>)
 8007858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800785a:	2300      	movs	r3, #0
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800785e:	f107 031c 	add.w	r3, r7, #28
 8007862:	4619      	mov	r1, r3
 8007864:	4804      	ldr	r0, [pc, #16]	; (8007878 <MX_GPIO_Init+0x1e4>)
 8007866:	f7f9 f831 	bl	80008cc <HAL_GPIO_Init>

}
 800786a:	bf00      	nop
 800786c:	3730      	adds	r7, #48	; 0x30
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40023800 	.word	0x40023800
 8007878:	40021000 	.word	0x40021000
 800787c:	40020800 	.word	0x40020800
 8007880:	40020c00 	.word	0x40020c00
 8007884:	10120000 	.word	0x10120000
 8007888:	40020000 	.word	0x40020000
 800788c:	40020400 	.word	0x40020400

08007890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078a6:	2300      	movs	r3, #0
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	4b10      	ldr	r3, [pc, #64]	; (80078ec <HAL_MspInit+0x4c>)
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	4a0f      	ldr	r2, [pc, #60]	; (80078ec <HAL_MspInit+0x4c>)
 80078b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078b4:	6453      	str	r3, [r2, #68]	; 0x44
 80078b6:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <HAL_MspInit+0x4c>)
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078be:	607b      	str	r3, [r7, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078c2:	2300      	movs	r3, #0
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	4b09      	ldr	r3, [pc, #36]	; (80078ec <HAL_MspInit+0x4c>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	4a08      	ldr	r2, [pc, #32]	; (80078ec <HAL_MspInit+0x4c>)
 80078cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6413      	str	r3, [r2, #64]	; 0x40
 80078d2:	4b06      	ldr	r3, [pc, #24]	; (80078ec <HAL_MspInit+0x4c>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80078de:	2007      	movs	r0, #7
 80078e0:	f7f8 ffb2 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40023800 	.word	0x40023800

080078f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	; 0x28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078f8:	f107 0314 	add.w	r3, r7, #20
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	609a      	str	r2, [r3, #8]
 8007904:	60da      	str	r2, [r3, #12]
 8007906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a19      	ldr	r2, [pc, #100]	; (8007974 <HAL_I2C_MspInit+0x84>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d12c      	bne.n	800796c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	4b18      	ldr	r3, [pc, #96]	; (8007978 <HAL_I2C_MspInit+0x88>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	4a17      	ldr	r2, [pc, #92]	; (8007978 <HAL_I2C_MspInit+0x88>)
 800791c:	f043 0302 	orr.w	r3, r3, #2
 8007920:	6313      	str	r3, [r2, #48]	; 0x30
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <HAL_I2C_MspInit+0x88>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	613b      	str	r3, [r7, #16]
 800792c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800792e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007934:	2312      	movs	r3, #18
 8007936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007938:	2301      	movs	r3, #1
 800793a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007940:	2304      	movs	r3, #4
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4619      	mov	r1, r3
 800794a:	480c      	ldr	r0, [pc, #48]	; (800797c <HAL_I2C_MspInit+0x8c>)
 800794c:	f7f8 ffbe 	bl	80008cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	4b08      	ldr	r3, [pc, #32]	; (8007978 <HAL_I2C_MspInit+0x88>)
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	4a07      	ldr	r2, [pc, #28]	; (8007978 <HAL_I2C_MspInit+0x88>)
 800795a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800795e:	6413      	str	r3, [r2, #64]	; 0x40
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <HAL_I2C_MspInit+0x88>)
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800796c:	bf00      	nop
 800796e:	3728      	adds	r7, #40	; 0x28
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40005400 	.word	0x40005400
 8007978:	40023800 	.word	0x40023800
 800797c:	40020400 	.word	0x40020400

08007980 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007988:	f107 0314 	add.w	r3, r7, #20
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	605a      	str	r2, [r3, #4]
 8007992:	609a      	str	r2, [r3, #8]
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a28      	ldr	r2, [pc, #160]	; (8007a40 <HAL_I2S_MspInit+0xc0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d14a      	bne.n	8007a38 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
 80079a6:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	4a26      	ldr	r2, [pc, #152]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b0:	6413      	str	r3, [r2, #64]	; 0x40
 80079b2:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079ba:	613b      	str	r3, [r7, #16]
 80079bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	4b20      	ldr	r3, [pc, #128]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	4a1f      	ldr	r2, [pc, #124]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	6313      	str	r3, [r2, #48]	; 0x30
 80079ce:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	4a18      	ldr	r2, [pc, #96]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079e4:	f043 0304 	orr.w	r3, r3, #4
 80079e8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <HAL_I2S_MspInit+0xc4>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80079f6:	2310      	movs	r3, #16
 80079f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fa:	2302      	movs	r3, #2
 80079fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a02:	2300      	movs	r3, #0
 8007a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007a06:	2306      	movs	r3, #6
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007a0a:	f107 0314 	add.w	r3, r7, #20
 8007a0e:	4619      	mov	r1, r3
 8007a10:	480d      	ldr	r0, [pc, #52]	; (8007a48 <HAL_I2S_MspInit+0xc8>)
 8007a12:	f7f8 ff5b 	bl	80008cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007a16:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a24:	2300      	movs	r3, #0
 8007a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007a28:	2306      	movs	r3, #6
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a2c:	f107 0314 	add.w	r3, r7, #20
 8007a30:	4619      	mov	r1, r3
 8007a32:	4806      	ldr	r0, [pc, #24]	; (8007a4c <HAL_I2S_MspInit+0xcc>)
 8007a34:	f7f8 ff4a 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007a38:	bf00      	nop
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40003c00 	.word	0x40003c00
 8007a44:	40023800 	.word	0x40023800
 8007a48:	40020000 	.word	0x40020000
 8007a4c:	40020800 	.word	0x40020800

08007a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	; 0x28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a58:	f107 0314 	add.w	r3, r7, #20
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	605a      	str	r2, [r3, #4]
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	60da      	str	r2, [r3, #12]
 8007a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a19      	ldr	r2, [pc, #100]	; (8007ad4 <HAL_SPI_MspInit+0x84>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d12b      	bne.n	8007aca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007a72:	2300      	movs	r3, #0
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <HAL_SPI_MspInit+0x88>)
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7a:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <HAL_SPI_MspInit+0x88>)
 8007a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a80:	6453      	str	r3, [r2, #68]	; 0x44
 8007a82:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <HAL_SPI_MspInit+0x88>)
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <HAL_SPI_MspInit+0x88>)
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <HAL_SPI_MspInit+0x88>)
 8007a98:	f043 0301 	orr.w	r3, r3, #1
 8007a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <HAL_SPI_MspInit+0x88>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007aaa:	23e0      	movs	r3, #224	; 0xe0
 8007aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007aba:	2305      	movs	r3, #5
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007abe:	f107 0314 	add.w	r3, r7, #20
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4805      	ldr	r0, [pc, #20]	; (8007adc <HAL_SPI_MspInit+0x8c>)
 8007ac6:	f7f8 ff01 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007aca:	bf00      	nop
 8007acc:	3728      	adds	r7, #40	; 0x28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40013000 	.word	0x40013000
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	40020000 	.word	0x40020000

08007ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <HAL_TIM_Base_MspInit+0xb8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d116      	bne.n	8007b20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	4b29      	ldr	r3, [pc, #164]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	4a28      	ldr	r2, [pc, #160]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007afc:	f043 0310 	orr.w	r3, r3, #16
 8007b00:	6413      	str	r3, [r2, #64]	; 0x40
 8007b02:	4b26      	ldr	r3, [pc, #152]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2100      	movs	r1, #0
 8007b12:	2036      	movs	r0, #54	; 0x36
 8007b14:	f7f8 fea3 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007b18:	2036      	movs	r0, #54	; 0x36
 8007b1a:	f7f8 febc 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8007b1e:	e036      	b.n	8007b8e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <HAL_TIM_Base_MspInit+0xc0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d116      	bne.n	8007b58 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	4a1a      	ldr	r2, [pc, #104]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007b34:	f043 0320 	orr.w	r3, r3, #32
 8007b38:	6413      	str	r3, [r2, #64]	; 0x40
 8007b3a:	4b18      	ldr	r3, [pc, #96]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	613b      	str	r3, [r7, #16]
 8007b44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007b46:	2200      	movs	r2, #0
 8007b48:	2100      	movs	r1, #0
 8007b4a:	2037      	movs	r0, #55	; 0x37
 8007b4c:	f7f8 fe87 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007b50:	2037      	movs	r0, #55	; 0x37
 8007b52:	f7f8 fea0 	bl	8000896 <HAL_NVIC_EnableIRQ>
}
 8007b56:	e01a      	b.n	8007b8e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a11      	ldr	r2, [pc, #68]	; (8007ba4 <HAL_TIM_Base_MspInit+0xc4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d115      	bne.n	8007b8e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6a:	4a0c      	ldr	r2, [pc, #48]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b70:	6453      	str	r3, [r2, #68]	; 0x44
 8007b72:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <HAL_TIM_Base_MspInit+0xbc>)
 8007b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2100      	movs	r1, #0
 8007b82:	2019      	movs	r0, #25
 8007b84:	f7f8 fe6b 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007b88:	2019      	movs	r0, #25
 8007b8a:	f7f8 fe84 	bl	8000896 <HAL_NVIC_EnableIRQ>
}
 8007b8e:	bf00      	nop
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40001000 	.word	0x40001000
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	40001400 	.word	0x40001400
 8007ba4:	40014400 	.word	0x40014400

08007ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb0:	f107 0314 	add.w	r3, r7, #20
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	; (8007c2c <HAL_UART_MspInit+0x84>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d12b      	bne.n	8007c22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	4b18      	ldr	r3, [pc, #96]	; (8007c30 <HAL_UART_MspInit+0x88>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <HAL_UART_MspInit+0x88>)
 8007bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8007bda:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <HAL_UART_MspInit+0x88>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <HAL_UART_MspInit+0x88>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	4a10      	ldr	r2, [pc, #64]	; (8007c30 <HAL_UART_MspInit+0x88>)
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf6:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <HAL_UART_MspInit+0x88>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007c02:	230c      	movs	r3, #12
 8007c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c06:	2302      	movs	r3, #2
 8007c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007c12:	2307      	movs	r3, #7
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c16:	f107 0314 	add.w	r3, r7, #20
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4805      	ldr	r0, [pc, #20]	; (8007c34 <HAL_UART_MspInit+0x8c>)
 8007c1e:	f7f8 fe55 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007c22:	bf00      	nop
 8007c24:	3728      	adds	r7, #40	; 0x28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40004400 	.word	0x40004400
 8007c30:	40023800 	.word	0x40023800
 8007c34:	40020000 	.word	0x40020000

08007c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c3c:	bf00      	nop
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c46:	b480      	push	{r7}
 8007c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c4a:	e7fe      	b.n	8007c4a <HardFault_Handler+0x4>

08007c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c50:	e7fe      	b.n	8007c50 <MemManage_Handler+0x4>

08007c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c52:	b480      	push	{r7}
 8007c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c56:	e7fe      	b.n	8007c56 <BusFault_Handler+0x4>

08007c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c5c:	e7fe      	b.n	8007c5c <UsageFault_Handler+0x4>

08007c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c62:	bf00      	nop
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c70:	bf00      	nop
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c7e:	bf00      	nop
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c8c:	f7f8 fcca 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c90:	bf00      	nop
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007c98:	4802      	ldr	r0, [pc, #8]	; (8007ca4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007c9a:	f7fc f836 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000120 	.word	0x20000120

08007ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007cac:	4802      	ldr	r0, [pc, #8]	; (8007cb8 <TIM6_DAC_IRQHandler+0x10>)
 8007cae:	f7fc f82c 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007cb2:	bf00      	nop
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000160 	.word	0x20000160

08007cbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007cc0:	4802      	ldr	r0, [pc, #8]	; (8007ccc <TIM7_IRQHandler+0x10>)
 8007cc2:	f7fc f822 	bl	8003d0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007cc6:	bf00      	nop
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000238 	.word	0x20000238

08007cd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007cd4:	4802      	ldr	r0, [pc, #8]	; (8007ce0 <OTG_FS_IRQHandler+0x10>)
 8007cd6:	f7f9 fa4d 	bl	8001174 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007cda:	bf00      	nop
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	2000068c 	.word	0x2000068c

08007ce4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007cec:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <_sbrk+0x50>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <_sbrk+0x16>
		heap_end = &end;
 8007cf4:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <_sbrk+0x50>)
 8007cf6:	4a10      	ldr	r2, [pc, #64]	; (8007d38 <_sbrk+0x54>)
 8007cf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <_sbrk+0x50>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007d00:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <_sbrk+0x50>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	466a      	mov	r2, sp
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d907      	bls.n	8007d1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d0e:	f000 fb7d 	bl	800840c <__errno>
 8007d12:	4602      	mov	r2, r0
 8007d14:	230c      	movs	r3, #12
 8007d16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1c:	e006      	b.n	8007d2c <_sbrk+0x48>
	}

	heap_end += incr;
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <_sbrk+0x50>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	4a03      	ldr	r2, [pc, #12]	; (8007d34 <_sbrk+0x50>)
 8007d28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	200000b8 	.word	0x200000b8
 8007d38:	20000958 	.word	0x20000958

08007d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d40:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <SystemInit+0x60>)
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d46:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <SystemInit+0x60>)
 8007d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007d50:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <SystemInit+0x64>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a12      	ldr	r2, [pc, #72]	; (8007da0 <SystemInit+0x64>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <SystemInit+0x64>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007d62:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <SystemInit+0x64>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a0e      	ldr	r2, [pc, #56]	; (8007da0 <SystemInit+0x64>)
 8007d68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <SystemInit+0x64>)
 8007d74:	4a0b      	ldr	r2, [pc, #44]	; (8007da4 <SystemInit+0x68>)
 8007d76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <SystemInit+0x64>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <SystemInit+0x64>)
 8007d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <SystemInit+0x64>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d8a:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <SystemInit+0x60>)
 8007d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d90:	609a      	str	r2, [r3, #8]
#endif
}
 8007d92:	bf00      	nop
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	e000ed00 	.word	0xe000ed00
 8007da0:	40023800 	.word	0x40023800
 8007da4:	24003010 	.word	0x24003010

08007da8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007dac:	2201      	movs	r2, #1
 8007dae:	490e      	ldr	r1, [pc, #56]	; (8007de8 <MX_USB_HOST_Init+0x40>)
 8007db0:	480e      	ldr	r0, [pc, #56]	; (8007dec <MX_USB_HOST_Init+0x44>)
 8007db2:	f7fd ffe7 	bl	8005d84 <USBH_Init>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007dbc:	f7ff fd68 	bl	8007890 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007dc0:	490b      	ldr	r1, [pc, #44]	; (8007df0 <MX_USB_HOST_Init+0x48>)
 8007dc2:	480a      	ldr	r0, [pc, #40]	; (8007dec <MX_USB_HOST_Init+0x44>)
 8007dc4:	f7fe f851 	bl	8005e6a <USBH_RegisterClass>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007dce:	f7ff fd5f 	bl	8007890 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007dd2:	4806      	ldr	r0, [pc, #24]	; (8007dec <MX_USB_HOST_Init+0x44>)
 8007dd4:	f7fe f8d6 	bl	8005f84 <USBH_Start>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007dde:	f7ff fd57 	bl	8007890 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007de2:	bf00      	nop
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	08007e09 	.word	0x08007e09
 8007dec:	200002c0 	.word	0x200002c0
 8007df0:	20000008 	.word	0x20000008

08007df4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007df8:	4802      	ldr	r0, [pc, #8]	; (8007e04 <MX_USB_HOST_Process+0x10>)
 8007dfa:	f7fe f8d3 	bl	8005fa4 <USBH_Process>
}
 8007dfe:	bf00      	nop
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	200002c0 	.word	0x200002c0

08007e08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d819      	bhi.n	8007e50 <USBH_UserProcess+0x48>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <USBH_UserProcess+0x1c>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e41 	.word	0x08007e41
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e49 	.word	0x08007e49
 8007e34:	08007e39 	.word	0x08007e39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <USBH_UserProcess+0x58>)
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	701a      	strb	r2, [r3, #0]
  break;
 8007e3e:	e008      	b.n	8007e52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <USBH_UserProcess+0x58>)
 8007e42:	2202      	movs	r2, #2
 8007e44:	701a      	strb	r2, [r3, #0]
  break;
 8007e46:	e004      	b.n	8007e52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <USBH_UserProcess+0x58>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
  break;
 8007e4e:	e000      	b.n	8007e52 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	200000bc 	.word	0x200000bc

08007e64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e6c:	f107 0314 	add.w	r3, r7, #20
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	609a      	str	r2, [r3, #8]
 8007e78:	60da      	str	r2, [r3, #12]
 8007e7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e84:	d147      	bne.n	8007f16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e86:	2300      	movs	r3, #0
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	4b25      	ldr	r3, [pc, #148]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8e:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007e90:	f043 0301 	orr.w	r3, r3, #1
 8007e94:	6313      	str	r3, [r2, #48]	; 0x30
 8007e96:	4b22      	ldr	r3, [pc, #136]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	613b      	str	r3, [r7, #16]
 8007ea0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eac:	2300      	movs	r3, #0
 8007eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	481b      	ldr	r0, [pc, #108]	; (8007f24 <HAL_HCD_MspInit+0xc0>)
 8007eb8:	f7f8 fd08 	bl	80008cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ebc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ece:	230a      	movs	r3, #10
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ed2:	f107 0314 	add.w	r3, r7, #20
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4812      	ldr	r0, [pc, #72]	; (8007f24 <HAL_HCD_MspInit+0xc0>)
 8007eda:	f7f8 fcf7 	bl	80008cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ede:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee2:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee8:	6353      	str	r3, [r2, #52]	; 0x34
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	4a0b      	ldr	r2, [pc, #44]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8007efa:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <HAL_HCD_MspInit+0xbc>)
 8007efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	2043      	movs	r0, #67	; 0x43
 8007f0c:	f7f8 fca7 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f10:	2043      	movs	r0, #67	; 0x43
 8007f12:	f7f8 fcc0 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f16:	bf00      	nop
 8007f18:	3728      	adds	r7, #40	; 0x28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40023800 	.word	0x40023800
 8007f24:	40020000 	.word	0x40020000

08007f28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fae5 	bl	8006506 <USBH_LL_IncTimer>
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe fb2a 	bl	80065ac <USBH_LL_Connect>
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fb42 	bl	80065f8 <USBH_LL_Disconnect>
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fad7 	bl	800655a <USBH_LL_PortEnabled>
} 
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fad7 	bl	8006576 <USBH_LL_PortDisabled>
} 
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d12a      	bne.n	8008038 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fe2:	4a18      	ldr	r2, [pc, #96]	; (8008044 <USBH_LL_Init+0x74>)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a15      	ldr	r2, [pc, #84]	; (8008044 <USBH_LL_Init+0x74>)
 8007fee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ff2:	4b14      	ldr	r3, [pc, #80]	; (8008044 <USBH_LL_Init+0x74>)
 8007ff4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ff8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <USBH_LL_Init+0x74>)
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008000:	4b10      	ldr	r3, [pc, #64]	; (8008044 <USBH_LL_Init+0x74>)
 8008002:	2201      	movs	r2, #1
 8008004:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <USBH_LL_Init+0x74>)
 8008008:	2200      	movs	r2, #0
 800800a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <USBH_LL_Init+0x74>)
 800800e:	2202      	movs	r2, #2
 8008010:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <USBH_LL_Init+0x74>)
 8008014:	2200      	movs	r2, #0
 8008016:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008018:	480a      	ldr	r0, [pc, #40]	; (8008044 <USBH_LL_Init+0x74>)
 800801a:	f7f8 fe25 	bl	8000c68 <HAL_HCD_Init>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008024:	f7ff fc34 	bl	8007890 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008028:	4806      	ldr	r0, [pc, #24]	; (8008044 <USBH_LL_Init+0x74>)
 800802a:	f7f9 fa21 	bl	8001470 <HAL_HCD_GetCurrentFrame>
 800802e:	4603      	mov	r3, r0
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fe fa58 	bl	80064e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	2000068c 	.word	0x2000068c

08008048 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800805e:	4618      	mov	r0, r3
 8008060:	f7f9 f98e 	bl	8001380 <HAL_HCD_Start>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f95c 	bl	8008328 <USBH_Get_USB_Status>
 8008070:	4603      	mov	r3, r0
 8008072:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008074:	7bbb      	ldrb	r3, [r7, #14]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008094:	4618      	mov	r0, r3
 8008096:	f7f9 f996 	bl	80013c6 <HAL_HCD_Stop>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f941 	bl	8008328 <USBH_Get_USB_Status>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7f9 f9e0 	bl	800148c <HAL_HCD_GetCurrentSpeed>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d007      	beq.n	80080e2 <USBH_LL_GetSpeed+0x2e>
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d302      	bcc.n	80080dc <USBH_LL_GetSpeed+0x28>
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d006      	beq.n	80080e8 <USBH_LL_GetSpeed+0x34>
 80080da:	e008      	b.n	80080ee <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
    break;
 80080e0:	e008      	b.n	80080f4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
    break;
 80080e6:	e005      	b.n	80080f4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080e8:	2302      	movs	r3, #2
 80080ea:	73fb      	strb	r3, [r7, #15]
    break;
 80080ec:	e002      	b.n	80080f4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80080ee:	2301      	movs	r3, #1
 80080f0:	73fb      	strb	r3, [r7, #15]
    break;
 80080f2:	bf00      	nop
  }
  return  speed;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008114:	4618      	mov	r0, r3
 8008116:	f7f9 f973 	bl	8001400 <HAL_HCD_ResetPort>
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	4618      	mov	r0, r3
 8008122:	f000 f901 	bl	8008328 <USBH_Get_USB_Status>
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800812a:	7bbb      	ldrb	r3, [r7, #14]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f7f9 f97b 	bl	8001446 <HAL_HCD_HC_GetXferCount>
 8008150:	4603      	mov	r3, r0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800815a:	b590      	push	{r4, r7, lr}
 800815c:	b089      	sub	sp, #36	; 0x24
 800815e:	af04      	add	r7, sp, #16
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	461a      	mov	r2, r3
 8008168:	4603      	mov	r3, r0
 800816a:	70fb      	strb	r3, [r7, #3]
 800816c:	460b      	mov	r3, r1
 800816e:	70bb      	strb	r3, [r7, #2]
 8008170:	4613      	mov	r3, r2
 8008172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008182:	787c      	ldrb	r4, [r7, #1]
 8008184:	78ba      	ldrb	r2, [r7, #2]
 8008186:	78f9      	ldrb	r1, [r7, #3]
 8008188:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800818a:	9302      	str	r3, [sp, #8]
 800818c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	4623      	mov	r3, r4
 800819a:	f7f8 fdc7 	bl	8000d2c <HAL_HCD_HC_Init>
 800819e:	4603      	mov	r3, r0
 80081a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 f8bf 	bl	8008328 <USBH_Get_USB_Status>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd90      	pop	{r4, r7, pc}

080081b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7f8 fe40 	bl	8000e5c <HAL_HCD_HC_Halt>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f8a0 	bl	8008328 <USBH_Get_USB_Status>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081f6:	b590      	push	{r4, r7, lr}
 80081f8:	b089      	sub	sp, #36	; 0x24
 80081fa:	af04      	add	r7, sp, #16
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	4608      	mov	r0, r1
 8008200:	4611      	mov	r1, r2
 8008202:	461a      	mov	r2, r3
 8008204:	4603      	mov	r3, r0
 8008206:	70fb      	strb	r3, [r7, #3]
 8008208:	460b      	mov	r3, r1
 800820a:	70bb      	strb	r3, [r7, #2]
 800820c:	4613      	mov	r3, r2
 800820e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800821e:	787c      	ldrb	r4, [r7, #1]
 8008220:	78ba      	ldrb	r2, [r7, #2]
 8008222:	78f9      	ldrb	r1, [r7, #3]
 8008224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008228:	9303      	str	r3, [sp, #12]
 800822a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800822c:	9302      	str	r3, [sp, #8]
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4623      	mov	r3, r4
 800823a:	f7f8 fe33 	bl	8000ea4 <HAL_HCD_HC_SubmitRequest>
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	4618      	mov	r0, r3
 8008246:	f000 f86f 	bl	8008328 <USBH_Get_USB_Status>
 800824a:	4603      	mov	r3, r0
 800824c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800824e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	bd90      	pop	{r4, r7, pc}

08008258 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f7f9 f8d4 	bl	800141c <HAL_HCD_HC_GetURBState>
 8008274:	4603      	mov	r3, r0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008290:	2b01      	cmp	r3, #1
 8008292:	d103      	bne.n	800829c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 f872 	bl	8008380 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800829c:	20c8      	movs	r0, #200	; 0xc8
 800829e:	f7f8 f9e1 	bl	8000664 <HAL_Delay>
  return USBH_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
 80082b8:	4613      	mov	r3, r2
 80082ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	68f9      	ldr	r1, [r7, #12]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	440b      	add	r3, r1
 80082d2:	333b      	adds	r3, #59	; 0x3b
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	68f9      	ldr	r1, [r7, #12]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	440b      	add	r3, r1
 80082e8:	3350      	adds	r3, #80	; 0x50
 80082ea:	78ba      	ldrb	r2, [r7, #2]
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e009      	b.n	8008304 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	68f9      	ldr	r1, [r7, #12]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	440b      	add	r3, r1
 80082fe:	3351      	adds	r3, #81	; 0x51
 8008300:	78ba      	ldrb	r2, [r7, #2]
 8008302:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7f8 f9a2 	bl	8000664 <HAL_Delay>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2b03      	cmp	r3, #3
 800833a:	d817      	bhi.n	800836c <USBH_Get_USB_Status+0x44>
 800833c:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <USBH_Get_USB_Status+0x1c>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008355 	.word	0x08008355
 8008348:	0800835b 	.word	0x0800835b
 800834c:	08008361 	.word	0x08008361
 8008350:	08008367 	.word	0x08008367
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
    break;
 8008358:	e00b      	b.n	8008372 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800835a:	2302      	movs	r3, #2
 800835c:	73fb      	strb	r3, [r7, #15]
    break;
 800835e:	e008      	b.n	8008372 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008360:	2301      	movs	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
    break;
 8008364:	e005      	b.n	8008372 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008366:	2302      	movs	r3, #2
 8008368:	73fb      	strb	r3, [r7, #15]
    break;
 800836a:	e002      	b.n	8008372 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800836c:	2302      	movs	r3, #2
 800836e:	73fb      	strb	r3, [r7, #15]
    break;
 8008370:	bf00      	nop
  }
  return usb_status;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008394:	2301      	movs	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
 8008398:	e001      	b.n	800839e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	461a      	mov	r2, r3
 80083a2:	2101      	movs	r1, #1
 80083a4:	4803      	ldr	r0, [pc, #12]	; (80083b4 <MX_DriverVbusFS+0x34>)
 80083a6:	f7f8 fc2b 	bl	8000c00 <HAL_GPIO_WritePin>
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	40020800 	.word	0x40020800

080083b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80083b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80083f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80083bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80083be:	e003      	b.n	80083c8 <LoopCopyDataInit>

080083c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80083c0:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80083c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80083c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80083c6:	3104      	adds	r1, #4

080083c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80083c8:	480b      	ldr	r0, [pc, #44]	; (80083f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80083ca:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80083cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80083ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80083d0:	d3f6      	bcc.n	80083c0 <CopyDataInit>
  ldr  r2, =_sbss
 80083d2:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80083d4:	e002      	b.n	80083dc <LoopFillZerobss>

080083d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80083d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80083d8:	f842 3b04 	str.w	r3, [r2], #4

080083dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80083de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80083e0:	d3f9      	bcc.n	80083d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80083e2:	f7ff fcab 	bl	8007d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083e6:	f000 f817 	bl	8008418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80083ea:	f7fe ff5b 	bl	80072a4 <main>
  bx  lr    
 80083ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80083f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80083f4:	08008d1c 	.word	0x08008d1c
  ldr  r0, =_sdata
 80083f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80083fc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008400:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008404:	20000954 	.word	0x20000954

08008408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008408:	e7fe      	b.n	8008408 <ADC_IRQHandler>
	...

0800840c <__errno>:
 800840c:	4b01      	ldr	r3, [pc, #4]	; (8008414 <__errno+0x8>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	2000002c 	.word	0x2000002c

08008418 <__libc_init_array>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4e0d      	ldr	r6, [pc, #52]	; (8008450 <__libc_init_array+0x38>)
 800841c:	4c0d      	ldr	r4, [pc, #52]	; (8008454 <__libc_init_array+0x3c>)
 800841e:	1ba4      	subs	r4, r4, r6
 8008420:	10a4      	asrs	r4, r4, #2
 8008422:	2500      	movs	r5, #0
 8008424:	42a5      	cmp	r5, r4
 8008426:	d109      	bne.n	800843c <__libc_init_array+0x24>
 8008428:	4e0b      	ldr	r6, [pc, #44]	; (8008458 <__libc_init_array+0x40>)
 800842a:	4c0c      	ldr	r4, [pc, #48]	; (800845c <__libc_init_array+0x44>)
 800842c:	f000 fc36 	bl	8008c9c <_init>
 8008430:	1ba4      	subs	r4, r4, r6
 8008432:	10a4      	asrs	r4, r4, #2
 8008434:	2500      	movs	r5, #0
 8008436:	42a5      	cmp	r5, r4
 8008438:	d105      	bne.n	8008446 <__libc_init_array+0x2e>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008440:	4798      	blx	r3
 8008442:	3501      	adds	r5, #1
 8008444:	e7ee      	b.n	8008424 <__libc_init_array+0xc>
 8008446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800844a:	4798      	blx	r3
 800844c:	3501      	adds	r5, #1
 800844e:	e7f2      	b.n	8008436 <__libc_init_array+0x1e>
 8008450:	08008d14 	.word	0x08008d14
 8008454:	08008d14 	.word	0x08008d14
 8008458:	08008d14 	.word	0x08008d14
 800845c:	08008d18 	.word	0x08008d18

08008460 <malloc>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <malloc+0xc>)
 8008462:	4601      	mov	r1, r0
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f000 b861 	b.w	800852c <_malloc_r>
 800846a:	bf00      	nop
 800846c:	2000002c 	.word	0x2000002c

08008470 <free>:
 8008470:	4b02      	ldr	r3, [pc, #8]	; (800847c <free+0xc>)
 8008472:	4601      	mov	r1, r0
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	f000 b80b 	b.w	8008490 <_free_r>
 800847a:	bf00      	nop
 800847c:	2000002c 	.word	0x2000002c

08008480 <memset>:
 8008480:	4402      	add	r2, r0
 8008482:	4603      	mov	r3, r0
 8008484:	4293      	cmp	r3, r2
 8008486:	d100      	bne.n	800848a <memset+0xa>
 8008488:	4770      	bx	lr
 800848a:	f803 1b01 	strb.w	r1, [r3], #1
 800848e:	e7f9      	b.n	8008484 <memset+0x4>

08008490 <_free_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4605      	mov	r5, r0
 8008494:	2900      	cmp	r1, #0
 8008496:	d045      	beq.n	8008524 <_free_r+0x94>
 8008498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849c:	1f0c      	subs	r4, r1, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfb8      	it	lt
 80084a2:	18e4      	addlt	r4, r4, r3
 80084a4:	f000 f8cc 	bl	8008640 <__malloc_lock>
 80084a8:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <_free_r+0x98>)
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	4610      	mov	r0, r2
 80084ae:	b933      	cbnz	r3, 80084be <_free_r+0x2e>
 80084b0:	6063      	str	r3, [r4, #4]
 80084b2:	6014      	str	r4, [r2, #0]
 80084b4:	4628      	mov	r0, r5
 80084b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084ba:	f000 b8c2 	b.w	8008642 <__malloc_unlock>
 80084be:	42a3      	cmp	r3, r4
 80084c0:	d90c      	bls.n	80084dc <_free_r+0x4c>
 80084c2:	6821      	ldr	r1, [r4, #0]
 80084c4:	1862      	adds	r2, r4, r1
 80084c6:	4293      	cmp	r3, r2
 80084c8:	bf04      	itt	eq
 80084ca:	681a      	ldreq	r2, [r3, #0]
 80084cc:	685b      	ldreq	r3, [r3, #4]
 80084ce:	6063      	str	r3, [r4, #4]
 80084d0:	bf04      	itt	eq
 80084d2:	1852      	addeq	r2, r2, r1
 80084d4:	6022      	streq	r2, [r4, #0]
 80084d6:	6004      	str	r4, [r0, #0]
 80084d8:	e7ec      	b.n	80084b4 <_free_r+0x24>
 80084da:	4613      	mov	r3, r2
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	b10a      	cbz	r2, 80084e4 <_free_r+0x54>
 80084e0:	42a2      	cmp	r2, r4
 80084e2:	d9fa      	bls.n	80084da <_free_r+0x4a>
 80084e4:	6819      	ldr	r1, [r3, #0]
 80084e6:	1858      	adds	r0, r3, r1
 80084e8:	42a0      	cmp	r0, r4
 80084ea:	d10b      	bne.n	8008504 <_free_r+0x74>
 80084ec:	6820      	ldr	r0, [r4, #0]
 80084ee:	4401      	add	r1, r0
 80084f0:	1858      	adds	r0, r3, r1
 80084f2:	4282      	cmp	r2, r0
 80084f4:	6019      	str	r1, [r3, #0]
 80084f6:	d1dd      	bne.n	80084b4 <_free_r+0x24>
 80084f8:	6810      	ldr	r0, [r2, #0]
 80084fa:	6852      	ldr	r2, [r2, #4]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	4401      	add	r1, r0
 8008500:	6019      	str	r1, [r3, #0]
 8008502:	e7d7      	b.n	80084b4 <_free_r+0x24>
 8008504:	d902      	bls.n	800850c <_free_r+0x7c>
 8008506:	230c      	movs	r3, #12
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	e7d3      	b.n	80084b4 <_free_r+0x24>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	1821      	adds	r1, r4, r0
 8008510:	428a      	cmp	r2, r1
 8008512:	bf04      	itt	eq
 8008514:	6811      	ldreq	r1, [r2, #0]
 8008516:	6852      	ldreq	r2, [r2, #4]
 8008518:	6062      	str	r2, [r4, #4]
 800851a:	bf04      	itt	eq
 800851c:	1809      	addeq	r1, r1, r0
 800851e:	6021      	streq	r1, [r4, #0]
 8008520:	605c      	str	r4, [r3, #4]
 8008522:	e7c7      	b.n	80084b4 <_free_r+0x24>
 8008524:	bd38      	pop	{r3, r4, r5, pc}
 8008526:	bf00      	nop
 8008528:	200000c0 	.word	0x200000c0

0800852c <_malloc_r>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	1ccd      	adds	r5, r1, #3
 8008530:	f025 0503 	bic.w	r5, r5, #3
 8008534:	3508      	adds	r5, #8
 8008536:	2d0c      	cmp	r5, #12
 8008538:	bf38      	it	cc
 800853a:	250c      	movcc	r5, #12
 800853c:	2d00      	cmp	r5, #0
 800853e:	4606      	mov	r6, r0
 8008540:	db01      	blt.n	8008546 <_malloc_r+0x1a>
 8008542:	42a9      	cmp	r1, r5
 8008544:	d903      	bls.n	800854e <_malloc_r+0x22>
 8008546:	230c      	movs	r3, #12
 8008548:	6033      	str	r3, [r6, #0]
 800854a:	2000      	movs	r0, #0
 800854c:	bd70      	pop	{r4, r5, r6, pc}
 800854e:	f000 f877 	bl	8008640 <__malloc_lock>
 8008552:	4a21      	ldr	r2, [pc, #132]	; (80085d8 <_malloc_r+0xac>)
 8008554:	6814      	ldr	r4, [r2, #0]
 8008556:	4621      	mov	r1, r4
 8008558:	b991      	cbnz	r1, 8008580 <_malloc_r+0x54>
 800855a:	4c20      	ldr	r4, [pc, #128]	; (80085dc <_malloc_r+0xb0>)
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	b91b      	cbnz	r3, 8008568 <_malloc_r+0x3c>
 8008560:	4630      	mov	r0, r6
 8008562:	f000 f83d 	bl	80085e0 <_sbrk_r>
 8008566:	6020      	str	r0, [r4, #0]
 8008568:	4629      	mov	r1, r5
 800856a:	4630      	mov	r0, r6
 800856c:	f000 f838 	bl	80085e0 <_sbrk_r>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d124      	bne.n	80085be <_malloc_r+0x92>
 8008574:	230c      	movs	r3, #12
 8008576:	6033      	str	r3, [r6, #0]
 8008578:	4630      	mov	r0, r6
 800857a:	f000 f862 	bl	8008642 <__malloc_unlock>
 800857e:	e7e4      	b.n	800854a <_malloc_r+0x1e>
 8008580:	680b      	ldr	r3, [r1, #0]
 8008582:	1b5b      	subs	r3, r3, r5
 8008584:	d418      	bmi.n	80085b8 <_malloc_r+0x8c>
 8008586:	2b0b      	cmp	r3, #11
 8008588:	d90f      	bls.n	80085aa <_malloc_r+0x7e>
 800858a:	600b      	str	r3, [r1, #0]
 800858c:	50cd      	str	r5, [r1, r3]
 800858e:	18cc      	adds	r4, r1, r3
 8008590:	4630      	mov	r0, r6
 8008592:	f000 f856 	bl	8008642 <__malloc_unlock>
 8008596:	f104 000b 	add.w	r0, r4, #11
 800859a:	1d23      	adds	r3, r4, #4
 800859c:	f020 0007 	bic.w	r0, r0, #7
 80085a0:	1ac3      	subs	r3, r0, r3
 80085a2:	d0d3      	beq.n	800854c <_malloc_r+0x20>
 80085a4:	425a      	negs	r2, r3
 80085a6:	50e2      	str	r2, [r4, r3]
 80085a8:	e7d0      	b.n	800854c <_malloc_r+0x20>
 80085aa:	428c      	cmp	r4, r1
 80085ac:	684b      	ldr	r3, [r1, #4]
 80085ae:	bf16      	itet	ne
 80085b0:	6063      	strne	r3, [r4, #4]
 80085b2:	6013      	streq	r3, [r2, #0]
 80085b4:	460c      	movne	r4, r1
 80085b6:	e7eb      	b.n	8008590 <_malloc_r+0x64>
 80085b8:	460c      	mov	r4, r1
 80085ba:	6849      	ldr	r1, [r1, #4]
 80085bc:	e7cc      	b.n	8008558 <_malloc_r+0x2c>
 80085be:	1cc4      	adds	r4, r0, #3
 80085c0:	f024 0403 	bic.w	r4, r4, #3
 80085c4:	42a0      	cmp	r0, r4
 80085c6:	d005      	beq.n	80085d4 <_malloc_r+0xa8>
 80085c8:	1a21      	subs	r1, r4, r0
 80085ca:	4630      	mov	r0, r6
 80085cc:	f000 f808 	bl	80085e0 <_sbrk_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	d0cf      	beq.n	8008574 <_malloc_r+0x48>
 80085d4:	6025      	str	r5, [r4, #0]
 80085d6:	e7db      	b.n	8008590 <_malloc_r+0x64>
 80085d8:	200000c0 	.word	0x200000c0
 80085dc:	200000c4 	.word	0x200000c4

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4c06      	ldr	r4, [pc, #24]	; (80085fc <_sbrk_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4605      	mov	r5, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	f7ff fb7a 	bl	8007ce4 <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20000950 	.word	0x20000950

08008600 <siprintf>:
 8008600:	b40e      	push	{r1, r2, r3}
 8008602:	b500      	push	{lr}
 8008604:	b09c      	sub	sp, #112	; 0x70
 8008606:	ab1d      	add	r3, sp, #116	; 0x74
 8008608:	9002      	str	r0, [sp, #8]
 800860a:	9006      	str	r0, [sp, #24]
 800860c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008610:	4809      	ldr	r0, [pc, #36]	; (8008638 <siprintf+0x38>)
 8008612:	9107      	str	r1, [sp, #28]
 8008614:	9104      	str	r1, [sp, #16]
 8008616:	4909      	ldr	r1, [pc, #36]	; (800863c <siprintf+0x3c>)
 8008618:	f853 2b04 	ldr.w	r2, [r3], #4
 800861c:	9105      	str	r1, [sp, #20]
 800861e:	6800      	ldr	r0, [r0, #0]
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	a902      	add	r1, sp, #8
 8008624:	f000 f868 	bl	80086f8 <_svfiprintf_r>
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	b01c      	add	sp, #112	; 0x70
 8008630:	f85d eb04 	ldr.w	lr, [sp], #4
 8008634:	b003      	add	sp, #12
 8008636:	4770      	bx	lr
 8008638:	2000002c 	.word	0x2000002c
 800863c:	ffff0208 	.word	0xffff0208

08008640 <__malloc_lock>:
 8008640:	4770      	bx	lr

08008642 <__malloc_unlock>:
 8008642:	4770      	bx	lr

08008644 <__ssputs_r>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	688e      	ldr	r6, [r1, #8]
 800864a:	429e      	cmp	r6, r3
 800864c:	4682      	mov	sl, r0
 800864e:	460c      	mov	r4, r1
 8008650:	4690      	mov	r8, r2
 8008652:	4699      	mov	r9, r3
 8008654:	d837      	bhi.n	80086c6 <__ssputs_r+0x82>
 8008656:	898a      	ldrh	r2, [r1, #12]
 8008658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800865c:	d031      	beq.n	80086c2 <__ssputs_r+0x7e>
 800865e:	6825      	ldr	r5, [r4, #0]
 8008660:	6909      	ldr	r1, [r1, #16]
 8008662:	1a6f      	subs	r7, r5, r1
 8008664:	6965      	ldr	r5, [r4, #20]
 8008666:	2302      	movs	r3, #2
 8008668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800866c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008670:	f109 0301 	add.w	r3, r9, #1
 8008674:	443b      	add	r3, r7
 8008676:	429d      	cmp	r5, r3
 8008678:	bf38      	it	cc
 800867a:	461d      	movcc	r5, r3
 800867c:	0553      	lsls	r3, r2, #21
 800867e:	d530      	bpl.n	80086e2 <__ssputs_r+0x9e>
 8008680:	4629      	mov	r1, r5
 8008682:	f7ff ff53 	bl	800852c <_malloc_r>
 8008686:	4606      	mov	r6, r0
 8008688:	b950      	cbnz	r0, 80086a0 <__ssputs_r+0x5c>
 800868a:	230c      	movs	r3, #12
 800868c:	f8ca 3000 	str.w	r3, [sl]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a0:	463a      	mov	r2, r7
 80086a2:	6921      	ldr	r1, [r4, #16]
 80086a4:	f000 faa8 	bl	8008bf8 <memcpy>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	6126      	str	r6, [r4, #16]
 80086b6:	6165      	str	r5, [r4, #20]
 80086b8:	443e      	add	r6, r7
 80086ba:	1bed      	subs	r5, r5, r7
 80086bc:	6026      	str	r6, [r4, #0]
 80086be:	60a5      	str	r5, [r4, #8]
 80086c0:	464e      	mov	r6, r9
 80086c2:	454e      	cmp	r6, r9
 80086c4:	d900      	bls.n	80086c8 <__ssputs_r+0x84>
 80086c6:	464e      	mov	r6, r9
 80086c8:	4632      	mov	r2, r6
 80086ca:	4641      	mov	r1, r8
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	f000 fa9e 	bl	8008c0e <memmove>
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	1b9b      	subs	r3, r3, r6
 80086d6:	60a3      	str	r3, [r4, #8]
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	441e      	add	r6, r3
 80086dc:	6026      	str	r6, [r4, #0]
 80086de:	2000      	movs	r0, #0
 80086e0:	e7dc      	b.n	800869c <__ssputs_r+0x58>
 80086e2:	462a      	mov	r2, r5
 80086e4:	f000 faac 	bl	8008c40 <_realloc_r>
 80086e8:	4606      	mov	r6, r0
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d1e2      	bne.n	80086b4 <__ssputs_r+0x70>
 80086ee:	6921      	ldr	r1, [r4, #16]
 80086f0:	4650      	mov	r0, sl
 80086f2:	f7ff fecd 	bl	8008490 <_free_r>
 80086f6:	e7c8      	b.n	800868a <__ssputs_r+0x46>

080086f8 <_svfiprintf_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	461d      	mov	r5, r3
 80086fe:	898b      	ldrh	r3, [r1, #12]
 8008700:	061f      	lsls	r7, r3, #24
 8008702:	b09d      	sub	sp, #116	; 0x74
 8008704:	4680      	mov	r8, r0
 8008706:	460c      	mov	r4, r1
 8008708:	4616      	mov	r6, r2
 800870a:	d50f      	bpl.n	800872c <_svfiprintf_r+0x34>
 800870c:	690b      	ldr	r3, [r1, #16]
 800870e:	b96b      	cbnz	r3, 800872c <_svfiprintf_r+0x34>
 8008710:	2140      	movs	r1, #64	; 0x40
 8008712:	f7ff ff0b 	bl	800852c <_malloc_r>
 8008716:	6020      	str	r0, [r4, #0]
 8008718:	6120      	str	r0, [r4, #16]
 800871a:	b928      	cbnz	r0, 8008728 <_svfiprintf_r+0x30>
 800871c:	230c      	movs	r3, #12
 800871e:	f8c8 3000 	str.w	r3, [r8]
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	e0c8      	b.n	80088ba <_svfiprintf_r+0x1c2>
 8008728:	2340      	movs	r3, #64	; 0x40
 800872a:	6163      	str	r3, [r4, #20]
 800872c:	2300      	movs	r3, #0
 800872e:	9309      	str	r3, [sp, #36]	; 0x24
 8008730:	2320      	movs	r3, #32
 8008732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008736:	2330      	movs	r3, #48	; 0x30
 8008738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800873c:	9503      	str	r5, [sp, #12]
 800873e:	f04f 0b01 	mov.w	fp, #1
 8008742:	4637      	mov	r7, r6
 8008744:	463d      	mov	r5, r7
 8008746:	f815 3b01 	ldrb.w	r3, [r5], #1
 800874a:	b10b      	cbz	r3, 8008750 <_svfiprintf_r+0x58>
 800874c:	2b25      	cmp	r3, #37	; 0x25
 800874e:	d13e      	bne.n	80087ce <_svfiprintf_r+0xd6>
 8008750:	ebb7 0a06 	subs.w	sl, r7, r6
 8008754:	d00b      	beq.n	800876e <_svfiprintf_r+0x76>
 8008756:	4653      	mov	r3, sl
 8008758:	4632      	mov	r2, r6
 800875a:	4621      	mov	r1, r4
 800875c:	4640      	mov	r0, r8
 800875e:	f7ff ff71 	bl	8008644 <__ssputs_r>
 8008762:	3001      	adds	r0, #1
 8008764:	f000 80a4 	beq.w	80088b0 <_svfiprintf_r+0x1b8>
 8008768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876a:	4453      	add	r3, sl
 800876c:	9309      	str	r3, [sp, #36]	; 0x24
 800876e:	783b      	ldrb	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 809d 	beq.w	80088b0 <_svfiprintf_r+0x1b8>
 8008776:	2300      	movs	r3, #0
 8008778:	f04f 32ff 	mov.w	r2, #4294967295
 800877c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	9307      	str	r3, [sp, #28]
 8008784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008788:	931a      	str	r3, [sp, #104]	; 0x68
 800878a:	462f      	mov	r7, r5
 800878c:	2205      	movs	r2, #5
 800878e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008792:	4850      	ldr	r0, [pc, #320]	; (80088d4 <_svfiprintf_r+0x1dc>)
 8008794:	f7f7 fd24 	bl	80001e0 <memchr>
 8008798:	9b04      	ldr	r3, [sp, #16]
 800879a:	b9d0      	cbnz	r0, 80087d2 <_svfiprintf_r+0xda>
 800879c:	06d9      	lsls	r1, r3, #27
 800879e:	bf44      	itt	mi
 80087a0:	2220      	movmi	r2, #32
 80087a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087a6:	071a      	lsls	r2, r3, #28
 80087a8:	bf44      	itt	mi
 80087aa:	222b      	movmi	r2, #43	; 0x2b
 80087ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087b0:	782a      	ldrb	r2, [r5, #0]
 80087b2:	2a2a      	cmp	r2, #42	; 0x2a
 80087b4:	d015      	beq.n	80087e2 <_svfiprintf_r+0xea>
 80087b6:	9a07      	ldr	r2, [sp, #28]
 80087b8:	462f      	mov	r7, r5
 80087ba:	2000      	movs	r0, #0
 80087bc:	250a      	movs	r5, #10
 80087be:	4639      	mov	r1, r7
 80087c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c4:	3b30      	subs	r3, #48	; 0x30
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d94d      	bls.n	8008866 <_svfiprintf_r+0x16e>
 80087ca:	b1b8      	cbz	r0, 80087fc <_svfiprintf_r+0x104>
 80087cc:	e00f      	b.n	80087ee <_svfiprintf_r+0xf6>
 80087ce:	462f      	mov	r7, r5
 80087d0:	e7b8      	b.n	8008744 <_svfiprintf_r+0x4c>
 80087d2:	4a40      	ldr	r2, [pc, #256]	; (80088d4 <_svfiprintf_r+0x1dc>)
 80087d4:	1a80      	subs	r0, r0, r2
 80087d6:	fa0b f000 	lsl.w	r0, fp, r0
 80087da:	4318      	orrs	r0, r3
 80087dc:	9004      	str	r0, [sp, #16]
 80087de:	463d      	mov	r5, r7
 80087e0:	e7d3      	b.n	800878a <_svfiprintf_r+0x92>
 80087e2:	9a03      	ldr	r2, [sp, #12]
 80087e4:	1d11      	adds	r1, r2, #4
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	9103      	str	r1, [sp, #12]
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	db01      	blt.n	80087f2 <_svfiprintf_r+0xfa>
 80087ee:	9207      	str	r2, [sp, #28]
 80087f0:	e004      	b.n	80087fc <_svfiprintf_r+0x104>
 80087f2:	4252      	negs	r2, r2
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	9207      	str	r2, [sp, #28]
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	783b      	ldrb	r3, [r7, #0]
 80087fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008800:	d10c      	bne.n	800881c <_svfiprintf_r+0x124>
 8008802:	787b      	ldrb	r3, [r7, #1]
 8008804:	2b2a      	cmp	r3, #42	; 0x2a
 8008806:	d133      	bne.n	8008870 <_svfiprintf_r+0x178>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	9203      	str	r2, [sp, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfb8      	it	lt
 8008814:	f04f 33ff 	movlt.w	r3, #4294967295
 8008818:	3702      	adds	r7, #2
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	4d2e      	ldr	r5, [pc, #184]	; (80088d8 <_svfiprintf_r+0x1e0>)
 800881e:	7839      	ldrb	r1, [r7, #0]
 8008820:	2203      	movs	r2, #3
 8008822:	4628      	mov	r0, r5
 8008824:	f7f7 fcdc 	bl	80001e0 <memchr>
 8008828:	b138      	cbz	r0, 800883a <_svfiprintf_r+0x142>
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	1b40      	subs	r0, r0, r5
 800882e:	fa03 f000 	lsl.w	r0, r3, r0
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	4303      	orrs	r3, r0
 8008836:	3701      	adds	r7, #1
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	7839      	ldrb	r1, [r7, #0]
 800883c:	4827      	ldr	r0, [pc, #156]	; (80088dc <_svfiprintf_r+0x1e4>)
 800883e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008842:	2206      	movs	r2, #6
 8008844:	1c7e      	adds	r6, r7, #1
 8008846:	f7f7 fccb 	bl	80001e0 <memchr>
 800884a:	2800      	cmp	r0, #0
 800884c:	d038      	beq.n	80088c0 <_svfiprintf_r+0x1c8>
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <_svfiprintf_r+0x1e8>)
 8008850:	bb13      	cbnz	r3, 8008898 <_svfiprintf_r+0x1a0>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	3307      	adds	r3, #7
 8008856:	f023 0307 	bic.w	r3, r3, #7
 800885a:	3308      	adds	r3, #8
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	444b      	add	r3, r9
 8008862:	9309      	str	r3, [sp, #36]	; 0x24
 8008864:	e76d      	b.n	8008742 <_svfiprintf_r+0x4a>
 8008866:	fb05 3202 	mla	r2, r5, r2, r3
 800886a:	2001      	movs	r0, #1
 800886c:	460f      	mov	r7, r1
 800886e:	e7a6      	b.n	80087be <_svfiprintf_r+0xc6>
 8008870:	2300      	movs	r3, #0
 8008872:	3701      	adds	r7, #1
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	4619      	mov	r1, r3
 8008878:	250a      	movs	r5, #10
 800887a:	4638      	mov	r0, r7
 800887c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008880:	3a30      	subs	r2, #48	; 0x30
 8008882:	2a09      	cmp	r2, #9
 8008884:	d903      	bls.n	800888e <_svfiprintf_r+0x196>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0c8      	beq.n	800881c <_svfiprintf_r+0x124>
 800888a:	9105      	str	r1, [sp, #20]
 800888c:	e7c6      	b.n	800881c <_svfiprintf_r+0x124>
 800888e:	fb05 2101 	mla	r1, r5, r1, r2
 8008892:	2301      	movs	r3, #1
 8008894:	4607      	mov	r7, r0
 8008896:	e7f0      	b.n	800887a <_svfiprintf_r+0x182>
 8008898:	ab03      	add	r3, sp, #12
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	4622      	mov	r2, r4
 800889e:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <_svfiprintf_r+0x1ec>)
 80088a0:	a904      	add	r1, sp, #16
 80088a2:	4640      	mov	r0, r8
 80088a4:	f3af 8000 	nop.w
 80088a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088ac:	4681      	mov	r9, r0
 80088ae:	d1d6      	bne.n	800885e <_svfiprintf_r+0x166>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	065b      	lsls	r3, r3, #25
 80088b4:	f53f af35 	bmi.w	8008722 <_svfiprintf_r+0x2a>
 80088b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ba:	b01d      	add	sp, #116	; 0x74
 80088bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c0:	ab03      	add	r3, sp, #12
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4622      	mov	r2, r4
 80088c6:	4b07      	ldr	r3, [pc, #28]	; (80088e4 <_svfiprintf_r+0x1ec>)
 80088c8:	a904      	add	r1, sp, #16
 80088ca:	4640      	mov	r0, r8
 80088cc:	f000 f882 	bl	80089d4 <_printf_i>
 80088d0:	e7ea      	b.n	80088a8 <_svfiprintf_r+0x1b0>
 80088d2:	bf00      	nop
 80088d4:	08008cd8 	.word	0x08008cd8
 80088d8:	08008cde 	.word	0x08008cde
 80088dc:	08008ce2 	.word	0x08008ce2
 80088e0:	00000000 	.word	0x00000000
 80088e4:	08008645 	.word	0x08008645

080088e8 <_printf_common>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	4691      	mov	r9, r2
 80088ee:	461f      	mov	r7, r3
 80088f0:	688a      	ldr	r2, [r1, #8]
 80088f2:	690b      	ldr	r3, [r1, #16]
 80088f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088f8:	4293      	cmp	r3, r2
 80088fa:	bfb8      	it	lt
 80088fc:	4613      	movlt	r3, r2
 80088fe:	f8c9 3000 	str.w	r3, [r9]
 8008902:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008906:	4606      	mov	r6, r0
 8008908:	460c      	mov	r4, r1
 800890a:	b112      	cbz	r2, 8008912 <_printf_common+0x2a>
 800890c:	3301      	adds	r3, #1
 800890e:	f8c9 3000 	str.w	r3, [r9]
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	0699      	lsls	r1, r3, #26
 8008916:	bf42      	ittt	mi
 8008918:	f8d9 3000 	ldrmi.w	r3, [r9]
 800891c:	3302      	addmi	r3, #2
 800891e:	f8c9 3000 	strmi.w	r3, [r9]
 8008922:	6825      	ldr	r5, [r4, #0]
 8008924:	f015 0506 	ands.w	r5, r5, #6
 8008928:	d107      	bne.n	800893a <_printf_common+0x52>
 800892a:	f104 0a19 	add.w	sl, r4, #25
 800892e:	68e3      	ldr	r3, [r4, #12]
 8008930:	f8d9 2000 	ldr.w	r2, [r9]
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	42ab      	cmp	r3, r5
 8008938:	dc28      	bgt.n	800898c <_printf_common+0xa4>
 800893a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	3300      	adds	r3, #0
 8008942:	bf18      	it	ne
 8008944:	2301      	movne	r3, #1
 8008946:	0692      	lsls	r2, r2, #26
 8008948:	d42d      	bmi.n	80089a6 <_printf_common+0xbe>
 800894a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800894e:	4639      	mov	r1, r7
 8008950:	4630      	mov	r0, r6
 8008952:	47c0      	blx	r8
 8008954:	3001      	adds	r0, #1
 8008956:	d020      	beq.n	800899a <_printf_common+0xb2>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	68e5      	ldr	r5, [r4, #12]
 800895c:	f8d9 2000 	ldr.w	r2, [r9]
 8008960:	f003 0306 	and.w	r3, r3, #6
 8008964:	2b04      	cmp	r3, #4
 8008966:	bf08      	it	eq
 8008968:	1aad      	subeq	r5, r5, r2
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	6922      	ldr	r2, [r4, #16]
 800896e:	bf0c      	ite	eq
 8008970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008974:	2500      	movne	r5, #0
 8008976:	4293      	cmp	r3, r2
 8008978:	bfc4      	itt	gt
 800897a:	1a9b      	subgt	r3, r3, r2
 800897c:	18ed      	addgt	r5, r5, r3
 800897e:	f04f 0900 	mov.w	r9, #0
 8008982:	341a      	adds	r4, #26
 8008984:	454d      	cmp	r5, r9
 8008986:	d11a      	bne.n	80089be <_printf_common+0xd6>
 8008988:	2000      	movs	r0, #0
 800898a:	e008      	b.n	800899e <_printf_common+0xb6>
 800898c:	2301      	movs	r3, #1
 800898e:	4652      	mov	r2, sl
 8008990:	4639      	mov	r1, r7
 8008992:	4630      	mov	r0, r6
 8008994:	47c0      	blx	r8
 8008996:	3001      	adds	r0, #1
 8008998:	d103      	bne.n	80089a2 <_printf_common+0xba>
 800899a:	f04f 30ff 	mov.w	r0, #4294967295
 800899e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a2:	3501      	adds	r5, #1
 80089a4:	e7c3      	b.n	800892e <_printf_common+0x46>
 80089a6:	18e1      	adds	r1, r4, r3
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	2030      	movs	r0, #48	; 0x30
 80089ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089b0:	4422      	add	r2, r4
 80089b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089ba:	3302      	adds	r3, #2
 80089bc:	e7c5      	b.n	800894a <_printf_common+0x62>
 80089be:	2301      	movs	r3, #1
 80089c0:	4622      	mov	r2, r4
 80089c2:	4639      	mov	r1, r7
 80089c4:	4630      	mov	r0, r6
 80089c6:	47c0      	blx	r8
 80089c8:	3001      	adds	r0, #1
 80089ca:	d0e6      	beq.n	800899a <_printf_common+0xb2>
 80089cc:	f109 0901 	add.w	r9, r9, #1
 80089d0:	e7d8      	b.n	8008984 <_printf_common+0x9c>
	...

080089d4 <_printf_i>:
 80089d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80089dc:	460c      	mov	r4, r1
 80089de:	7e09      	ldrb	r1, [r1, #24]
 80089e0:	b085      	sub	sp, #20
 80089e2:	296e      	cmp	r1, #110	; 0x6e
 80089e4:	4617      	mov	r7, r2
 80089e6:	4606      	mov	r6, r0
 80089e8:	4698      	mov	r8, r3
 80089ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089ec:	f000 80b3 	beq.w	8008b56 <_printf_i+0x182>
 80089f0:	d822      	bhi.n	8008a38 <_printf_i+0x64>
 80089f2:	2963      	cmp	r1, #99	; 0x63
 80089f4:	d036      	beq.n	8008a64 <_printf_i+0x90>
 80089f6:	d80a      	bhi.n	8008a0e <_printf_i+0x3a>
 80089f8:	2900      	cmp	r1, #0
 80089fa:	f000 80b9 	beq.w	8008b70 <_printf_i+0x19c>
 80089fe:	2958      	cmp	r1, #88	; 0x58
 8008a00:	f000 8083 	beq.w	8008b0a <_printf_i+0x136>
 8008a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a0c:	e032      	b.n	8008a74 <_printf_i+0xa0>
 8008a0e:	2964      	cmp	r1, #100	; 0x64
 8008a10:	d001      	beq.n	8008a16 <_printf_i+0x42>
 8008a12:	2969      	cmp	r1, #105	; 0x69
 8008a14:	d1f6      	bne.n	8008a04 <_printf_i+0x30>
 8008a16:	6820      	ldr	r0, [r4, #0]
 8008a18:	6813      	ldr	r3, [r2, #0]
 8008a1a:	0605      	lsls	r5, r0, #24
 8008a1c:	f103 0104 	add.w	r1, r3, #4
 8008a20:	d52a      	bpl.n	8008a78 <_printf_i+0xa4>
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6011      	str	r1, [r2, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da03      	bge.n	8008a32 <_printf_i+0x5e>
 8008a2a:	222d      	movs	r2, #45	; 0x2d
 8008a2c:	425b      	negs	r3, r3
 8008a2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a32:	486f      	ldr	r0, [pc, #444]	; (8008bf0 <_printf_i+0x21c>)
 8008a34:	220a      	movs	r2, #10
 8008a36:	e039      	b.n	8008aac <_printf_i+0xd8>
 8008a38:	2973      	cmp	r1, #115	; 0x73
 8008a3a:	f000 809d 	beq.w	8008b78 <_printf_i+0x1a4>
 8008a3e:	d808      	bhi.n	8008a52 <_printf_i+0x7e>
 8008a40:	296f      	cmp	r1, #111	; 0x6f
 8008a42:	d020      	beq.n	8008a86 <_printf_i+0xb2>
 8008a44:	2970      	cmp	r1, #112	; 0x70
 8008a46:	d1dd      	bne.n	8008a04 <_printf_i+0x30>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	f043 0320 	orr.w	r3, r3, #32
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	e003      	b.n	8008a5a <_printf_i+0x86>
 8008a52:	2975      	cmp	r1, #117	; 0x75
 8008a54:	d017      	beq.n	8008a86 <_printf_i+0xb2>
 8008a56:	2978      	cmp	r1, #120	; 0x78
 8008a58:	d1d4      	bne.n	8008a04 <_printf_i+0x30>
 8008a5a:	2378      	movs	r3, #120	; 0x78
 8008a5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a60:	4864      	ldr	r0, [pc, #400]	; (8008bf4 <_printf_i+0x220>)
 8008a62:	e055      	b.n	8008b10 <_printf_i+0x13c>
 8008a64:	6813      	ldr	r3, [r2, #0]
 8008a66:	1d19      	adds	r1, r3, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6011      	str	r1, [r2, #0]
 8008a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a74:	2301      	movs	r3, #1
 8008a76:	e08c      	b.n	8008b92 <_printf_i+0x1be>
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6011      	str	r1, [r2, #0]
 8008a7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a80:	bf18      	it	ne
 8008a82:	b21b      	sxthne	r3, r3
 8008a84:	e7cf      	b.n	8008a26 <_printf_i+0x52>
 8008a86:	6813      	ldr	r3, [r2, #0]
 8008a88:	6825      	ldr	r5, [r4, #0]
 8008a8a:	1d18      	adds	r0, r3, #4
 8008a8c:	6010      	str	r0, [r2, #0]
 8008a8e:	0628      	lsls	r0, r5, #24
 8008a90:	d501      	bpl.n	8008a96 <_printf_i+0xc2>
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	e002      	b.n	8008a9c <_printf_i+0xc8>
 8008a96:	0668      	lsls	r0, r5, #25
 8008a98:	d5fb      	bpl.n	8008a92 <_printf_i+0xbe>
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	4854      	ldr	r0, [pc, #336]	; (8008bf0 <_printf_i+0x21c>)
 8008a9e:	296f      	cmp	r1, #111	; 0x6f
 8008aa0:	bf14      	ite	ne
 8008aa2:	220a      	movne	r2, #10
 8008aa4:	2208      	moveq	r2, #8
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aac:	6865      	ldr	r5, [r4, #4]
 8008aae:	60a5      	str	r5, [r4, #8]
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	f2c0 8095 	blt.w	8008be0 <_printf_i+0x20c>
 8008ab6:	6821      	ldr	r1, [r4, #0]
 8008ab8:	f021 0104 	bic.w	r1, r1, #4
 8008abc:	6021      	str	r1, [r4, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d13d      	bne.n	8008b3e <_printf_i+0x16a>
 8008ac2:	2d00      	cmp	r5, #0
 8008ac4:	f040 808e 	bne.w	8008be4 <_printf_i+0x210>
 8008ac8:	4665      	mov	r5, ip
 8008aca:	2a08      	cmp	r2, #8
 8008acc:	d10b      	bne.n	8008ae6 <_printf_i+0x112>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	07db      	lsls	r3, r3, #31
 8008ad2:	d508      	bpl.n	8008ae6 <_printf_i+0x112>
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	6862      	ldr	r2, [r4, #4]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	bfde      	ittt	le
 8008adc:	2330      	movle	r3, #48	; 0x30
 8008ade:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ae2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ae6:	ebac 0305 	sub.w	r3, ip, r5
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	f8cd 8000 	str.w	r8, [sp]
 8008af0:	463b      	mov	r3, r7
 8008af2:	aa03      	add	r2, sp, #12
 8008af4:	4621      	mov	r1, r4
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7ff fef6 	bl	80088e8 <_printf_common>
 8008afc:	3001      	adds	r0, #1
 8008afe:	d14d      	bne.n	8008b9c <_printf_i+0x1c8>
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	b005      	add	sp, #20
 8008b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b0a:	4839      	ldr	r0, [pc, #228]	; (8008bf0 <_printf_i+0x21c>)
 8008b0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b10:	6813      	ldr	r3, [r2, #0]
 8008b12:	6821      	ldr	r1, [r4, #0]
 8008b14:	1d1d      	adds	r5, r3, #4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6015      	str	r5, [r2, #0]
 8008b1a:	060a      	lsls	r2, r1, #24
 8008b1c:	d50b      	bpl.n	8008b36 <_printf_i+0x162>
 8008b1e:	07ca      	lsls	r2, r1, #31
 8008b20:	bf44      	itt	mi
 8008b22:	f041 0120 	orrmi.w	r1, r1, #32
 8008b26:	6021      	strmi	r1, [r4, #0]
 8008b28:	b91b      	cbnz	r3, 8008b32 <_printf_i+0x15e>
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	f022 0220 	bic.w	r2, r2, #32
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	2210      	movs	r2, #16
 8008b34:	e7b7      	b.n	8008aa6 <_printf_i+0xd2>
 8008b36:	064d      	lsls	r5, r1, #25
 8008b38:	bf48      	it	mi
 8008b3a:	b29b      	uxthmi	r3, r3
 8008b3c:	e7ef      	b.n	8008b1e <_printf_i+0x14a>
 8008b3e:	4665      	mov	r5, ip
 8008b40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b44:	fb02 3311 	mls	r3, r2, r1, r3
 8008b48:	5cc3      	ldrb	r3, [r0, r3]
 8008b4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b4e:	460b      	mov	r3, r1
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d1f5      	bne.n	8008b40 <_printf_i+0x16c>
 8008b54:	e7b9      	b.n	8008aca <_printf_i+0xf6>
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	6825      	ldr	r5, [r4, #0]
 8008b5a:	6961      	ldr	r1, [r4, #20]
 8008b5c:	1d18      	adds	r0, r3, #4
 8008b5e:	6010      	str	r0, [r2, #0]
 8008b60:	0628      	lsls	r0, r5, #24
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	d501      	bpl.n	8008b6a <_printf_i+0x196>
 8008b66:	6019      	str	r1, [r3, #0]
 8008b68:	e002      	b.n	8008b70 <_printf_i+0x19c>
 8008b6a:	066a      	lsls	r2, r5, #25
 8008b6c:	d5fb      	bpl.n	8008b66 <_printf_i+0x192>
 8008b6e:	8019      	strh	r1, [r3, #0]
 8008b70:	2300      	movs	r3, #0
 8008b72:	6123      	str	r3, [r4, #16]
 8008b74:	4665      	mov	r5, ip
 8008b76:	e7b9      	b.n	8008aec <_printf_i+0x118>
 8008b78:	6813      	ldr	r3, [r2, #0]
 8008b7a:	1d19      	adds	r1, r3, #4
 8008b7c:	6011      	str	r1, [r2, #0]
 8008b7e:	681d      	ldr	r5, [r3, #0]
 8008b80:	6862      	ldr	r2, [r4, #4]
 8008b82:	2100      	movs	r1, #0
 8008b84:	4628      	mov	r0, r5
 8008b86:	f7f7 fb2b 	bl	80001e0 <memchr>
 8008b8a:	b108      	cbz	r0, 8008b90 <_printf_i+0x1bc>
 8008b8c:	1b40      	subs	r0, r0, r5
 8008b8e:	6060      	str	r0, [r4, #4]
 8008b90:	6863      	ldr	r3, [r4, #4]
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	2300      	movs	r3, #0
 8008b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b9a:	e7a7      	b.n	8008aec <_printf_i+0x118>
 8008b9c:	6923      	ldr	r3, [r4, #16]
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	47c0      	blx	r8
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d0aa      	beq.n	8008b00 <_printf_i+0x12c>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	079b      	lsls	r3, r3, #30
 8008bae:	d413      	bmi.n	8008bd8 <_printf_i+0x204>
 8008bb0:	68e0      	ldr	r0, [r4, #12]
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	4298      	cmp	r0, r3
 8008bb6:	bfb8      	it	lt
 8008bb8:	4618      	movlt	r0, r3
 8008bba:	e7a3      	b.n	8008b04 <_printf_i+0x130>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	464a      	mov	r2, r9
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	47c0      	blx	r8
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d09a      	beq.n	8008b00 <_printf_i+0x12c>
 8008bca:	3501      	adds	r5, #1
 8008bcc:	68e3      	ldr	r3, [r4, #12]
 8008bce:	9a03      	ldr	r2, [sp, #12]
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	42ab      	cmp	r3, r5
 8008bd4:	dcf2      	bgt.n	8008bbc <_printf_i+0x1e8>
 8008bd6:	e7eb      	b.n	8008bb0 <_printf_i+0x1dc>
 8008bd8:	2500      	movs	r5, #0
 8008bda:	f104 0919 	add.w	r9, r4, #25
 8008bde:	e7f5      	b.n	8008bcc <_printf_i+0x1f8>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1ac      	bne.n	8008b3e <_printf_i+0x16a>
 8008be4:	7803      	ldrb	r3, [r0, #0]
 8008be6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bee:	e76c      	b.n	8008aca <_printf_i+0xf6>
 8008bf0:	08008ce9 	.word	0x08008ce9
 8008bf4:	08008cfa 	.word	0x08008cfa

08008bf8 <memcpy>:
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	1e43      	subs	r3, r0, #1
 8008bfc:	440a      	add	r2, r1
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	d100      	bne.n	8008c04 <memcpy+0xc>
 8008c02:	bd10      	pop	{r4, pc}
 8008c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c0c:	e7f7      	b.n	8008bfe <memcpy+0x6>

08008c0e <memmove>:
 8008c0e:	4288      	cmp	r0, r1
 8008c10:	b510      	push	{r4, lr}
 8008c12:	eb01 0302 	add.w	r3, r1, r2
 8008c16:	d807      	bhi.n	8008c28 <memmove+0x1a>
 8008c18:	1e42      	subs	r2, r0, #1
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	d00a      	beq.n	8008c34 <memmove+0x26>
 8008c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c22:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008c26:	e7f8      	b.n	8008c1a <memmove+0xc>
 8008c28:	4283      	cmp	r3, r0
 8008c2a:	d9f5      	bls.n	8008c18 <memmove+0xa>
 8008c2c:	1881      	adds	r1, r0, r2
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	42d3      	cmn	r3, r2
 8008c32:	d100      	bne.n	8008c36 <memmove+0x28>
 8008c34:	bd10      	pop	{r4, pc}
 8008c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c3e:	e7f7      	b.n	8008c30 <memmove+0x22>

08008c40 <_realloc_r>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	4607      	mov	r7, r0
 8008c44:	4614      	mov	r4, r2
 8008c46:	460e      	mov	r6, r1
 8008c48:	b921      	cbnz	r1, 8008c54 <_realloc_r+0x14>
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c50:	f7ff bc6c 	b.w	800852c <_malloc_r>
 8008c54:	b922      	cbnz	r2, 8008c60 <_realloc_r+0x20>
 8008c56:	f7ff fc1b 	bl	8008490 <_free_r>
 8008c5a:	4625      	mov	r5, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c60:	f000 f814 	bl	8008c8c <_malloc_usable_size_r>
 8008c64:	42a0      	cmp	r0, r4
 8008c66:	d20f      	bcs.n	8008c88 <_realloc_r+0x48>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	f7ff fc5e 	bl	800852c <_malloc_r>
 8008c70:	4605      	mov	r5, r0
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d0f2      	beq.n	8008c5c <_realloc_r+0x1c>
 8008c76:	4631      	mov	r1, r6
 8008c78:	4622      	mov	r2, r4
 8008c7a:	f7ff ffbd 	bl	8008bf8 <memcpy>
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff fc05 	bl	8008490 <_free_r>
 8008c86:	e7e9      	b.n	8008c5c <_realloc_r+0x1c>
 8008c88:	4635      	mov	r5, r6
 8008c8a:	e7e7      	b.n	8008c5c <_realloc_r+0x1c>

08008c8c <_malloc_usable_size_r>:
 8008c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c90:	1f18      	subs	r0, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfbc      	itt	lt
 8008c96:	580b      	ldrlt	r3, [r1, r0]
 8008c98:	18c0      	addlt	r0, r0, r3
 8008c9a:	4770      	bx	lr

08008c9c <_init>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	bf00      	nop
 8008ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca2:	bc08      	pop	{r3}
 8008ca4:	469e      	mov	lr, r3
 8008ca6:	4770      	bx	lr

08008ca8 <_fini>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	bf00      	nop
 8008cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cae:	bc08      	pop	{r3}
 8008cb0:	469e      	mov	lr, r3
 8008cb2:	4770      	bx	lr
