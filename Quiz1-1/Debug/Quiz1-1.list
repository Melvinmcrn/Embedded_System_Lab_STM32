
Quiz1-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008354  08008354  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800835c  0800835c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  080083f4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  080083f4  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba7c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039d8  00000000  00000000  0003bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  0003f518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001490  00000000  00000000  00040b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025170  00000000  00000000  00041fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013843  00000000  00000000  00067130  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1561  00000000  00000000  0007a973  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed8  00000000  00000000  0014bf50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008320 	.word	0x08008320

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008320 	.word	0x08008320

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f007 f8c4 	bl	8007688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	200000c0 	.word	0x200000c0

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000c0 	.word	0x200000c0

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x4a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d123      	bne.n	80008a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4013      	ands	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0203 	and.w	r2, r3, #3
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00b      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d007      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	2b11      	cmp	r3, #17
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d130      	bne.n	800095c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5e      	ldr	r2, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	619a      	str	r2, [r3, #24]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f006 fa7a 	bl	8007094 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40013c00 	.word	0x40013c00

08000bac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	b08f      	sub	sp, #60	; 0x3c
 8000bb0:	af0a      	add	r7, sp, #40	; 0x28
 8000bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e054      	b.n	8000c68 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d106      	bne.n	8000bde <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f006 ffd1 	bl	8007b80 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2203      	movs	r2, #3
 8000be2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 fda5 	bl	800474c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	687e      	ldr	r6, [r7, #4]
 8000c0a:	466d      	mov	r5, sp
 8000c0c:	f106 0410 	add.w	r4, r6, #16
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c20:	1d33      	adds	r3, r6, #4
 8000c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c24:	6838      	ldr	r0, [r7, #0]
 8000c26:	f003 fd1f 	bl	8004668 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fd9c 	bl	800476e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	687e      	ldr	r6, [r7, #4]
 8000c3e:	466d      	mov	r5, sp
 8000c40:	f106 0410 	add.w	r4, r6, #16
 8000c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c54:	1d33      	adds	r3, r6, #4
 8000c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f003 feaf 	bl	80049bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c70 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af04      	add	r7, sp, #16
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	4608      	mov	r0, r1
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	70fb      	strb	r3, [r7, #3]
 8000c82:	460b      	mov	r3, r1
 8000c84:	70bb      	strb	r3, [r7, #2]
 8000c86:	4613      	mov	r3, r2
 8000c88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d101      	bne.n	8000c98 <HAL_HCD_HC_Init+0x28>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e07f      	b.n	8000d98 <HAL_HCD_HC_Init+0x128>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000ca0:	78fa      	ldrb	r2, [r7, #3]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	333d      	adds	r3, #61	; 0x3d
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cb4:	78fa      	ldrb	r2, [r7, #3]
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3338      	adds	r3, #56	; 0x38
 8000cc4:	787a      	ldrb	r2, [r7, #1]
 8000cc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000cc8:	78fa      	ldrb	r2, [r7, #3]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3340      	adds	r3, #64	; 0x40
 8000cd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cda:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cdc:	78fa      	ldrb	r2, [r7, #3]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	3339      	adds	r3, #57	; 0x39
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cf0:	78fa      	ldrb	r2, [r7, #3]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	333f      	adds	r3, #63	; 0x3f
 8000d00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	78bb      	ldrb	r3, [r7, #2]
 8000d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	333a      	adds	r3, #58	; 0x3a
 8000d1e:	4602      	mov	r2, r0
 8000d20:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da0a      	bge.n	8000d40 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	440b      	add	r3, r1
 8000d38:	333b      	adds	r3, #59	; 0x3b
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e009      	b.n	8000d54 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	333b      	adds	r3, #59	; 0x3b
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	333c      	adds	r3, #60	; 0x3c
 8000d64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d68:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	787c      	ldrb	r4, [r7, #1]
 8000d70:	78ba      	ldrb	r2, [r7, #2]
 8000d72:	78f9      	ldrb	r1, [r7, #3]
 8000d74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d76:	9302      	str	r3, [sp, #8]
 8000d78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4623      	mov	r3, r4
 8000d86:	f003 ff9b 	bl	8004cc0 <USB_HC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_HCD_HC_Halt+0x1e>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e00f      	b.n	8000dde <HAL_HCD_HC_Halt+0x3e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 f9d5 	bl	800517e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	4608      	mov	r0, r1
 8000df2:	4611      	mov	r1, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	4603      	mov	r3, r0
 8000df8:	70fb      	strb	r3, [r7, #3]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	70bb      	strb	r3, [r7, #2]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	333b      	adds	r3, #59	; 0x3b
 8000e12:	78ba      	ldrb	r2, [r7, #2]
 8000e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e16:	78fa      	ldrb	r2, [r7, #3]
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	333f      	adds	r3, #63	; 0x3f
 8000e26:	787a      	ldrb	r2, [r7, #1]
 8000e28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e2a:	7c3b      	ldrb	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10a      	bne.n	8000e46 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3342      	adds	r3, #66	; 0x42
 8000e40:	2203      	movs	r2, #3
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e009      	b.n	8000e5a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3342      	adds	r3, #66	; 0x42
 8000e56:	2202      	movs	r2, #2
 8000e58:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e5a:	787b      	ldrb	r3, [r7, #1]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	f200 80d6 	bhi.w	800100e <HAL_HCD_HC_SubmitRequest+0x226>
 8000e62:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e68:	08000e79 	.word	0x08000e79
 8000e6c:	08000ff9 	.word	0x08000ff9
 8000e70:	08000ee5 	.word	0x08000ee5
 8000e74:	08000f6f 	.word	0x08000f6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e78:	7c3b      	ldrb	r3, [r7, #16]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	f040 80c9 	bne.w	8001012 <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e80:	78bb      	ldrb	r3, [r7, #2]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 80c5 	bne.w	8001012 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e88:	8b3b      	ldrh	r3, [r7, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d109      	bne.n	8000ea2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3351      	adds	r3, #81	; 0x51
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3351      	adds	r3, #81	; 0x51
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10a      	bne.n	8000ece <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	440b      	add	r3, r1
 8000ec6:	3342      	adds	r3, #66	; 0x42
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000ecc:	e0a1      	b.n	8001012 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ece:	78fa      	ldrb	r2, [r7, #3]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	3342      	adds	r3, #66	; 0x42
 8000ede:	2202      	movs	r2, #2
 8000ee0:	701a      	strb	r2, [r3, #0]
      break;
 8000ee2:	e096      	b.n	8001012 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000ee4:	78bb      	ldrb	r3, [r7, #2]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d120      	bne.n	8000f2c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000eea:	78fa      	ldrb	r2, [r7, #3]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3351      	adds	r3, #81	; 0x51
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10a      	bne.n	8000f16 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3342      	adds	r3, #66	; 0x42
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f14:	e07e      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3342      	adds	r3, #66	; 0x42
 8000f26:	2202      	movs	r2, #2
 8000f28:	701a      	strb	r2, [r3, #0]
      break;
 8000f2a:	e073      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3350      	adds	r3, #80	; 0x50
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10a      	bne.n	8000f58 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3342      	adds	r3, #66	; 0x42
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
      break;
 8000f56:	e05d      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f58:	78fa      	ldrb	r2, [r7, #3]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	440b      	add	r3, r1
 8000f66:	3342      	adds	r3, #66	; 0x42
 8000f68:	2202      	movs	r2, #2
 8000f6a:	701a      	strb	r2, [r3, #0]
      break;
 8000f6c:	e052      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f6e:	78bb      	ldrb	r3, [r7, #2]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d120      	bne.n	8000fb6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3351      	adds	r3, #81	; 0x51
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10a      	bne.n	8000fa0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3342      	adds	r3, #66	; 0x42
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f9e:	e039      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3342      	adds	r3, #66	; 0x42
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	701a      	strb	r2, [r3, #0]
      break;
 8000fb4:	e02e      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3350      	adds	r3, #80	; 0x50
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10a      	bne.n	8000fe2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3342      	adds	r3, #66	; 0x42
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
      break;
 8000fe0:	e018      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3342      	adds	r3, #66	; 0x42
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	701a      	strb	r2, [r3, #0]
      break;
 8000ff6:	e00d      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	3342      	adds	r3, #66	; 0x42
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
      break;
 800100c:	e002      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001012:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3344      	adds	r3, #68	; 0x44
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001028:	78fa      	ldrb	r2, [r7, #3]
 800102a:	8b39      	ldrh	r1, [r7, #24]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4403      	add	r3, r0
 8001038:	3348      	adds	r3, #72	; 0x48
 800103a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	335c      	adds	r3, #92	; 0x5c
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	334c      	adds	r3, #76	; 0x4c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001064:	78fa      	ldrb	r2, [r7, #3]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	3339      	adds	r3, #57	; 0x39
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	335d      	adds	r3, #93	; 0x5d
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	3338      	adds	r3, #56	; 0x38
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	18d1      	adds	r1, r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	f003 ff14 	bl	8004ed4 <USB_HC_StartXfer>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop

080010b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 fc31 	bl	8004936 <USB_GetMode>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	f040 80f1 	bne.w	80012be <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fc15 	bl	8004910 <USB_ReadInterrupts>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80e7 	beq.w	80012bc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fc0c 	bl	8004910 <USB_ReadInterrupts>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001102:	d104      	bne.n	800110e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800110c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fbfc 	bl	8004910 <USB_ReadInterrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001122:	d104      	bne.n	800112e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800112c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fbec 	bl	8004910 <USB_ReadInterrupts>
 8001138:	4603      	mov	r3, r0
 800113a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800113e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001142:	d104      	bne.n	800114e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800114c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fbdc 	bl	8004910 <USB_ReadInterrupts>
 8001158:	4603      	mov	r3, r0
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b02      	cmp	r3, #2
 8001160:	d103      	bne.n	800116a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2202      	movs	r2, #2
 8001168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fbce 	bl	8004910 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800117a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800117e:	d117      	bne.n	80011b0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800118e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001192:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f006 fd71 	bl	8007c7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fcc7 	bl	8004b34 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fbab 	bl	8004910 <USB_ReadInterrupts>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c4:	d102      	bne.n	80011cc <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f8c8 	bl	800235c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fb9d 	bl	8004910 <USB_ReadInterrupts>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d106      	bne.n	80011ee <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f006 fd2f 	bl	8007c44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2208      	movs	r2, #8
 80011ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fb8c 	bl	8004910 <USB_ReadInterrupts>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001202:	d138      	bne.n	8001276 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f003 ffa7 	bl	800515c <USB_HC_ReadInterrupt>
 800120e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e025      	b.n	8001262 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	fa22 f303 	lsr.w	r3, r2, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d018      	beq.n	800125c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	015a      	lsls	r2, r3, #5
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4413      	add	r3, r2
 8001232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800123c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001240:	d106      	bne.n	8001250 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f8cf 	bl	80013ec <HCD_HC_IN_IRQHandler>
 800124e:	e005      	b.n	800125c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fc5f 	bl	8001b1a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3d4      	bcc.n	8001216 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fb48 	bl	8004910 <USB_ReadInterrupts>
 8001280:	4603      	mov	r3, r0
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b10      	cmp	r3, #16
 8001288:	d101      	bne.n	800128e <HAL_HCD_IRQHandler+0x1d6>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_HCD_IRQHandler+0x1d8>
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d014      	beq.n	80012be <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0210 	bic.w	r2, r2, #16
 80012a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 ffad 	bl	8002204 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0210 	orr.w	r2, r2, #16
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	e000      	b.n	80012be <HAL_HCD_IRQHandler+0x206>
      return;
 80012bc:	bf00      	nop
    }
  }
}
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_HCD_Start+0x16>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e013      	b.n	8001302 <HAL_HCD_Start+0x3e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fa1f 	bl	800472a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fc82 	bl	8004bfc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_HCD_Stop+0x16>
 800131c:	2302      	movs	r3, #2
 800131e:	e00d      	b.n	800133c <HAL_HCD_Stop+0x32>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 f861 	bl	80053f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fc29 	bl	8004ba8 <USB_ResetPort>
 8001356:	4603      	mov	r3, r0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	335c      	adds	r3, #92	; 0x5c
 800137c:	781b      	ldrb	r3, [r3, #0]
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001396:	78fa      	ldrb	r2, [r7, #3]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	334c      	adds	r3, #76	; 0x4c
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fc6b 	bl	8004c9c <USB_GetCurrentFrame>
 80013c6:	4603      	mov	r3, r0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fc46 	bl	8004c6e <USB_GetHostSpeed>
 80013e2:	4603      	mov	r3, r0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4413      	add	r3, r2
 800140e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b04      	cmp	r3, #4
 800141a:	d119      	bne.n	8001450 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4413      	add	r3, r2
 8001424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001428:	461a      	mov	r2, r3
 800142a:	2304      	movs	r3, #4
 800142c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4413      	add	r3, r2
 8001436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	0151      	lsls	r1, r2, #5
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	440a      	add	r2, r1
 8001444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	60d3      	str	r3, [r2, #12]
 800144e:	e095      	b.n	800157c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	015a      	lsls	r2, r3, #5
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4413      	add	r3, r2
 8001458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b20      	cmp	r3, #32
 8001464:	d109      	bne.n	800147a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	015a      	lsls	r2, r3, #5
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4413      	add	r3, r2
 800146e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001472:	461a      	mov	r2, r3
 8001474:	2320      	movs	r3, #32
 8001476:	6093      	str	r3, [r2, #8]
 8001478:	e080      	b.n	800157c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4413      	add	r3, r2
 8001482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b08      	cmp	r3, #8
 800148e:	d134      	bne.n	80014fa <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	015a      	lsls	r2, r3, #5
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4413      	add	r3, r2
 8001498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	0151      	lsls	r1, r2, #5
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	440a      	add	r2, r1
 80014a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	335d      	adds	r3, #93	; 0x5d
 80014c0:	2205      	movs	r2, #5
 80014c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d0:	461a      	mov	r2, r3
 80014d2:	2310      	movs	r3, #16
 80014d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	461a      	mov	r2, r3
 80014e4:	2308      	movs	r3, #8
 80014e6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fe43 	bl	800517e <USB_HC_Halt>
 80014f8:	e040      	b.n	800157c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4413      	add	r3, r2
 8001502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001510:	d134      	bne.n	800157c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4413      	add	r3, r2
 800151a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	0151      	lsls	r1, r2, #5
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	440a      	add	r2, r1
 8001528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fe1e 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4413      	add	r3, r2
 800154a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154e:	461a      	mov	r2, r3
 8001550:	2310      	movs	r3, #16
 8001552:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	335d      	adds	r3, #93	; 0x5d
 8001564:	2208      	movs	r2, #8
 8001566:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4413      	add	r3, r2
 8001570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001574:	461a      	mov	r2, r3
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001592:	d122      	bne.n	80015da <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4413      	add	r3, r2
 800159c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	0151      	lsls	r1, r2, #5
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	440a      	add	r2, r1
 80015aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fddd 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d0:	461a      	mov	r2, r3
 80015d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015d8:	e29b      	b.n	8001b12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	f040 80c1 	bne.w	8001774 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01b      	beq.n	8001632 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	3348      	adds	r3, #72	; 0x48
 800160a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	0159      	lsls	r1, r3, #5
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	440b      	add	r3, r1
 8001614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800161e:	1ad1      	subs	r1, r2, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4403      	add	r3, r0
 800162e:	334c      	adds	r3, #76	; 0x4c
 8001630:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	335d      	adds	r3, #93	; 0x5d
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	3358      	adds	r3, #88	; 0x58
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4413      	add	r3, r2
 8001662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001666:	461a      	mov	r2, r3
 8001668:	2301      	movs	r3, #1
 800166a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	333f      	adds	r3, #63	; 0x3f
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	333f      	adds	r3, #63	; 0x3f
 8001692:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001694:	2b02      	cmp	r3, #2
 8001696:	d121      	bne.n	80016dc <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	015a      	lsls	r2, r3, #5
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4413      	add	r3, r2
 80016a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	0151      	lsls	r1, r2, #5
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	440a      	add	r2, r1
 80016ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fd5b 	bl	800517e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d4:	461a      	mov	r2, r3
 80016d6:	2310      	movs	r3, #16
 80016d8:	6093      	str	r3, [r2, #8]
 80016da:	e034      	b.n	8001746 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	333f      	adds	r3, #63	; 0x3f
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d129      	bne.n	8001746 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	0151      	lsls	r1, r2, #5
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	440a      	add	r2, r1
 8001708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800170c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001710:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	335c      	adds	r3, #92	; 0x5c
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	b2d8      	uxtb	r0, r3
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	335c      	adds	r3, #92	; 0x5c
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4601      	mov	r1, r0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f006 faa9 	bl	8007c98 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	3350      	adds	r3, #80	; 0x50
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	f083 0301 	eor.w	r3, r3, #1
 800175c:	b2d8      	uxtb	r0, r3
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	3350      	adds	r3, #80	; 0x50
 800176e:	4602      	mov	r2, r0
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	e1ce      	b.n	8001b12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4413      	add	r3, r2
 800177c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	f040 80f1 	bne.w	800196e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4413      	add	r3, r2
 8001794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	0151      	lsls	r1, r2, #5
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	440a      	add	r2, r1
 80017a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017a6:	f023 0302 	bic.w	r3, r3, #2
 80017aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	335d      	adds	r3, #93	; 0x5d
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10a      	bne.n	80017d8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	335c      	adds	r3, #92	; 0x5c
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e0b0      	b.n	800193a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	335d      	adds	r3, #93	; 0x5d
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d10a      	bne.n	8001804 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	335c      	adds	r3, #92	; 0x5c
 80017fe:	2205      	movs	r2, #5
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e09a      	b.n	800193a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	335d      	adds	r3, #93	; 0x5d
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d00a      	beq.n	8001830 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	335d      	adds	r3, #93	; 0x5d
 800182a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800182c:	2b08      	cmp	r3, #8
 800182e:	d156      	bne.n	80018de <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	3358      	adds	r3, #88	; 0x58
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	1c59      	adds	r1, r3, #1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4403      	add	r3, r0
 8001852:	3358      	adds	r3, #88	; 0x58
 8001854:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3358      	adds	r3, #88	; 0x58
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d914      	bls.n	8001896 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3358      	adds	r3, #88	; 0x58
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	335c      	adds	r3, #92	; 0x5c
 8001890:	2204      	movs	r2, #4
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e009      	b.n	80018aa <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	335c      	adds	r3, #92	; 0x5c
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018c0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e02d      	b.n	800193a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	335d      	adds	r3, #93	; 0x5d
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d122      	bne.n	800193a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	335c      	adds	r3, #92	; 0x5c
 8001904:	2202      	movs	r2, #2
 8001906:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800191e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001926:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001934:	461a      	mov	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	461a      	mov	r2, r3
 8001948:	2302      	movs	r3, #2
 800194a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	b2d8      	uxtb	r0, r3
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	335c      	adds	r3, #92	; 0x5c
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	4601      	mov	r1, r0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f006 f996 	bl	8007c98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800196c:	e0d1      	b.n	8001b12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001980:	2b80      	cmp	r3, #128	; 0x80
 8001982:	d13e      	bne.n	8001a02 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	0151      	lsls	r1, r2, #5
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	440a      	add	r2, r1
 800199a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3358      	adds	r3, #88	; 0x58
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4403      	add	r3, r0
 80019c6:	3358      	adds	r3, #88	; 0x58
 80019c8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	335d      	adds	r3, #93	; 0x5d
 80019da:	2206      	movs	r2, #6
 80019dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fbc8 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fa:	461a      	mov	r2, r3
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	6093      	str	r3, [r2, #8]
}
 8001a00:	e087      	b.n	8001b12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d17c      	bne.n	8001b12 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	333f      	adds	r3, #63	; 0x3f
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d122      	bne.n	8001a74 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3358      	adds	r3, #88	; 0x58
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	0151      	lsls	r1, r2, #5
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	440a      	add	r2, r1
 8001a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fb86 	bl	800517e <USB_HC_Halt>
 8001a72:	e045      	b.n	8001b00 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	333f      	adds	r3, #63	; 0x3f
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	333f      	adds	r3, #63	; 0x3f
 8001a9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d12f      	bne.n	8001b00 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3358      	adds	r3, #88	; 0x58
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d121      	bne.n	8001b00 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	335d      	adds	r3, #93	; 0x5d
 8001acc:	2203      	movs	r2, #3
 8001ace:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	0151      	lsls	r1, r2, #5
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	440a      	add	r2, r1
 8001ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fb3f 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2310      	movs	r3, #16
 8001b10:	6093      	str	r3, [r2, #8]
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d119      	bne.n	8001b7e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	015a      	lsls	r2, r3, #5
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b56:	461a      	mov	r2, r3
 8001b58:	2304      	movs	r3, #4
 8001b5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	0151      	lsls	r1, r2, #5
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	440a      	add	r2, r1
 8001b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b7c:	e33e      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d141      	bne.n	8001c18 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	333d      	adds	r3, #61	; 0x3d
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	f040 831f 	bne.w	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	333d      	adds	r3, #61	; 0x3d
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	335c      	adds	r3, #92	; 0x5c
 8001be2:	2202      	movs	r2, #2
 8001be4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	0151      	lsls	r1, r2, #5
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	440a      	add	r2, r1
 8001bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fab4 	bl	800517e <USB_HC_Halt>
}
 8001c16:	e2f1      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d13f      	bne.n	8001cae <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	335d      	adds	r3, #93	; 0x5d
 8001c3e:	2204      	movs	r2, #4
 8001c40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	333d      	adds	r3, #61	; 0x3d
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	3358      	adds	r3, #88	; 0x58
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	0151      	lsls	r1, r2, #5
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	440a      	add	r2, r1
 8001c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fa72 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2340      	movs	r3, #64	; 0x40
 8001caa:	6093      	str	r3, [r2, #8]
}
 8001cac:	e2a6      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc4:	d122      	bne.n	8001d0c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	0151      	lsls	r1, r2, #5
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	440a      	add	r2, r1
 8001cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fa44 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d08:	6093      	str	r3, [r2, #8]
}
 8001d0a:	e277      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d135      	bne.n	8001d8e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	3358      	adds	r3, #88	; 0x58
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	0151      	lsls	r1, r2, #5
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	440a      	add	r2, r1
 8001d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fa0c 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	461a      	mov	r2, r3
 8001d74:	2301      	movs	r3, #1
 8001d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	335d      	adds	r3, #93	; 0x5d
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
}
 8001d8c:	e236      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d12b      	bne.n	8001dfc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	2308      	movs	r3, #8
 8001db4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	0151      	lsls	r1, r2, #5
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	440a      	add	r2, r1
 8001dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 f9cc 	bl	800517e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	335d      	adds	r3, #93	; 0x5d
 8001df6:	2205      	movs	r2, #5
 8001df8:	701a      	strb	r2, [r3, #0]
}
 8001dfa:	e1ff      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d155      	bne.n	8001ebe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	3358      	adds	r3, #88	; 0x58
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	335d      	adds	r3, #93	; 0x5d
 8001e36:	2203      	movs	r2, #3
 8001e38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	333d      	adds	r3, #61	; 0x3d
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d114      	bne.n	8001e7a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	333c      	adds	r3, #60	; 0x3c
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	333d      	adds	r3, #61	; 0x3d
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	0151      	lsls	r1, r2, #5
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	440a      	add	r2, r1
 8001e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 f96a 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2310      	movs	r3, #16
 8001eba:	6093      	str	r3, [r2, #8]
}
 8001ebc:	e19e      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	2b80      	cmp	r3, #128	; 0x80
 8001ed2:	d12b      	bne.n	8001f2c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	0151      	lsls	r1, r2, #5
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	440a      	add	r2, r1
 8001eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f93d 	bl	800517e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	335d      	adds	r3, #93	; 0x5d
 8001f14:	2206      	movs	r2, #6
 8001f16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	6093      	str	r3, [r2, #8]
}
 8001f2a:	e167      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f42:	d135      	bne.n	8001fb0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	0151      	lsls	r1, r2, #5
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	440a      	add	r2, r1
 8001f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f905 	bl	800517e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	2310      	movs	r3, #16
 8001f84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	335d      	adds	r3, #93	; 0x5d
 8001faa:	2208      	movs	r2, #8
 8001fac:	701a      	strb	r2, [r3, #0]
}
 8001fae:	e125      	b.n	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	f040 811a 	bne.w	80021fc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	0151      	lsls	r1, r2, #5
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	440a      	add	r2, r1
 8001fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe2:	f023 0302 	bic.w	r3, r3, #2
 8001fe6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	335d      	adds	r3, #93	; 0x5d
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d137      	bne.n	800206e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	335c      	adds	r3, #92	; 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	333f      	adds	r3, #63	; 0x3f
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d00b      	beq.n	8002040 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	333f      	adds	r3, #63	; 0x3f
 8002038:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800203a:	2b03      	cmp	r3, #3
 800203c:	f040 80c5 	bne.w	80021ca <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	3351      	adds	r3, #81	; 0x51
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2d8      	uxtb	r0, r3
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	3351      	adds	r3, #81	; 0x51
 8002068:	4602      	mov	r2, r0
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e0ad      	b.n	80021ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	335d      	adds	r3, #93	; 0x5d
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d10a      	bne.n	800209a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	335c      	adds	r3, #92	; 0x5c
 8002094:	2202      	movs	r2, #2
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e097      	b.n	80021ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	335d      	adds	r3, #93	; 0x5d
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d10a      	bne.n	80020c6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	335c      	adds	r3, #92	; 0x5c
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e081      	b.n	80021ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	335d      	adds	r3, #93	; 0x5d
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d10a      	bne.n	80020f2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	335c      	adds	r3, #92	; 0x5c
 80020ec:	2205      	movs	r2, #5
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e06b      	b.n	80021ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	335d      	adds	r3, #93	; 0x5d
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b06      	cmp	r3, #6
 8002106:	d00a      	beq.n	800211e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	335d      	adds	r3, #93	; 0x5d
 8002118:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211a:	2b08      	cmp	r3, #8
 800211c:	d155      	bne.n	80021ca <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	3358      	adds	r3, #88	; 0x58
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1c59      	adds	r1, r3, #1
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4403      	add	r3, r0
 8002140:	3358      	adds	r3, #88	; 0x58
 8002142:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	3358      	adds	r3, #88	; 0x58
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d914      	bls.n	8002184 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	3358      	adds	r3, #88	; 0x58
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335c      	adds	r3, #92	; 0x5c
 800217e:	2204      	movs	r2, #4
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e009      	b.n	8002198 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	335c      	adds	r3, #92	; 0x5c
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2302      	movs	r3, #2
 80021da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	335c      	adds	r3, #92	; 0x5c
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4601      	mov	r1, r0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f005 fd4e 	bl	8007c98 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	0c5b      	lsrs	r3, r3, #17
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002238:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d003      	beq.n	8002248 <HCD_RXQLVL_IRQHandler+0x44>
 8002240:	2b05      	cmp	r3, #5
 8002242:	f000 8082 	beq.w	800234a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002246:	e083      	b.n	8002350 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d07f      	beq.n	800234e <HCD_RXQLVL_IRQHandler+0x14a>
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	3344      	adds	r3, #68	; 0x44
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d074      	beq.n	800234e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3344      	adds	r3, #68	; 0x44
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	b292      	uxth	r2, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f002 fb1d 	bl	80048be <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3344      	adds	r3, #68	; 0x44
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	18d1      	adds	r1, r2, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4403      	add	r3, r0
 80022a8:	3344      	adds	r3, #68	; 0x44
 80022aa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	; 0x4c
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	18d1      	adds	r1, r2, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4403      	add	r3, r0
 80022d0:	334c      	adds	r3, #76	; 0x4c
 80022d2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HCD_RXQLVL_IRQHandler+0x154>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d031      	beq.n	800234e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002300:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002308:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3350      	adds	r3, #80	; 0x50
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2d8      	uxtb	r0, r3
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	440b      	add	r3, r1
 8002342:	3350      	adds	r3, #80	; 0x50
 8002344:	4602      	mov	r2, r0
 8002346:	701a      	strb	r2, [r3, #0]
      break;
 8002348:	e001      	b.n	800234e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800234a:	bf00      	nop
 800234c:	e000      	b.n	8002350 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800234e:	bf00      	nop
  }
}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	1ff80000 	.word	0x1ff80000

0800235c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002388:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d113      	bne.n	80023bc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d10a      	bne.n	80023b4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023ac:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f005 fc56 	bl	8007c60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d147      	bne.n	8002456 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d129      	bne.n	800242c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d113      	bne.n	8002408 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80023e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ea:	d106      	bne.n	80023fa <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2102      	movs	r1, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fb9e 	bl	8004b34 <USB_InitFSLSPClkSel>
 80023f8:	e011      	b.n	800241e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2101      	movs	r1, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fb97 	bl	8004b34 <USB_InitFSLSPClkSel>
 8002406:	e00a      	b.n	800241e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002416:	461a      	mov	r2, r3
 8002418:	f64e 2360 	movw	r3, #60000	; 0xea60
 800241c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f005 fc48 	bl	8007cb4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f005 fc1b 	bl	8007c60 <HAL_HCD_Connect_Callback>
 800242a:	e014      	b.n	8002456 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f005 fc4f 	bl	8007cd0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002440:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002444:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699a      	ldr	r2, [r3, #24]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002454:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d103      	bne.n	8002468 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e10f      	b.n	80026ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f005 f918 	bl	80076d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024c0:	f001 f9ac 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	; (80026b8 <HAL_I2C_Init+0x23c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d807      	bhi.n	80024e0 <HAL_I2C_Init+0x64>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7a      	ldr	r2, [pc, #488]	; (80026bc <HAL_I2C_Init+0x240>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e006      	b.n	80024ee <HAL_I2C_Init+0x72>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_I2C_Init+0x244>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0db      	b.n	80026ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a72      	ldr	r2, [pc, #456]	; (80026c4 <HAL_I2C_Init+0x248>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0c9b      	lsrs	r3, r3, #18
 8002500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a64      	ldr	r2, [pc, #400]	; (80026b8 <HAL_I2C_Init+0x23c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d802      	bhi.n	8002530 <HAL_I2C_Init+0xb4>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3301      	adds	r3, #1
 800252e:	e009      	b.n	8002544 <HAL_I2C_Init+0xc8>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_I2C_Init+0x24c>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	3301      	adds	r3, #1
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4956      	ldr	r1, [pc, #344]	; (80026b8 <HAL_I2C_Init+0x23c>)
 8002560:	428b      	cmp	r3, r1
 8002562:	d80d      	bhi.n	8002580 <HAL_I2C_Init+0x104>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1e59      	subs	r1, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b04      	cmp	r3, #4
 800257a:	bf38      	it	cc
 800257c:	2304      	movcc	r3, #4
 800257e:	e04f      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <HAL_I2C_Init+0x130>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e012      	b.n	80025d2 <HAL_I2C_Init+0x156>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x15e>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Init+0x184>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6911      	ldr	r1, [r2, #16]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	000186a0 	.word	0x000186a0
 80026bc:	001e847f 	.word	0x001e847f
 80026c0:	003d08ff 	.word	0x003d08ff
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e128      	b.n	8002930 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a90      	ldr	r2, [pc, #576]	; (8002938 <HAL_I2S_Init+0x26c>)
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f005 f835 	bl	8007768 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002714:	f023 030f 	bic.w	r3, r3, #15
 8002718:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2202      	movs	r2, #2
 8002720:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d060      	beq.n	80027ec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002732:	2310      	movs	r3, #16
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e001      	b.n	800273c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b20      	cmp	r3, #32
 8002742:	d802      	bhi.n	800274a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800274a:	2001      	movs	r0, #1
 800274c:	f001 f95c 	bl	8003a08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002750:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275a:	d125      	bne.n	80027a8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	fbb2 f2f3 	udiv	r2, r2, r3
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	3305      	adds	r3, #5
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e01f      	b.n	80027c6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	3305      	adds	r3, #5
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	e00e      	b.n	80027c6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	3305      	adds	r3, #5
 80027c4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4a5c      	ldr	r2, [pc, #368]	; (800293c <HAL_I2S_Init+0x270>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	08db      	lsrs	r3, r3, #3
 80027d0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	e003      	b.n	80027f4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80027ec:	2302      	movs	r3, #2
 80027ee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d902      	bls.n	8002800 <HAL_I2S_Init+0x134>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2bff      	cmp	r3, #255	; 0xff
 80027fe:	d907      	bls.n	8002810 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f043 0210 	orr.w	r2, r3, #16
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e08f      	b.n	8002930 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	ea42 0103 	orr.w	r1, r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	430a      	orrs	r2, r1
 8002822:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800282e:	f023 030f 	bic.w	r3, r3, #15
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6851      	ldr	r1, [r2, #4]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6892      	ldr	r2, [r2, #8]
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68d2      	ldr	r2, [r2, #12]
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6992      	ldr	r2, [r2, #24]
 8002846:	430a      	orrs	r2, r1
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002852:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d161      	bne.n	8002920 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a38      	ldr	r2, [pc, #224]	; (8002940 <HAL_I2S_Init+0x274>)
 8002860:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a37      	ldr	r2, [pc, #220]	; (8002944 <HAL_I2S_Init+0x278>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_I2S_Init+0x1a4>
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_I2S_Init+0x27c>)
 800286e:	e001      	b.n	8002874 <HAL_I2S_Init+0x1a8>
 8002870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4932      	ldr	r1, [pc, #200]	; (8002944 <HAL_I2S_Init+0x278>)
 800287c:	428a      	cmp	r2, r1
 800287e:	d101      	bne.n	8002884 <HAL_I2S_Init+0x1b8>
 8002880:	4a31      	ldr	r2, [pc, #196]	; (8002948 <HAL_I2S_Init+0x27c>)
 8002882:	e001      	b.n	8002888 <HAL_I2S_Init+0x1bc>
 8002884:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002888:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800288c:	f023 030f 	bic.w	r3, r3, #15
 8002890:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <HAL_I2S_Init+0x278>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_I2S_Init+0x1d4>
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_I2S_Init+0x27c>)
 800289e:	e001      	b.n	80028a4 <HAL_I2S_Init+0x1d8>
 80028a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a4:	2202      	movs	r2, #2
 80028a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <HAL_I2S_Init+0x278>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_I2S_Init+0x1ea>
 80028b2:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_I2S_Init+0x27c>)
 80028b4:	e001      	b.n	80028ba <HAL_I2S_Init+0x1ee>
 80028b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c6:	d003      	beq.n	80028d0 <HAL_I2S_Init+0x204>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d103      	bne.n	80028d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80028d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e001      	b.n	80028dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	b299      	uxth	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028f2:	4303      	orrs	r3, r0
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	430b      	orrs	r3, r1
 80028f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	4313      	orrs	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002908:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_I2S_Init+0x278>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_I2S_Init+0x24c>
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_I2S_Init+0x27c>)
 8002916:	e001      	b.n	800291c <HAL_I2S_Init+0x250>
 8002918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291c:	897a      	ldrh	r2, [r7, #10]
 800291e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	08002a43 	.word	0x08002a43
 800293c:	cccccccd 	.word	0xcccccccd
 8002940:	08002b59 	.word	0x08002b59
 8002944:	40003800 	.word	0x40003800
 8002948:	40003400 	.word	0x40003400

0800294c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ffb8 	bl	800294c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	b292      	uxth	r2, r2
 80029f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10e      	bne.n	8002a3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff93 	bl	8002960 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d13a      	bne.n	8002ad4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d109      	bne.n	8002a7c <I2S_IRQHandler+0x3a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d102      	bne.n	8002a7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ffb4 	bl	80029e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d126      	bne.n	8002ad4 <I2S_IRQHandler+0x92>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d11f      	bne.n	8002ad4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aa2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff50 	bl	8002974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d136      	bne.n	8002b4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d109      	bne.n	8002afe <I2S_IRQHandler+0xbc>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d102      	bne.n	8002afe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff45 	bl	8002988 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d122      	bne.n	8002b4e <I2S_IRQHandler+0x10c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d11b      	bne.n	8002b4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f043 0204 	orr.w	r2, r3, #4
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff13 	bl	8002974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4aa2      	ldr	r2, [pc, #648]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b72:	4ba2      	ldr	r3, [pc, #648]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b74:	e001      	b.n	8002b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a9b      	ldr	r2, [pc, #620]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b90:	4b9a      	ldr	r3, [pc, #616]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b92:	e001      	b.n	8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba4:	d004      	beq.n	8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 8099 	bne.w	8002ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d107      	bne.n	8002bca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f925 	bl	8002e14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9c8 	bl	8002f74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d13a      	bne.n	8002c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d035      	beq.n	8002c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a7e      	ldr	r2, [pc, #504]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c02:	4b7e      	ldr	r3, [pc, #504]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c04:	e001      	b.n	8002c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4979      	ldr	r1, [pc, #484]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c12:	428b      	cmp	r3, r1
 8002c14:	d101      	bne.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c16:	4b79      	ldr	r3, [pc, #484]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c18:	e001      	b.n	8002c1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0202 	orr.w	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff fe88 	bl	8002974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	f040 80be 	bne.w	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80b8 	beq.w	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a59      	ldr	r2, [pc, #356]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c96:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c98:	e001      	b.n	8002c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4954      	ldr	r1, [pc, #336]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ca6:	428b      	cmp	r3, r1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002caa:	4b54      	ldr	r3, [pc, #336]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cac:	e001      	b.n	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fe4a 	bl	8002974 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ce0:	e084      	b.n	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d107      	bne.n	8002cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f8be 	bl	8002e78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f8fd 	bl	8002f10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d12f      	bne.n	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02a      	beq.n	8002d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d46:	e001      	b.n	8002d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4929      	ldr	r1, [pc, #164]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d101      	bne.n	8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d58:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d5a:	e001      	b.n	8002d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0202 	orr.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fdfa 	bl	8002974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d131      	bne.n	8002dee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02c      	beq.n	8002dee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002da0:	e001      	b.n	8002da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4912      	ldr	r1, [pc, #72]	; (8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dae:	428b      	cmp	r3, r1
 8002db0:	d101      	bne.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002db4:	e001      	b.n	8002dba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0204 	orr.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff fdc5 	bl	8002974 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dea:	e000      	b.n	8002dee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dec:	bf00      	nop
}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40003800 	.word	0x40003800
 8002dfc:	40003400 	.word	0x40003400

08002e00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c99      	adds	r1, r3, #2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6251      	str	r1, [r2, #36]	; 0x24
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d113      	bne.n	8002e6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ffc9 	bl	8002e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	1c99      	adds	r1, r3, #2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6251      	str	r1, [r2, #36]	; 0x24
 8002e8a:	8819      	ldrh	r1, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <I2SEx_TxISR_I2SExt+0x90>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <I2SEx_TxISR_I2SExt+0x22>
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <I2SEx_TxISR_I2SExt+0x94>)
 8002e98:	e001      	b.n	8002e9e <I2SEx_TxISR_I2SExt+0x26>
 8002e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d121      	bne.n	8002efe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <I2SEx_TxISR_I2SExt+0x90>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <I2SEx_TxISR_I2SExt+0x50>
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <I2SEx_TxISR_I2SExt+0x94>)
 8002ec6:	e001      	b.n	8002ecc <I2SEx_TxISR_I2SExt+0x54>
 8002ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	490d      	ldr	r1, [pc, #52]	; (8002f08 <I2SEx_TxISR_I2SExt+0x90>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d101      	bne.n	8002edc <I2SEx_TxISR_I2SExt+0x64>
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <I2SEx_TxISR_I2SExt+0x94>)
 8002eda:	e001      	b.n	8002ee0 <I2SEx_TxISR_I2SExt+0x68>
 8002edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ee4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff81 	bl	8002e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40003800 	.word	0x40003800
 8002f0c:	40003400 	.word	0x40003400

08002f10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68d8      	ldr	r0, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	1c99      	adds	r1, r3, #2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f28:	b282      	uxth	r2, r0
 8002f2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d113      	bne.n	8002f6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff4a 	bl	8002e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <I2SEx_RxISR_I2SExt+0x90>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <I2SEx_RxISR_I2SExt+0x16>
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <I2SEx_RxISR_I2SExt+0x94>)
 8002f88:	e001      	b.n	8002f8e <I2SEx_RxISR_I2SExt+0x1a>
 8002f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f8e:	68d8      	ldr	r0, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	1c99      	adds	r1, r3, #2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f9a:	b282      	uxth	r2, r0
 8002f9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d121      	bne.n	8002ffa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <I2SEx_RxISR_I2SExt+0x90>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d101      	bne.n	8002fc4 <I2SEx_RxISR_I2SExt+0x50>
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <I2SEx_RxISR_I2SExt+0x94>)
 8002fc2:	e001      	b.n	8002fc8 <I2SEx_RxISR_I2SExt+0x54>
 8002fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	490d      	ldr	r1, [pc, #52]	; (8003004 <I2SEx_RxISR_I2SExt+0x90>)
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	d101      	bne.n	8002fd8 <I2SEx_RxISR_I2SExt+0x64>
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <I2SEx_RxISR_I2SExt+0x94>)
 8002fd6:	e001      	b.n	8002fdc <I2SEx_RxISR_I2SExt+0x68>
 8002fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fe0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff03 	bl	8002e00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40003800 	.word	0x40003800
 8003008:	40003400 	.word	0x40003400

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e22d      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4ba3      	ldr	r3, [pc, #652]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4ba0      	ldr	r3, [pc, #640]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b9d      	ldr	r3, [pc, #628]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b99      	ldr	r3, [pc, #612]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e208      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b91      	ldr	r3, [pc, #580]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a90      	ldr	r2, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a87      	ldr	r2, [pc, #540]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b84      	ldr	r3, [pc, #528]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a83      	ldr	r2, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a80      	ldr	r2, [pc, #512]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fd fa66 	bl	8000594 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd fa62 	bl	8000594 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1cd      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd fa52 	bl	8000594 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd fa4e 	bl	8000594 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1b9      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e18d      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b56      	ldr	r3, [pc, #344]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4952      	ldr	r1, [pc, #328]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd fa07 	bl	8000594 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fd fa03 	bl	8000594 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e16e      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4940      	ldr	r1, [pc, #256]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd f9e6 	bl	8000594 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fd f9e2 	bl	8000594 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e14d      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d030      	beq.n	8003258 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd f9c6 	bl	8000594 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fd f9c2 	bl	8000594 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e12d      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e015      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fd f9af 	bl	8000594 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fd f9ab 	bl	8000594 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e116      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a0 	beq.w	80033a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fd f971 	bl	8000594 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e011      	b.n	80032da <HAL_RCC_OscConfig+0x2ce>
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	42470000 	.word	0x42470000
 80032c0:	42470e80 	.word	0x42470e80
 80032c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd f964 	bl	8000594 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0cf      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x2f0>
 80032ee:	4b66      	ldr	r3, [pc, #408]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	e01c      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x312>
 8003304:	4b60      	ldr	r3, [pc, #384]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a5f      	ldr	r2, [pc, #380]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	4b5d      	ldr	r3, [pc, #372]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a5c      	ldr	r2, [pc, #368]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 800331e:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a59      	ldr	r2, [pc, #356]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b57      	ldr	r3, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a56      	ldr	r2, [pc, #344]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fd f929 	bl	8000594 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd f925 	bl	8000594 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e08e      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RCC_OscConfig+0x33a>
 8003368:	e014      	b.n	8003394 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fd f913 	bl	8000594 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd f90f 	bl	8000594 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e078      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d064      	beq.n	8003478 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ae:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d05c      	beq.n	8003474 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d141      	bne.n	8003446 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_RCC_OscConfig+0x480>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd f8e4 	bl	8000594 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd f8e0 	bl	8000594 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e04b      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	3b01      	subs	r3, #1
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	491d      	ldr	r1, [pc, #116]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_RCC_OscConfig+0x480>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fd f8b9 	bl	8000594 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fd f8b5 	bl	8000594 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e020      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x41a>
 8003444:	e018      	b.n	8003478 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_RCC_OscConfig+0x480>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fd f8a2 	bl	8000594 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd f89e 	bl	8000594 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e009      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCC_OscConfig+0x47c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x448>
 8003472:	e001      	b.n	8003478 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40007000 	.word	0x40007000
 8003488:	40023800 	.word	0x40023800
 800348c:	42470060 	.word	0x42470060

08003490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0ca      	b.n	800363a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b67      	ldr	r3, [pc, #412]	; (8003644 <HAL_RCC_ClockConfig+0x1b4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d90c      	bls.n	80034cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b64      	ldr	r3, [pc, #400]	; (8003644 <HAL_RCC_ClockConfig+0x1b4>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b62      	ldr	r3, [pc, #392]	; (8003644 <HAL_RCC_ClockConfig+0x1b4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0b6      	b.n	800363a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e4:	4b58      	ldr	r3, [pc, #352]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a57      	ldr	r2, [pc, #348]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034fc:	4b52      	ldr	r3, [pc, #328]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a51      	ldr	r2, [pc, #324]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b4f      	ldr	r3, [pc, #316]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	494c      	ldr	r1, [pc, #304]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d044      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d119      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07d      	b.n	800363a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d003      	beq.n	800354e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	2b03      	cmp	r3, #3
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e06d      	b.n	800363a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e065      	b.n	800363a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 0203 	bic.w	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4933      	ldr	r1, [pc, #204]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003580:	f7fd f808 	bl	8000594 <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	e00a      	b.n	800359e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003588:	f7fd f804 	bl	8000594 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04d      	b.n	800363a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 020c 	and.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d1eb      	bne.n	8003588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b0:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCC_ClockConfig+0x1b4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d20c      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_RCC_ClockConfig+0x1b4>)
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <HAL_RCC_ClockConfig+0x1b4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e030      	b.n	800363a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4915      	ldr	r1, [pc, #84]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490d      	ldr	r1, [pc, #52]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003616:	f000 f81d 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 800361a:	4601      	mov	r1, r0
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	fa21 f303 	lsr.w	r3, r1, r3
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003632:	2000      	movs	r0, #0
 8003634:	f7fc ff6a 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00
 8003648:	40023800 	.word	0x40023800
 800364c:	0800833c 	.word	0x0800833c
 8003650:	20000028 	.word	0x20000028

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	2300      	movs	r3, #0
 8003664:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d007      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x32>
 8003676:	2b08      	cmp	r3, #8
 8003678:	d008      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x38>
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 80b4 	bne.w	80037e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003682:	60bb      	str	r3, [r7, #8]
       break;
 8003684:	e0b3      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003686:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003688:	60bb      	str	r3, [r7, #8]
      break;
 800368a:	e0b0      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800368c:	4b5a      	ldr	r3, [pc, #360]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003694:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003696:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d04a      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	f04f 0400 	mov.w	r4, #0
 80036ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	ea03 0501 	and.w	r5, r3, r1
 80036b8:	ea04 0602 	and.w	r6, r4, r2
 80036bc:	4629      	mov	r1, r5
 80036be:	4632      	mov	r2, r6
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	0154      	lsls	r4, r2, #5
 80036ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ce:	014b      	lsls	r3, r1, #5
 80036d0:	4619      	mov	r1, r3
 80036d2:	4622      	mov	r2, r4
 80036d4:	1b49      	subs	r1, r1, r5
 80036d6:	eb62 0206 	sbc.w	r2, r2, r6
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	f04f 0400 	mov.w	r4, #0
 80036e2:	0194      	lsls	r4, r2, #6
 80036e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036e8:	018b      	lsls	r3, r1, #6
 80036ea:	1a5b      	subs	r3, r3, r1
 80036ec:	eb64 0402 	sbc.w	r4, r4, r2
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	00e2      	lsls	r2, r4, #3
 80036fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036fe:	00d9      	lsls	r1, r3, #3
 8003700:	460b      	mov	r3, r1
 8003702:	4614      	mov	r4, r2
 8003704:	195b      	adds	r3, r3, r5
 8003706:	eb44 0406 	adc.w	r4, r4, r6
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	0262      	lsls	r2, r4, #9
 8003714:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003718:	0259      	lsls	r1, r3, #9
 800371a:	460b      	mov	r3, r1
 800371c:	4614      	mov	r4, r2
 800371e:	4618      	mov	r0, r3
 8003720:	4621      	mov	r1, r4
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f04f 0400 	mov.w	r4, #0
 8003728:	461a      	mov	r2, r3
 800372a:	4623      	mov	r3, r4
 800372c:	f7fc fd4c 	bl	80001c8 <__aeabi_uldivmod>
 8003730:	4603      	mov	r3, r0
 8003732:	460c      	mov	r4, r1
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e049      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003738:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	ea03 0501 	and.w	r5, r3, r1
 800374e:	ea04 0602 	and.w	r6, r4, r2
 8003752:	4629      	mov	r1, r5
 8003754:	4632      	mov	r2, r6
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	f04f 0400 	mov.w	r4, #0
 800375e:	0154      	lsls	r4, r2, #5
 8003760:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003764:	014b      	lsls	r3, r1, #5
 8003766:	4619      	mov	r1, r3
 8003768:	4622      	mov	r2, r4
 800376a:	1b49      	subs	r1, r1, r5
 800376c:	eb62 0206 	sbc.w	r2, r2, r6
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	0194      	lsls	r4, r2, #6
 800377a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800377e:	018b      	lsls	r3, r1, #6
 8003780:	1a5b      	subs	r3, r3, r1
 8003782:	eb64 0402 	sbc.w	r4, r4, r2
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	00e2      	lsls	r2, r4, #3
 8003790:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003794:	00d9      	lsls	r1, r3, #3
 8003796:	460b      	mov	r3, r1
 8003798:	4614      	mov	r4, r2
 800379a:	195b      	adds	r3, r3, r5
 800379c:	eb44 0406 	adc.w	r4, r4, r6
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	02a2      	lsls	r2, r4, #10
 80037aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ae:	0299      	lsls	r1, r3, #10
 80037b0:	460b      	mov	r3, r1
 80037b2:	4614      	mov	r4, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	4621      	mov	r1, r4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f04f 0400 	mov.w	r4, #0
 80037be:	461a      	mov	r2, r3
 80037c0:	4623      	mov	r3, r4
 80037c2:	f7fc fd01 	bl	80001c8 <__aeabi_uldivmod>
 80037c6:	4603      	mov	r3, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	60bb      	str	r3, [r7, #8]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037ea:	60bb      	str	r3, [r7, #8]
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	68bb      	ldr	r3, [r7, #8]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	007a1200 	.word	0x007a1200

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000028 	.word	0x20000028

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4601      	mov	r1, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4a03      	ldr	r2, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	0800834c 	.word	0x0800834c

08003844 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003868:	2b00      	cmp	r3, #0
 800386a:	d035      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800386c:	4b62      	ldr	r3, [pc, #392]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003872:	f7fc fe8f 	bl	8000594 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003878:	e008      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800387a:	f7fc fe8b 	bl	8000594 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0b0      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800388c:	4b5b      	ldr	r3, [pc, #364]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	019a      	lsls	r2, r3, #6
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	071b      	lsls	r3, r3, #28
 80038a4:	4955      	ldr	r1, [pc, #340]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038ac:	4b52      	ldr	r3, [pc, #328]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b2:	f7fc fe6f 	bl	8000594 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ba:	f7fc fe6b 	bl	8000594 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e090      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038cc:	4b4b      	ldr	r3, [pc, #300]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8083 	beq.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b44      	ldr	r3, [pc, #272]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a43      	ldr	r2, [pc, #268]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003902:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a3e      	ldr	r2, [pc, #248]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800390e:	f7fc fe41 	bl	8000594 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003916:	f7fc fe3d 	bl	8000594 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e062      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003928:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003934:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02f      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d028      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395c:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003962:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003968:	4a24      	ldr	r2, [pc, #144]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d114      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800397a:	f7fc fe0b 	bl	8000594 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fc fe07 	bl	8000594 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e02a      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ee      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b0:	d10d      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	490d      	ldr	r1, [pc, #52]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
 80039cc:	e005      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039d8:	6093      	str	r3, [r2, #8]
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e6:	4905      	ldr	r1, [pc, #20]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	42470068 	.word	0x42470068
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42470e40 	.word	0x42470e40

08003a08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d13d      	bne.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a2e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d12f      	bne.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a3c:	617b      	str	r3, [r7, #20]
          break;
 8003a3e:	e02f      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4c:	d108      	bne.n	8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e007      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8a:	0f1b      	lsrs	r3, r3, #28
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	617b      	str	r3, [r7, #20]
          break;
 8003a98:	e002      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
          break;
 8003a9e:	bf00      	nop
        }
      }
      break;
 8003aa0:	bf00      	nop
    }
  }
  return frequency;
 8003aa2:	697b      	ldr	r3, [r7, #20]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	00bb8000 	.word	0x00bb8000
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	00f42400 	.word	0x00f42400

08003ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e056      	b.n	8003b80 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f003 fea3 	bl	8007838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	ea42 0103 	orr.w	r1, r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	f003 0104 	and.w	r1, r3, #4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01d      	b.n	8003bd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f003 fe8a 	bl	80078c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f000 f9fa 	bl	8003fc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e01d      	b.n	8003c2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f815 	bl	8003c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f000 f9cf 	bl	8003fc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fc9a 	bl	8004594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <HAL_TIM_PWM_Start+0x74>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIM_PWM_Start+0x2c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <HAL_TIM_PWM_Start+0x78>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_PWM_Start+0x30>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_TIM_PWM_Start+0x32>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d007      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e0b4      	b.n	8003e48 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	f200 809f 	bhi.w	8003e34 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003e35 	.word	0x08003e35
 8003d04:	08003e35 	.word	0x08003e35
 8003d08:	08003e35 	.word	0x08003e35
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003e35 	.word	0x08003e35
 8003d14:	08003e35 	.word	0x08003e35
 8003d18:	08003e35 	.word	0x08003e35
 8003d1c:	08003db3 	.word	0x08003db3
 8003d20:	08003e35 	.word	0x08003e35
 8003d24:	08003e35 	.word	0x08003e35
 8003d28:	08003e35 	.word	0x08003e35
 8003d2c:	08003df3 	.word	0x08003df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f9e2 	bl	8004100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
      break;
 8003d6e:	e062      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa32 	bl	80041e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]
      break;
 8003db0:	e041      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fa87 	bl	80042cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0208 	orr.w	r2, r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0204 	bic.w	r2, r2, #4
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
      break;
 8003df0:	e021      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fadb 	bl	80043b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e34:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_ConfigClockSource+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0a6      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x166>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d067      	beq.n	8003f70 <HAL_TIM_ConfigClockSource+0x120>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d80b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x6c>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d073      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d802      	bhi.n	8003eb2 <HAL_TIM_ConfigClockSource+0x62>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d06f      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003eb0:	e078      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d06c      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
 8003eb6:	2b30      	cmp	r3, #48	; 0x30
 8003eb8:	d06a      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003eba:	e073      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ebc:	2b70      	cmp	r3, #112	; 0x70
 8003ebe:	d00d      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x8c>
 8003ec0:	2b70      	cmp	r3, #112	; 0x70
 8003ec2:	d804      	bhi.n	8003ece <HAL_TIM_ConfigClockSource+0x7e>
 8003ec4:	2b50      	cmp	r3, #80	; 0x50
 8003ec6:	d033      	beq.n	8003f30 <HAL_TIM_ConfigClockSource+0xe0>
 8003ec8:	2b60      	cmp	r3, #96	; 0x60
 8003eca:	d041      	beq.n	8003f50 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ecc:	e06a      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d066      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x152>
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d017      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003eda:	e063      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 fb32 	bl	8004554 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003efe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e04c      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f000 fb1b 	bl	8004554 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2c:	609a      	str	r2, [r3, #8]
      break;
 8003f2e:	e039      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f000 fa8f 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2150      	movs	r1, #80	; 0x50
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fae8 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003f4e:	e029      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f000 faae 	bl	80044be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2160      	movs	r1, #96	; 0x60
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fad8 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003f6e:	e019      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f000 fa6f 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2140      	movs	r1, #64	; 0x40
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fac8 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003f8e:	e009      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fabf 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e000      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003fa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a40      	ldr	r2, [pc, #256]	; (80040d4 <TIM_Base_SetConfig+0x114>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d00f      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <TIM_Base_SetConfig+0x118>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3c      	ldr	r2, [pc, #240]	; (80040dc <TIM_Base_SetConfig+0x11c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3b      	ldr	r2, [pc, #236]	; (80040e0 <TIM_Base_SetConfig+0x120>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3a      	ldr	r2, [pc, #232]	; (80040e4 <TIM_Base_SetConfig+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d108      	bne.n	8004012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2f      	ldr	r2, [pc, #188]	; (80040d4 <TIM_Base_SetConfig+0x114>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d027      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <TIM_Base_SetConfig+0x118>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d023      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <TIM_Base_SetConfig+0x11c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <TIM_Base_SetConfig+0x120>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <TIM_Base_SetConfig+0x124>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d017      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <TIM_Base_SetConfig+0x128>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <TIM_Base_SetConfig+0x12c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <TIM_Base_SetConfig+0x130>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <TIM_Base_SetConfig+0x134>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <TIM_Base_SetConfig+0x138>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <TIM_Base_SetConfig+0x13c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <TIM_Base_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_Base_SetConfig+0xf8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <TIM_Base_SetConfig+0x124>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d103      	bne.n	80040c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	615a      	str	r2, [r3, #20]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800
 80040f4:	40001800 	.word	0x40001800
 80040f8:	40001c00 	.word	0x40001c00
 80040fc:	40002000 	.word	0x40002000

08004100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 0302 	bic.w	r3, r3, #2
 8004148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <TIM_OC1_SetConfig+0xd8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC1_SetConfig+0x64>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <TIM_OC1_SetConfig+0xdc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10c      	bne.n	800417e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0308 	bic.w	r3, r3, #8
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 0304 	bic.w	r3, r3, #4
 800417c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <TIM_OC1_SetConfig+0xd8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_OC1_SetConfig+0x8e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <TIM_OC1_SetConfig+0xdc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d111      	bne.n	80041b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40010400 	.word	0x40010400

080041e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0320 	bic.w	r3, r3, #32
 800422a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <TIM_OC2_SetConfig+0xe4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_OC2_SetConfig+0x68>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <TIM_OC2_SetConfig+0xe8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10d      	bne.n	8004264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <TIM_OC2_SetConfig+0xe4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC2_SetConfig+0x94>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <TIM_OC2_SetConfig+0xe8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d113      	bne.n	800429c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800427a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40010400 	.word	0x40010400

080042cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a21      	ldr	r2, [pc, #132]	; (80043ac <TIM_OC3_SetConfig+0xe0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_OC3_SetConfig+0x66>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a20      	ldr	r2, [pc, #128]	; (80043b0 <TIM_OC3_SetConfig+0xe4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10d      	bne.n	800434e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a16      	ldr	r2, [pc, #88]	; (80043ac <TIM_OC3_SetConfig+0xe0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_OC3_SetConfig+0x92>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <TIM_OC3_SetConfig+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d113      	bne.n	8004386 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800436c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	621a      	str	r2, [r3, #32]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40010400 	.word	0x40010400

080043b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	031b      	lsls	r3, r3, #12
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <TIM_OC4_SetConfig+0xa4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_OC4_SetConfig+0x68>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a11      	ldr	r2, [pc, #68]	; (800445c <TIM_OC4_SetConfig+0xa8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d109      	bne.n	8004430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044be:	b480      	push	{r7}
 80044c0:	b087      	sub	sp, #28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0210 	bic.w	r2, r3, #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	f043 0307 	orr.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2201      	movs	r2, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	401a      	ands	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e032      	b.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800462e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004668:	b084      	sub	sp, #16
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	f107 001c 	add.w	r0, r7, #28
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	2b01      	cmp	r3, #1
 800467e:	d122      	bne.n	80046c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f94a 	bl	8004954 <USB_CoreReset>
 80046c0:	4603      	mov	r3, r0
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e01a      	b.n	80046fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f93e 	bl	8004954 <USB_CoreReset>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
 80046ee:	e005      	b.n	80046fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10b      	bne.n	800471a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f043 0206 	orr.w	r2, r3, #6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004726:	b004      	add	sp, #16
 8004728:	4770      	bx	lr

0800472a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 0201 	bic.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	460b      	mov	r3, r1
 8004778:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d106      	bne.n	800479a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	e00b      	b.n	80047b2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e001      	b.n	80047b2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e003      	b.n	80047ba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047b2:	2032      	movs	r0, #50	; 0x32
 80047b4:	f7fb fefa 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <USB_FlushTxFifo+0x48>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e006      	b.n	80047fe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d0f0      	beq.n	80047de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	00030d40 	.word	0x00030d40

08004810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2210      	movs	r2, #16
 8004820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <USB_FlushRxFifo+0x40>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e006      	b.n	8004842 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b10      	cmp	r3, #16
 800483e:	d0f0      	beq.n	8004822 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	00030d40 	.word	0x00030d40

08004854 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	; 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4611      	mov	r1, r2
 8004860:	461a      	mov	r2, r3
 8004862:	460b      	mov	r3, r1
 8004864:	71fb      	strb	r3, [r7, #7]
 8004866:	4613      	mov	r3, r2
 8004868:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004872:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d11a      	bne.n	80048b0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800487a:	88bb      	ldrh	r3, [r7, #4]
 800487c:	3303      	adds	r3, #3
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	e00f      	b.n	80048a8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	031a      	lsls	r2, r3, #12
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4413      	add	r3, r2
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	461a      	mov	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3304      	adds	r3, #4
 80048a0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	3301      	adds	r3, #1
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d3eb      	bcc.n	8004888 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048be:	b480      	push	{r7}
 80048c0:	b089      	sub	sp, #36	; 0x24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	4613      	mov	r3, r2
 80048ca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	3303      	adds	r3, #3
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e00b      	b.n	80048fa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3304      	adds	r3, #4
 80048f2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3ef      	bcc.n	80048e2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004902:	69fb      	ldr	r3, [r7, #28]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3724      	adds	r7, #36	; 0x24
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4013      	ands	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004928:	68fb      	ldr	r3, [r7, #12]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0301 	and.w	r3, r3, #1
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <USB_CoreReset+0x64>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e01b      	b.n	80049aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	daf2      	bge.n	8004960 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <USB_CoreReset+0x64>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e006      	b.n	80049aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d0f0      	beq.n	800498a <USB_CoreReset+0x36>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	00030d40 	.word	0x00030d40

080049bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049bc:	b084      	sub	sp, #16
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	f107 001c 	add.w	r0, r7, #28
 80049ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049d8:	461a      	mov	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d10a      	bne.n	8004a2a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a22:	f043 0304 	orr.w	r3, r3, #4
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	e014      	b.n	8004a54 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e009      	b.n	8004a54 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a4e:	f023 0304 	bic.w	r3, r3, #4
 8004a52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004a54:	2110      	movs	r1, #16
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff feb4 	bl	80047c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fed7 	bl	8004810 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e015      	b.n	8004a94 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a74:	461a      	mov	r2, r3
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d3e5      	bcc.n	8004a68 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8ac 	bl	8004bfc <USB_DriveVbus>

  HAL_Delay(200U);
 8004aa4:	20c8      	movs	r0, #200	; 0xc8
 8004aa6:	f7fb fd81 	bl	80005ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <USB_HostInit+0x164>)
 8004ad0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <USB_HostInit+0x168>)
 8004ad6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ada:	e009      	b.n	8004af0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <USB_HostInit+0x16c>)
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <USB_HostInit+0x170>)
 8004aec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d105      	bne.n	8004b02 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f043 0210 	orr.w	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <USB_HostInit+0x174>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b1a:	b004      	add	sp, #16
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	01000200 	.word	0x01000200
 8004b24:	00e00300 	.word	0x00e00300
 8004b28:	00600080 	.word	0x00600080
 8004b2c:	004000e0 	.word	0x004000e0
 8004b30:	a3200008 	.word	0xa3200008

08004b34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b82:	6053      	str	r3, [r2, #4]
 8004b84:	e009      	b.n	8004b9a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d106      	bne.n	8004b9a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b92:	461a      	mov	r2, r3
 8004b94:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b98:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004bd8:	2064      	movs	r0, #100	; 0x64
 8004bda:	f7fb fce7 	bl	80005ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004bec:	200a      	movs	r0, #10
 8004bee:	f7fb fcdd 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <USB_DriveVbus+0x44>
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d106      	bne.n	8004c40 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c3e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	d109      	bne.n	8004c60 <USB_DriveVbus+0x64>
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c5e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	0c5b      	lsrs	r3, r3, #17
 8004c8c:	f003 0303 	and.w	r3, r3, #3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	b29b      	uxth	r3, r3
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	70fb      	strb	r3, [r7, #3]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70bb      	strb	r3, [r7, #2]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d87e      	bhi.n	8004dfc <USB_HC_Init+0x13c>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <USB_HC_Init+0x44>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004dbf 	.word	0x08004dbf
 8004d0c:	08004d15 	.word	0x08004d15
 8004d10:	08004d81 	.word	0x08004d81
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	461a      	mov	r2, r3
 8004d22:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da10      	bge.n	8004d52 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004d50:	e057      	b.n	8004e02 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d051      	beq.n	8004e02 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d7c:	60d3      	str	r3, [r2, #12]
      break;
 8004d7e:	e040      	b.n	8004e02 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da34      	bge.n	8004e06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004dbc:	e023      	b.n	8004e06 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f240 2325 	movw	r3, #549	; 0x225
 8004dd0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da17      	bge.n	8004e0a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	78fa      	ldrb	r2, [r7, #3]
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004df8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004dfa:	e006      	b.n	8004e0a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004e00:	e004      	b.n	8004e0c <USB_HC_Init+0x14c>
      break;
 8004e02:	bf00      	nop
 8004e04:	e002      	b.n	8004e0c <USB_HC_Init+0x14c>
      break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <USB_HC_Init+0x14c>
      break;
 8004e0a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e26:	4313      	orrs	r3, r2
 8004e28:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da03      	bge.n	8004e46 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e001      	b.n	8004e4a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d103      	bne.n	8004e5a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e001      	b.n	8004e5e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e5e:	787b      	ldrb	r3, [r7, #1]
 8004e60:	059b      	lsls	r3, r3, #22
 8004e62:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e66:	78bb      	ldrb	r3, [r7, #2]
 8004e68:	02db      	lsls	r3, r3, #11
 8004e6a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e6e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e74:	049b      	lsls	r3, r3, #18
 8004e76:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	0159      	lsls	r1, r3, #5
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	440b      	add	r3, r1
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e9a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004e9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d10f      	bne.n	8004ec4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop

08004ed4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08c      	sub	sp, #48	; 0x30
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d028      	beq.n	8004f50 <USB_HC_StartXfer+0x7c>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	791b      	ldrb	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d124      	bne.n	8004f50 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <USB_HC_StartXfer+0x50>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	795b      	ldrb	r3, [r3, #5]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fa2e 	bl	800537c <USB_DoPing>
      return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e112      	b.n	800514a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d112      	bne.n	8004f50 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f44:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004f48:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d018      	beq.n	8004f8a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	8912      	ldrh	r2, [r2, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	3b01      	subs	r3, #1
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	8912      	ldrh	r2, [r2, #8]
 8004f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f6c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f70:	8b7b      	ldrh	r3, [r7, #26]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d90b      	bls.n	8004f8e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004f76:	8b7b      	ldrh	r3, [r7, #26]
 8004f78:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	8912      	ldrh	r2, [r2, #8]
 8004f80:	fb02 f203 	mul.w	r2, r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	611a      	str	r2, [r3, #16]
 8004f88:	e001      	b.n	8004f8e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	78db      	ldrb	r3, [r3, #3]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d006      	beq.n	8004fa4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	8912      	ldrh	r2, [r2, #8]
 8004f9c:	fb02 f203 	mul.w	r2, r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fae:	04d9      	lsls	r1, r3, #19
 8004fb0:	4b68      	ldr	r3, [pc, #416]	; (8005154 <USB_HC_StartXfer+0x280>)
 8004fb2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	7a9b      	ldrb	r3, [r3, #10]
 8004fba:	075b      	lsls	r3, r3, #29
 8004fbc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fc0:	69f9      	ldr	r1, [r7, #28]
 8004fc2:	0148      	lsls	r0, r1, #5
 8004fc4:	6a39      	ldr	r1, [r7, #32]
 8004fc6:	4401      	add	r1, r0
 8004fc8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fcc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	68d9      	ldr	r1, [r3, #12]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	6a3a      	ldr	r2, [r7, #32]
 8005016:	440a      	add	r2, r1
 8005018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005020:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	7e7b      	ldrb	r3, [r7, #25]
 8005032:	075b      	lsls	r3, r3, #29
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	0148      	lsls	r0, r1, #5
 8005038:	6a39      	ldr	r1, [r7, #32]
 800503a:	4401      	add	r1, r0
 800503c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a41      	ldr	r2, [pc, #260]	; (8005158 <USB_HC_StartXfer+0x284>)
 8005054:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005056:	4b40      	ldr	r3, [pc, #256]	; (8005158 <USB_HC_StartXfer+0x284>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800505e:	4a3e      	ldr	r2, [pc, #248]	; (8005158 <USB_HC_StartXfer+0x284>)
 8005060:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	78db      	ldrb	r3, [r3, #3]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800506a:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <USB_HC_StartXfer+0x284>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005072:	4a39      	ldr	r2, [pc, #228]	; (8005158 <USB_HC_StartXfer+0x284>)
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e005      	b.n	8005084 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005078:	4b37      	ldr	r3, [pc, #220]	; (8005158 <USB_HC_StartXfer+0x284>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005080:	4a35      	ldr	r2, [pc, #212]	; (8005158 <USB_HC_StartXfer+0x284>)
 8005082:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005084:	4b34      	ldr	r3, [pc, #208]	; (8005158 <USB_HC_StartXfer+0x284>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508c:	4a32      	ldr	r2, [pc, #200]	; (8005158 <USB_HC_StartXfer+0x284>)
 800508e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	461a      	mov	r2, r3
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <USB_HC_StartXfer+0x284>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d14e      	bne.n	8005148 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	78db      	ldrb	r3, [r3, #3]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d14a      	bne.n	8005148 <USB_HC_StartXfer+0x274>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d046      	beq.n	8005148 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	79db      	ldrb	r3, [r3, #7]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d830      	bhi.n	8005124 <USB_HC_StartXfer+0x250>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <USB_HC_StartXfer+0x1f4>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050fd 	.word	0x080050fd
 80050d0:	080050d9 	.word	0x080050d9
 80050d4:	080050fd 	.word	0x080050fd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	3303      	adds	r3, #3
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050e2:	8afa      	ldrh	r2, [r7, #22]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d91c      	bls.n	8005128 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	619a      	str	r2, [r3, #24]
          }
          break;
 80050fa:	e015      	b.n	8005128 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	3303      	adds	r3, #3
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005106:	8afa      	ldrh	r2, [r7, #22]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	b29b      	uxth	r3, r3
 8005112:	429a      	cmp	r2, r3
 8005114:	d90a      	bls.n	800512c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	619a      	str	r2, [r3, #24]
          }
          break;
 8005122:	e003      	b.n	800512c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005124:	bf00      	nop
 8005126:	e002      	b.n	800512e <USB_HC_StartXfer+0x25a>
          break;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <USB_HC_StartXfer+0x25a>
          break;
 800512c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68d9      	ldr	r1, [r3, #12]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	785a      	ldrb	r2, [r3, #1]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	b298      	uxth	r0, r3
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4603      	mov	r3, r0
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff fb86 	bl	8004854 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3728      	adds	r7, #40	; 0x28
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	1ff80000 	.word	0x1ff80000
 8005158:	200000ac 	.word	0x200000ac

0800515c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	b29b      	uxth	r3, r3
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800517e:	b480      	push	{r7}
 8005180:	b087      	sub	sp, #28
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	0c9b      	lsrs	r3, r3, #18
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <USB_HC_Halt+0x3a>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d16c      	bne.n	8005292 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d143      	bne.n	800526c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005202:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	440a      	add	r2, r1
 800521a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005222:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	440a      	add	r2, r1
 800523a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005242:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3301      	adds	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005250:	d81d      	bhi.n	800528e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005268:	d0ec      	beq.n	8005244 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800526a:	e080      	b.n	800536e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	440a      	add	r2, r1
 8005282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800528a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800528c:	e06f      	b.n	800536e <USB_HC_Halt+0x1f0>
          break;
 800528e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005290:	e06d      	b.n	800536e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d143      	bne.n	800534a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005300:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	440a      	add	r2, r1
 8005318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005320:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3301      	adds	r3, #1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532e:	d81d      	bhi.n	800536c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005346:	d0ec      	beq.n	8005322 <USB_HC_Halt+0x1a4>
 8005348:	e011      	b.n	800536e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	440a      	add	r2, r1
 8005360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e000      	b.n	800536e <USB_HC_Halt+0x1f0>
          break;
 800536c:	bf00      	nop
    }
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005390:	2301      	movs	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	04da      	lsls	r2, r3, #19
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <USB_DoPing+0x74>)
 800539a:	4013      	ands	r3, r2
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	1ff80000 	.word	0x1ff80000

080053f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff f9a1 	bl	800474c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800540a:	2110      	movs	r1, #16
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff f9d9 	bl	80047c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff f9fc 	bl	8004810 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e01f      	b.n	800545e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005434:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800543c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005444:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	461a      	mov	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3301      	adds	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b0f      	cmp	r3, #15
 8005462:	d9dc      	bls.n	800541e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	e034      	b.n	80054d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005480:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005488:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005490:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549e:	461a      	mov	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3301      	adds	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b0:	d80c      	bhi.n	80054cc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c8:	d0ec      	beq.n	80054a4 <USB_StopHost+0xb0>
 80054ca:	e000      	b.n	80054ce <USB_StopHost+0xda>
        break;
 80054cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3301      	adds	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	d9c7      	bls.n	800546a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e0:	461a      	mov	r2, r3
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
 80054e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff f91a 	bl	800472a <USB_EnableGlobalInt>

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b089      	sub	sp, #36	; 0x24
 8005504:	af04      	add	r7, sp, #16
 8005506:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005508:	2302      	movs	r3, #2
 800550a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800550c:	2301      	movs	r3, #1
 800550e:	2202      	movs	r2, #2
 8005510:	2102      	movs	r1, #2
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fc3a 	bl	8005d8c <USBH_FindInterface>
 8005518:	4603      	mov	r3, r0
 800551a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	2bff      	cmp	r3, #255	; 0xff
 8005520:	f000 812a 	beq.w	8005778 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fc13 	bl	8005d54 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005534:	2050      	movs	r0, #80	; 0x50
 8005536:	f002 fe21 	bl	800817c <malloc>
 800553a:	4603      	mov	r3, r0
 800553c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005548:	7bbb      	ldrb	r3, [r7, #14]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	211a      	movs	r1, #26
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	4413      	add	r3, r2
 8005554:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	b25b      	sxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	da15      	bge.n	800558c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	211a      	movs	r1, #26
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	211a      	movs	r1, #26
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005586:	881a      	ldrh	r2, [r3, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 fd21 	bl	8006fda <USBH_AllocPipe>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	7819      	ldrb	r1, [r3, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	7858      	ldrb	r0, [r3, #1]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	8952      	ldrh	r2, [r2, #10]
 80055b8:	9202      	str	r2, [sp, #8]
 80055ba:	2203      	movs	r2, #3
 80055bc:	9201      	str	r2, [sp, #4]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4623      	mov	r3, r4
 80055c2:	4602      	mov	r2, r0
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fcd9 	bl	8006f7c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f002 fcf8 	bl	8007fc8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80055d8:	2300      	movs	r3, #0
 80055da:	2200      	movs	r2, #0
 80055dc:	210a      	movs	r1, #10
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fbd4 	bl	8005d8c <USBH_FindInterface>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	2bff      	cmp	r3, #255	; 0xff
 80055ec:	f000 80c4 	beq.w	8005778 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80055f0:	7bbb      	ldrb	r3, [r7, #14]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	211a      	movs	r1, #26
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	4413      	add	r3, r2
 80055fc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	b25b      	sxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	da16      	bge.n	8005636 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005608:	7bbb      	ldrb	r3, [r7, #14]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	211a      	movs	r1, #26
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800561e:	7bbb      	ldrb	r3, [r7, #14]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	211a      	movs	r1, #26
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800562e:	881a      	ldrh	r2, [r3, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	835a      	strh	r2, [r3, #26]
 8005634:	e015      	b.n	8005662 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005636:	7bbb      	ldrb	r3, [r7, #14]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	211a      	movs	r1, #26
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	4413      	add	r3, r2
 8005642:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	211a      	movs	r1, #26
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	211a      	movs	r1, #26
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b25b      	sxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	da16      	bge.n	80056a8 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800567a:	7bbb      	ldrb	r3, [r7, #14]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	211a      	movs	r1, #26
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	4413      	add	r3, r2
 8005686:	f203 3352 	addw	r3, r3, #850	; 0x352
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	211a      	movs	r1, #26
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80056a0:	881a      	ldrh	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	835a      	strh	r2, [r3, #26]
 80056a6:	e015      	b.n	80056d4 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	211a      	movs	r1, #26
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 3352 	addw	r3, r3, #850	; 0x352
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	211a      	movs	r1, #26
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80056ce:	881a      	ldrh	r2, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	7b9b      	ldrb	r3, [r3, #14]
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fc7d 	bl	8006fda <USBH_AllocPipe>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	7bdb      	ldrb	r3, [r3, #15]
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fc73 	bl	8006fda <USBH_AllocPipe>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	7b59      	ldrb	r1, [r3, #13]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	7b98      	ldrb	r0, [r3, #14]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	8b12      	ldrh	r2, [r2, #24]
 8005714:	9202      	str	r2, [sp, #8]
 8005716:	2202      	movs	r2, #2
 8005718:	9201      	str	r2, [sp, #4]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	4623      	mov	r3, r4
 800571e:	4602      	mov	r2, r0
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 fc2b 	bl	8006f7c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	7b19      	ldrb	r1, [r3, #12]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	7bd8      	ldrb	r0, [r3, #15]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	8b52      	ldrh	r2, [r2, #26]
 800573e:	9202      	str	r2, [sp, #8]
 8005740:	2202      	movs	r2, #2
 8005742:	9201      	str	r2, [sp, #4]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	4623      	mov	r3, r4
 8005748:	4602      	mov	r2, r0
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 fc16 	bl	8006f7c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	7b5b      	ldrb	r3, [r3, #13]
 800575c:	2200      	movs	r2, #0
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f002 fc31 	bl	8007fc8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	7b1b      	ldrb	r3, [r3, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f002 fc2a 	bl	8007fc8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}

08005782 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 fc09 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fc31 	bl	8007016 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	7b1b      	ldrb	r3, [r3, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	7b1b      	ldrb	r3, [r3, #12]
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 fbf6 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	7b1b      	ldrb	r3, [r3, #12]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fc1e 	bl	8007016 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	7b5b      	ldrb	r3, [r3, #13]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00e      	beq.n	8005806 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	7b5b      	ldrb	r3, [r3, #13]
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 fbe3 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	7b5b      	ldrb	r3, [r3, #13]
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 fc0b 	bl	8007016 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4618      	mov	r0, r3
 800581c:	f002 fcb6 	bl	800818c <free>
    phost->pActiveClass->pData = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005826:	2200      	movs	r2, #0
 8005828:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800583c:	2302      	movs	r3, #2
 800583e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	3340      	adds	r3, #64	; 0x40
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f8b2 	bl	80059ba <GetLineCoding>
 8005856:	4603      	mov	r3, r0
 8005858:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005866:	2102      	movs	r1, #2
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
  }
  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005898:	2b04      	cmp	r3, #4
 800589a:	d877      	bhi.n	800598c <USBH_CDC_Process+0x114>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <USBH_CDC_Process+0x2c>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b9 	.word	0x080058b9
 80058a8:	080058bf 	.word	0x080058bf
 80058ac:	080058ef 	.word	0x080058ef
 80058b0:	08005963 	.word	0x08005963
 80058b4:	08005971 	.word	0x08005971
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]
    break;
 80058bc:	e06d      	b.n	800599a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f897 	bl	80059f8 <SetLineCoding>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80058dc:	e058      	b.n	8005990 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d055      	beq.n	8005990 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2204      	movs	r2, #4
 80058e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80058ec:	e050      	b.n	8005990 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	3340      	adds	r3, #64	; 0x40
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f860 	bl	80059ba <GetLineCoding>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80058fe:	7bbb      	ldrb	r3, [r7, #14]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d126      	bne.n	8005952 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005916:	791b      	ldrb	r3, [r3, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d13b      	bne.n	8005994 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005928:	429a      	cmp	r2, r3
 800592a:	d133      	bne.n	8005994 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005936:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005938:	429a      	cmp	r2, r3
 800593a:	d12b      	bne.n	8005994 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005944:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005946:	429a      	cmp	r2, r3
 8005948:	d124      	bne.n	8005994 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f95a 	bl	8005c04 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005950:	e020      	b.n	8005994 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005952:	7bbb      	ldrb	r3, [r7, #14]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d01d      	beq.n	8005994 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2204      	movs	r2, #4
 800595c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005960:	e018      	b.n	8005994 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f867 	bl	8005a36 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8dc 	bl	8005b26 <CDC_ProcessReception>
    break;
 800596e:	e014      	b.n	800599a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005970:	2100      	movs	r1, #0
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fece 	bl	8006714 <USBH_ClrFeature>
 8005978:	4603      	mov	r3, r0
 800597a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800598a:	e005      	b.n	8005998 <USBH_CDC_Process+0x120>

  default:
    break;
 800598c:	bf00      	nop
 800598e:	e004      	b.n	800599a <USBH_CDC_Process+0x122>
    break;
 8005990:	bf00      	nop
 8005992:	e002      	b.n	800599a <USBH_CDC_Process+0x122>
    break;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <USBH_CDC_Process+0x122>
    break;
 8005998:	bf00      	nop

  }

  return status;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	22a1      	movs	r2, #161	; 0xa1
 80059c8:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2221      	movs	r2, #33	; 0x21
 80059ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2207      	movs	r2, #7
 80059e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2207      	movs	r2, #7
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 f873 	bl	8006ad4 <USBH_CtlReq>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2221      	movs	r2, #33	; 0x21
 8005a06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2207      	movs	r2, #7
 8005a1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2207      	movs	r2, #7
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 f854 	bl	8006ad4 <USBH_CtlReq>
 8005a2c:	4603      	mov	r3, r0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b086      	sub	sp, #24
 8005a3a:	af02      	add	r7, sp, #8
 8005a3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d002      	beq.n	8005a5c <CDC_ProcessTransmission+0x26>
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d025      	beq.n	8005aa6 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005a5a:	e060      	b.n	8005b1e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	8b12      	ldrh	r2, [r2, #24]
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d90c      	bls.n	8005a82 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	69d9      	ldr	r1, [r3, #28]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8b1a      	ldrh	r2, [r3, #24]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	7b58      	ldrb	r0, [r3, #13]
 8005a74:	2301      	movs	r3, #1
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	4603      	mov	r3, r0
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fa3b 	bl	8006ef6 <USBH_BulkSendData>
 8005a80:	e00c      	b.n	8005a9c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	7b58      	ldrb	r0, [r3, #13]
 8005a90:	2301      	movs	r3, #1
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4603      	mov	r3, r0
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fa2d 	bl	8006ef6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005aa4:	e03b      	b.n	8005b1e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	7b5b      	ldrb	r3, [r3, #13]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f002 fa61 	bl	8007f74 <USBH_LL_GetURBState>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d128      	bne.n	8005b0e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	8b12      	ldrh	r2, [r2, #24]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d90e      	bls.n	8005ae6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	8b12      	ldrh	r2, [r2, #24]
 8005ad0:	1a9a      	subs	r2, r3, r2
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	8b12      	ldrh	r2, [r2, #24]
 8005ade:	441a      	add	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	61da      	str	r2, [r3, #28]
 8005ae4:	e002      	b.n	8005aec <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005afc:	e00e      	b.n	8005b1c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f868 	bl	8005bdc <USBH_CDC_TransmitCallback>
    break;
 8005b0c:	e006      	b.n	8005b1c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d103      	bne.n	8005b1c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b1c:	bf00      	nop
  }
}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d002      	beq.n	8005b4c <CDC_ProcessReception+0x26>
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d00e      	beq.n	8005b68 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005b4a:	e043      	b.n	8005bd4 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	6a19      	ldr	r1, [r3, #32]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	8b5a      	ldrh	r2, [r3, #26]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	7b1b      	ldrb	r3, [r3, #12]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 f9f1 	bl	8006f40 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2204      	movs	r2, #4
 8005b62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005b66:	e035      	b.n	8005bd4 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	7b1b      	ldrb	r3, [r3, #12]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f002 fa00 	bl	8007f74 <USBH_LL_GetURBState>
 8005b74:	4603      	mov	r3, r0
 8005b76:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005b78:	7cfb      	ldrb	r3, [r7, #19]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d129      	bne.n	8005bd2 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	7b1b      	ldrb	r3, [r3, #12]
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f002 f963 	bl	8007e50 <USBH_LL_GetLastXferSize>
 8005b8a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d016      	beq.n	8005bc4 <CDC_ProcessReception+0x9e>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	8b5b      	ldrh	r3, [r3, #26]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d910      	bls.n	8005bc4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005bc2:	e006      	b.n	8005bd2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f80f 	bl	8005bf0 <USBH_CDC_ReceiveCallback>
    break;
 8005bd2:	bf00      	nop
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]

}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e019      	b.n	8005c64 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	79fa      	ldrb	r2, [r7, #7]
 8005c34:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f80f 	bl	8005c6c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f002 f845 	bl	8007cec <USBH_LL_Init>

  return USBH_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005c78:	e008      	b.n	8005c8c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	32e0      	adds	r2, #224	; 0xe0
 8005c80:	2100      	movs	r1, #0
 8005c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b0e      	cmp	r3, #14
 8005c90:	d9f3      	bls.n	8005c7a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e009      	b.n	8005cac <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb2:	d3f1      	bcc.n	8005c98 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d017      	beq.n	8005d42 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10f      	bne.n	8005d3c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	33dc      	adds	r3, #220	; 0xdc
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e004      	b.n	8005d46 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e001      	b.n	8005d46 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d42:	2302      	movs	r3, #2
 8005d44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d204      	bcs.n	8005d7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005d78:	e001      	b.n	8005d7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	4608      	mov	r0, r1
 8005d96:	4611      	mov	r1, r2
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	70fb      	strb	r3, [r7, #3]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	70bb      	strb	r3, [r7, #2]
 8005da2:	4613      	mov	r3, r2
 8005da4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005db4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005db6:	e025      	b.n	8005e04 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	221a      	movs	r2, #26
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	795b      	ldrb	r3, [r3, #5]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d002      	beq.n	8005dda <USBH_FindInterface+0x4e>
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	2bff      	cmp	r3, #255	; 0xff
 8005dd8:	d111      	bne.n	8005dfe <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005dde:	78ba      	ldrb	r2, [r7, #2]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d002      	beq.n	8005dea <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005de4:	78bb      	ldrb	r3, [r7, #2]
 8005de6:	2bff      	cmp	r3, #255	; 0xff
 8005de8:	d109      	bne.n	8005dfe <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005dee:	787a      	ldrb	r2, [r7, #1]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d002      	beq.n	8005dfa <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005df4:	787b      	ldrb	r3, [r7, #1]
 8005df6:	2bff      	cmp	r3, #255	; 0xff
 8005df8:	d101      	bne.n	8005dfe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	e006      	b.n	8005e0c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	3301      	adds	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d9d6      	bls.n	8005db8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e0a:	23ff      	movs	r3, #255	; 0xff
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 ff9f 	bl	8007d64 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005e26:	2101      	movs	r1, #1
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 f8b6 	bl	8007f9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af04      	add	r7, sp, #16
 8005e3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e40:	2302      	movs	r3, #2
 8005e42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 faec 	bl	8006426 <USBH_IsPortEnabled>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10c      	bne.n	8005e6e <USBH_Process+0x36>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d002      	beq.n	8005e6e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b0b      	cmp	r3, #11
 8005e76:	f200 814c 	bhi.w	8006112 <USBH_Process+0x2da>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <USBH_Process+0x48>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005eb1 	.word	0x08005eb1
 8005e84:	08005ed3 	.word	0x08005ed3
 8005e88:	08005ee7 	.word	0x08005ee7
 8005e8c:	080060ed 	.word	0x080060ed
 8005e90:	08006113 	.word	0x08006113
 8005e94:	08005f75 	.word	0x08005f75
 8005e98:	080060a3 	.word	0x080060a3
 8005e9c:	08005fa5 	.word	0x08005fa5
 8005ea0:	08005fc5 	.word	0x08005fc5
 8005ea4:	08005fe5 	.word	0x08005fe5
 8005ea8:	08006013 	.word	0x08006013
 8005eac:	080060d5 	.word	0x080060d5
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 812c 	beq.w	8006116 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005ec4:	20c8      	movs	r0, #200	; 0xc8
 8005ec6:	f002 f8b2 	bl	800802e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 ffa5 	bl	8007e1a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005ed0:	e121      	b.n	8006116 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f040 811e 	bne.w	800611a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005ee4:	e119      	b.n	800611a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005ee6:	2064      	movs	r0, #100	; 0x64
 8005ee8:	f002 f8a1 	bl	800802e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 ff6f 	bl	8007dd0 <USBH_LL_GetSpeed>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2205      	movs	r2, #5
 8005f00:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005f02:	2100      	movs	r1, #0
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 f868 	bl	8006fda <USBH_AllocPipe>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 f860 	bl	8006fda <USBH_AllocPipe>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7919      	ldrb	r1, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005f36:	b292      	uxth	r2, r2
 8005f38:	9202      	str	r2, [sp, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	9201      	str	r2, [sp, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f819 	bl	8006f7c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7959      	ldrb	r1, [r3, #5]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	9202      	str	r2, [sp, #8]
 8005f62:	2200      	movs	r2, #0
 8005f64:	9201      	str	r2, [sp, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f805 	bl	8006f7c <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005f72:	e0e3      	b.n	800613c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8e7 	bl	8006148 <USBH_HandleEnum>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 80ce 	bne.w	800611e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d103      	bne.n	8005f9c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2208      	movs	r2, #8
 8005f98:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005f9a:	e0c0      	b.n	800611e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2207      	movs	r2, #7
 8005fa0:	701a      	strb	r2, [r3, #0]
    break;
 8005fa2:	e0bc      	b.n	800611e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80b9 	beq.w	8006122 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005fc2:	e0ae      	b.n	8006122 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb59 	bl	8006686 <USBH_SetCfg>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 80a5 	bne.w	8006126 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2209      	movs	r2, #9
 8005fe0:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005fe2:	e0a0      	b.n	8006126 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fb69 	bl	80066cc <USBH_SetFeature>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 8094 	bne.w	800612a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	220a      	movs	r2, #10
 8006006:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006008:	e08f      	b.n	800612a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	220a      	movs	r2, #10
 800600e:	701a      	strb	r2, [r3, #0]
    break;
 8006010:	e08b      	b.n	800612a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8088 	beq.w	800612e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
 800602a:	e017      	b.n	800605c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	33dc      	adds	r3, #220	; 0xdc
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	791a      	ldrb	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006040:	429a      	cmp	r2, r3
 8006042:	d108      	bne.n	8006056 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	33dc      	adds	r3, #220	; 0xdc
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	3301      	adds	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0e4      	beq.n	800602c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006068:	2b00      	cmp	r3, #0
 800606a:	d016      	beq.n	800609a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2206      	movs	r2, #6
 8006082:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800608a:	2103      	movs	r1, #3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006090:	e04d      	b.n	800612e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	220d      	movs	r2, #13
 8006096:	701a      	strb	r2, [r3, #0]
    break;
 8006098:	e049      	b.n	800612e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	220d      	movs	r2, #13
 800609e:	701a      	strb	r2, [r3, #0]
    break;
 80060a0:	e045      	b.n	800612e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00f      	beq.n	80060cc <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3
 80060b8:	4603      	mov	r3, r0
 80060ba:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d136      	bne.n	8006132 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	220b      	movs	r2, #11
 80060c8:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80060ca:	e032      	b.n	8006132 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	220d      	movs	r2, #13
 80060d0:	701a      	strb	r2, [r3, #0]
    break;
 80060d2:	e02e      	b.n	8006132 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d02b      	beq.n	8006136 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
    }
    break;
 80060ea:	e024      	b.n	8006136 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fdbd 	bl	8005c6c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01e      	beq.n	800613a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006110:	e013      	b.n	800613a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006112:	bf00      	nop
 8006114:	e012      	b.n	800613c <USBH_Process+0x304>
    break;
 8006116:	bf00      	nop
 8006118:	e010      	b.n	800613c <USBH_Process+0x304>
    break;
 800611a:	bf00      	nop
 800611c:	e00e      	b.n	800613c <USBH_Process+0x304>
    break;
 800611e:	bf00      	nop
 8006120:	e00c      	b.n	800613c <USBH_Process+0x304>
    break;
 8006122:	bf00      	nop
 8006124:	e00a      	b.n	800613c <USBH_Process+0x304>
    break;
 8006126:	bf00      	nop
 8006128:	e008      	b.n	800613c <USBH_Process+0x304>
    break;
 800612a:	bf00      	nop
 800612c:	e006      	b.n	800613c <USBH_Process+0x304>
    break;
 800612e:	bf00      	nop
 8006130:	e004      	b.n	800613c <USBH_Process+0x304>
    break;
 8006132:	bf00      	nop
 8006134:	e002      	b.n	800613c <USBH_Process+0x304>
    break;
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <USBH_Process+0x304>
    break;
 800613a:	bf00      	nop
  }
 return USBH_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop

08006148 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af04      	add	r7, sp, #16
 800614e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b07      	cmp	r3, #7
 800615a:	f200 80f8 	bhi.w	800634e <USBH_HandleEnum+0x206>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <USBH_HandleEnum+0x1c>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006185 	.word	0x08006185
 8006168:	080061f7 	.word	0x080061f7
 800616c:	0800620f 	.word	0x0800620f
 8006170:	08006285 	.word	0x08006285
 8006174:	0800629b 	.word	0x0800629b
 8006178:	080062b7 	.word	0x080062b7
 800617c:	080062eb 	.word	0x080062eb
 8006180:	0800631f 	.word	0x0800631f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006184:	2108      	movs	r1, #8
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f9ad 	bl	80064e6 <USBH_Get_DevDesc>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 80df 	bne.w	8006352 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	7919      	ldrb	r1, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80061b8:	b292      	uxth	r2, r2
 80061ba:	9202      	str	r2, [sp, #8]
 80061bc:	2200      	movs	r2, #0
 80061be:	9201      	str	r2, [sp, #4]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	4603      	mov	r3, r0
 80061c4:	2280      	movs	r2, #128	; 0x80
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fed8 	bl	8006f7c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	7959      	ldrb	r1, [r3, #5]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80061e0:	b292      	uxth	r2, r2
 80061e2:	9202      	str	r2, [sp, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	9201      	str	r2, [sp, #4]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4603      	mov	r3, r0
 80061ec:	2200      	movs	r2, #0
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fec4 	bl	8006f7c <USBH_OpenPipe>

    }
    break;
 80061f4:	e0ad      	b.n	8006352 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80061f6:	2112      	movs	r1, #18
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f974 	bl	80064e6 <USBH_Get_DevDesc>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	f040 80a8 	bne.w	8006356 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800620c:	e0a3      	b.n	8006356 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800620e:	2101      	movs	r1, #1
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fa14 	bl	800663e <USBH_SetAddress>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 809e 	bne.w	800635a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800621e:	2002      	movs	r0, #2
 8006220:	f001 ff05 	bl	800802e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2203      	movs	r2, #3
 8006230:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	7919      	ldrb	r1, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006246:	b292      	uxth	r2, r2
 8006248:	9202      	str	r2, [sp, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	9201      	str	r2, [sp, #4]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	4603      	mov	r3, r0
 8006252:	2280      	movs	r2, #128	; 0x80
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fe91 	bl	8006f7c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7959      	ldrb	r1, [r3, #5]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800626e:	b292      	uxth	r2, r2
 8006270:	9202      	str	r2, [sp, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	9201      	str	r2, [sp, #4]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	4603      	mov	r3, r0
 800627a:	2200      	movs	r2, #0
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fe7d 	bl	8006f7c <USBH_OpenPipe>
    }
    break;
 8006282:	e06a      	b.n	800635a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006284:	2109      	movs	r1, #9
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f955 	bl	8006536 <USBH_Get_CfgDesc>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d165      	bne.n	800635e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006298:	e061      	b.n	800635e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f947 	bl	8006536 <USBH_Get_CfgDesc>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d159      	bne.n	8006362 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2205      	movs	r2, #5
 80062b2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80062b4:	e055      	b.n	8006362 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d010      	beq.n	80062e2 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80062cc:	23ff      	movs	r3, #255	; 0xff
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f955 	bl	800657e <USBH_Get_StringDesc>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d145      	bne.n	8006366 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2206      	movs	r2, #6
 80062de:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80062e0:	e041      	b.n	8006366 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2206      	movs	r2, #6
 80062e6:	705a      	strb	r2, [r3, #1]
    break;
 80062e8:	e03d      	b.n	8006366 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006300:	23ff      	movs	r3, #255	; 0xff
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f93b 	bl	800657e <USBH_Get_StringDesc>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d12d      	bne.n	800636a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2207      	movs	r2, #7
 8006312:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006314:	e029      	b.n	800636a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2207      	movs	r2, #7
 800631a:	705a      	strb	r2, [r3, #1]
    break;
 800631c:	e025      	b.n	800636a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00f      	beq.n	8006348 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006334:	23ff      	movs	r3, #255	; 0xff
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f921 	bl	800657e <USBH_Get_StringDesc>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d115      	bne.n	800636e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006346:	e012      	b.n	800636e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
    break;
 800634c:	e00f      	b.n	800636e <USBH_HandleEnum+0x226>

  default:
    break;
 800634e:	bf00      	nop
 8006350:	e00e      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 8006352:	bf00      	nop
 8006354:	e00c      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 8006356:	bf00      	nop
 8006358:	e00a      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 800635a:	bf00      	nop
 800635c:	e008      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 800635e:	bf00      	nop
 8006360:	e006      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 8006362:	bf00      	nop
 8006364:	e004      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 8006366:	bf00      	nop
 8006368:	e002      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <USBH_HandleEnum+0x228>
    break;
 800636e:	bf00      	nop
  }
  return Status;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f804 	bl	80063be <USBH_HandleSof>
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b0b      	cmp	r3, #11
 80063ce:	d10a      	bne.n	80063e6 <USBH_HandleSof+0x28>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
  }
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80063fe:	bf00      	nop
}
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800641a:	bf00      	nop
}
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10f      	bne.n	8006472 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00e      	beq.n	8006482 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800646a:	2104      	movs	r1, #4
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
 8006470:	e007      	b.n	8006482 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006478:	2b01      	cmp	r3, #1
 800647a:	d102      	bne.n	8006482 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fc80 	bl	8007d9a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fdb8 	bl	8007016 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	795b      	ldrb	r3, [r3, #5]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fdb2 	bl	8007016 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80064ca:	2105      	movs	r1, #5
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fc47 	bl	8007d64 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2203      	movs	r2, #3
 80064da:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af02      	add	r7, sp, #8
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006504:	2100      	movs	r1, #0
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f864 	bl	80065d4 <USBH_GetDescriptor>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f203 3022 	addw	r0, r3, #802	; 0x322
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	b292      	uxth	r2, r2
 8006526:	4619      	mov	r1, r3
 8006528:	f000 f918 	bl	800675c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af02      	add	r7, sp, #8
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	331c      	adds	r3, #28
 8006546:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006548:	887b      	ldrh	r3, [r7, #2]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006552:	2100      	movs	r1, #0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f83d 	bl	80065d4 <USBH_GetDescriptor>
 800655a:	4603      	mov	r3, r0
 800655c:	72fb      	strb	r3, [r7, #11]
 800655e:	7afb      	ldrb	r3, [r7, #11]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d107      	bne.n	8006574 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800656a:	887a      	ldrh	r2, [r7, #2]
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f964 	bl	800683c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006574:	7afb      	ldrb	r3, [r7, #11]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b088      	sub	sp, #32
 8006582:	af02      	add	r7, sp, #8
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	461a      	mov	r2, r3
 800658a:	460b      	mov	r3, r1
 800658c:	72fb      	strb	r3, [r7, #11]
 800658e:	4613      	mov	r3, r2
 8006590:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800659a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80065a2:	893b      	ldrh	r3, [r7, #8]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	460b      	mov	r3, r1
 80065a8:	2100      	movs	r1, #0
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f812 	bl	80065d4 <USBH_GetDescriptor>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d107      	bne.n	80065ca <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065c0:	893a      	ldrh	r2, [r7, #8]
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fa37 	bl	8006a38 <USBH_ParseStringDesc>
  }
  return status;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	72fb      	strb	r3, [r7, #11]
 80065e2:	4613      	mov	r3, r2
 80065e4:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	789b      	ldrb	r3, [r3, #2]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d11c      	bne.n	8006628 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2206      	movs	r2, #6
 80065fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	893a      	ldrh	r2, [r7, #8]
 8006604:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006606:	893b      	ldrh	r3, [r7, #8]
 8006608:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800660c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006610:	d104      	bne.n	800661c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f240 4209 	movw	r2, #1033	; 0x409
 8006618:	829a      	strh	r2, [r3, #20]
 800661a:	e002      	b.n	8006622 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8b3a      	ldrh	r2, [r7, #24]
 8006626:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006628:	8b3b      	ldrh	r3, [r7, #24]
 800662a:	461a      	mov	r2, r3
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fa50 	bl	8006ad4 <USBH_CtlReq>
 8006634:	4603      	mov	r3, r0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	789b      	ldrb	r3, [r3, #2]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10f      	bne.n	8006672 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2205      	movs	r2, #5
 800665c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006672:	2200      	movs	r2, #0
 8006674:	2100      	movs	r1, #0
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa2c 	bl	8006ad4 <USBH_CtlReq>
 800667c:	4603      	mov	r3, r0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	460b      	mov	r3, r1
 8006690:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	789b      	ldrb	r3, [r3, #2]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d10e      	bne.n	80066b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2209      	movs	r2, #9
 80066a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	887a      	ldrh	r2, [r7, #2]
 80066aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa09 	bl	8006ad4 <USBH_CtlReq>
 80066c2:	4603      	mov	r3, r0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	789b      	ldrb	r3, [r3, #2]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10f      	bne.n	8006700 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2203      	movs	r2, #3
 80066ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006700:	2200      	movs	r2, #0
 8006702:	2100      	movs	r1, #0
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f9e5 	bl	8006ad4 <USBH_CtlReq>
 800670a:	4603      	mov	r3, r0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10f      	bne.n	8006748 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006748:	2200      	movs	r2, #0
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f9c1 	bl	8006ad4 <USBH_CtlReq>
 8006752:	4603      	mov	r3, r0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	785a      	ldrb	r2, [r3, #1]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	3302      	adds	r3, #2
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b29a      	uxth	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3303      	adds	r3, #3
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	b29b      	uxth	r3, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	791a      	ldrb	r2, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	795a      	ldrb	r2, [r3, #5]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	799a      	ldrb	r2, [r3, #6]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	79da      	ldrb	r2, [r3, #7]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d939      	bls.n	8006830 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	3308      	adds	r3, #8
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	3309      	adds	r3, #9
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	4313      	orrs	r3, r2
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	330a      	adds	r3, #10
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	330b      	adds	r3, #11
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	4313      	orrs	r3, r2
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	330c      	adds	r3, #12
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	330d      	adds	r3, #13
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	b29b      	uxth	r3, r3
 8006808:	4313      	orrs	r3, r2
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	7b9a      	ldrb	r2, [r3, #14]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	7bda      	ldrb	r2, [r3, #15]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	7c1a      	ldrb	r2, [r3, #16]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	7c5a      	ldrb	r2, [r3, #17]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	745a      	strb	r2, [r3, #17]
  }
}
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	785a      	ldrb	r2, [r3, #1]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3302      	adds	r3, #2
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b29a      	uxth	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3303      	adds	r3, #3
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	b29b      	uxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	791a      	ldrb	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	795a      	ldrb	r2, [r3, #5]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	799a      	ldrb	r2, [r3, #6]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	79da      	ldrb	r2, [r3, #7]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	7a1a      	ldrb	r2, [r3, #8]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d95f      	bls.n	8006978 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80068b8:	2309      	movs	r3, #9
 80068ba:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80068c0:	e051      	b.n	8006966 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80068c2:	f107 0316 	add.w	r3, r7, #22
 80068c6:	4619      	mov	r1, r3
 80068c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ca:	f000 f8e8 	bl	8006a9e <USBH_GetNextDesc>
 80068ce:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d146      	bne.n	8006966 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80068d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068dc:	221a      	movs	r2, #26
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	3308      	adds	r3, #8
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	3302      	adds	r3, #2
 80068ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80068ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ee:	69f8      	ldr	r0, [r7, #28]
 80068f0:	f000 f846 	bl	8006980 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80068fe:	e022      	b.n	8006946 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006900:	f107 0316 	add.w	r3, r7, #22
 8006904:	4619      	mov	r1, r3
 8006906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006908:	f000 f8c9 	bl	8006a9e <USBH_GetNextDesc>
 800690c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b05      	cmp	r3, #5
 8006914:	d117      	bne.n	8006946 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006916:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800691a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800691e:	3201      	adds	r2, #1
 8006920:	00d2      	lsls	r2, r2, #3
 8006922:	211a      	movs	r1, #26
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	3308      	adds	r3, #8
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006936:	69b8      	ldr	r0, [r7, #24]
 8006938:	f000 f851 	bl	80069de <USBH_ParseEPDesc>
            ep_ix++;
 800693c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006940:	3301      	adds	r3, #1
 8006942:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	791b      	ldrb	r3, [r3, #4]
 800694a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800694e:	429a      	cmp	r2, r3
 8006950:	d204      	bcs.n	800695c <USBH_ParseCfgDesc+0x120>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	885a      	ldrh	r2, [r3, #2]
 8006956:	8afb      	ldrh	r3, [r7, #22]
 8006958:	429a      	cmp	r2, r3
 800695a:	d8d1      	bhi.n	8006900 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800695c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006960:	3301      	adds	r3, #1
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696a:	2b01      	cmp	r3, #1
 800696c:	d804      	bhi.n	8006978 <USBH_ParseCfgDesc+0x13c>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	885a      	ldrh	r2, [r3, #2]
 8006972:	8afb      	ldrh	r3, [r7, #22]
 8006974:	429a      	cmp	r2, r3
 8006976:	d8a4      	bhi.n	80068c2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006978:	bf00      	nop
 800697a:	3728      	adds	r7, #40	; 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781a      	ldrb	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785a      	ldrb	r2, [r3, #1]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	789a      	ldrb	r2, [r3, #2]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	78da      	ldrb	r2, [r3, #3]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	791a      	ldrb	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	795a      	ldrb	r2, [r3, #5]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	799a      	ldrb	r2, [r3, #6]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	79da      	ldrb	r2, [r3, #7]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	7a1a      	ldrb	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	721a      	strb	r2, [r3, #8]
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	785a      	ldrb	r2, [r3, #1]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	789a      	ldrb	r2, [r3, #2]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	78da      	ldrb	r2, [r3, #3]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	3305      	adds	r3, #5
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	799a      	ldrb	r2, [r3, #6]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	719a      	strb	r2, [r3, #6]
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d120      	bne.n	8006a92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	1e9a      	subs	r2, r3, #2
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	bf28      	it	cs
 8006a5c:	4613      	movcs	r3, r2
 8006a5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3302      	adds	r3, #2
 8006a64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006a66:	2300      	movs	r3, #0
 8006a68:	82fb      	strh	r3, [r7, #22]
 8006a6a:	e00b      	b.n	8006a84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006a6c:	8afb      	ldrh	r3, [r7, #22]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006a7e:	8afb      	ldrh	r3, [r7, #22]
 8006a80:	3302      	adds	r3, #2
 8006a82:	82fb      	strh	r3, [r7, #22]
 8006a84:	8afa      	ldrh	r2, [r7, #22]
 8006a86:	8abb      	ldrh	r3, [r7, #20]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d3ef      	bcc.n	8006a6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
  }
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	881a      	ldrh	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	789b      	ldrb	r3, [r3, #2]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d002      	beq.n	8006af4 <USBH_CtlReq+0x20>
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d00f      	beq.n	8006b12 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006af2:	e034      	b.n	8006b5e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
    break;
 8006b10:	e025      	b.n	8006b5e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f828 	bl	8006b68 <USBH_HandleControl>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	75fb      	strb	r3, [r7, #23]
    break;
 8006b32:	e013      	b.n	8006b5c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d108      	bne.n	8006b4c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006b46:	2303      	movs	r3, #3
 8006b48:	75fb      	strb	r3, [r7, #23]
    break;
 8006b4a:	e007      	b.n	8006b5c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d104      	bne.n	8006b5c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	75fb      	strb	r3, [r7, #23]
    break;
 8006b5c:	bf00      	nop
  }
  return status;
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7e1b      	ldrb	r3, [r3, #24]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	2b0a      	cmp	r3, #10
 8006b80:	f200 814c 	bhi.w	8006e1c <USBH_HandleControl+0x2b4>
 8006b84:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <USBH_HandleControl+0x24>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	08006bd3 	.word	0x08006bd3
 8006b94:	08006c3d 	.word	0x08006c3d
 8006b98:	08006c63 	.word	0x08006c63
 8006b9c:	08006c9b 	.word	0x08006c9b
 8006ba0:	08006cc7 	.word	0x08006cc7
 8006ba4:	08006d19 	.word	0x08006d19
 8006ba8:	08006d3b 	.word	0x08006d3b
 8006bac:	08006d77 	.word	0x08006d77
 8006bb0:	08006d9f 	.word	0x08006d9f
 8006bb4:	08006ddd 	.word	0x08006ddd
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f103 0110 	add.w	r1, r3, #16
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	795b      	ldrb	r3, [r3, #5]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f939 	bl	8006e3c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	761a      	strb	r2, [r3, #24]
    break;
 8006bd0:	e12f      	b.n	8006e32 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	795b      	ldrb	r3, [r3, #5]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f9cb 	bl	8007f74 <USBH_LL_GetURBState>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d11e      	bne.n	8006c26 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7c1b      	ldrb	r3, [r3, #16]
 8006bec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bf0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8adb      	ldrh	r3, [r3, #22]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	2b80      	cmp	r3, #128	; 0x80
 8006bfe:	d103      	bne.n	8006c08 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2203      	movs	r2, #3
 8006c04:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c06:	e10b      	b.n	8006e20 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2205      	movs	r2, #5
 8006c0c:	761a      	strb	r2, [r3, #24]
    break;
 8006c0e:	e107      	b.n	8006e20 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006c10:	7b7b      	ldrb	r3, [r7, #13]
 8006c12:	2b80      	cmp	r3, #128	; 0x80
 8006c14:	d103      	bne.n	8006c1e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2209      	movs	r2, #9
 8006c1a:	761a      	strb	r2, [r3, #24]
    break;
 8006c1c:	e100      	b.n	8006e20 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2207      	movs	r2, #7
 8006c22:	761a      	strb	r2, [r3, #24]
    break;
 8006c24:	e0fc      	b.n	8006e20 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d003      	beq.n	8006c34 <USBH_HandleControl+0xcc>
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	f040 80f6 	bne.w	8006e20 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	220b      	movs	r2, #11
 8006c38:	761a      	strb	r2, [r3, #24]
    break;
 8006c3a:	e0f1      	b.n	8006e20 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6899      	ldr	r1, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	899a      	ldrh	r2, [r3, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	791b      	ldrb	r3, [r3, #4]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f930 	bl	8006eba <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	761a      	strb	r2, [r3, #24]
    break;
 8006c60:	e0e7      	b.n	8006e32 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f983 	bl	8007f74 <USBH_LL_GetURBState>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d102      	bne.n	8006c7e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2209      	movs	r2, #9
 8006c7c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b05      	cmp	r3, #5
 8006c82:	d102      	bne.n	8006c8a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006c84:	2303      	movs	r3, #3
 8006c86:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c88:	e0cc      	b.n	8006e24 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	f040 80c9 	bne.w	8006e24 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	220b      	movs	r2, #11
 8006c96:	761a      	strb	r2, [r3, #24]
    break;
 8006c98:	e0c4      	b.n	8006e24 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6899      	ldr	r1, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	899a      	ldrh	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7958      	ldrb	r0, [r3, #5]
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	4603      	mov	r3, r0
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8df 	bl	8006e70 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2206      	movs	r2, #6
 8006cc2:	761a      	strb	r2, [r3, #24]
    break;
 8006cc4:	e0b5      	b.n	8006e32 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	795b      	ldrb	r3, [r3, #5]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 f951 	bl	8007f74 <USBH_LL_GetURBState>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d103      	bne.n	8006ce4 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2207      	movs	r2, #7
 8006ce0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ce2:	e0a1      	b.n	8006e28 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	d105      	bne.n	8006cf6 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	220c      	movs	r2, #12
 8006cee:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf4:	e098      	b.n	8006e28 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d103      	bne.n	8006d04 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2205      	movs	r2, #5
 8006d00:	761a      	strb	r2, [r3, #24]
    break;
 8006d02:	e091      	b.n	8006e28 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	f040 808e 	bne.w	8006e28 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	220b      	movs	r2, #11
 8006d10:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006d12:	2302      	movs	r3, #2
 8006d14:	73fb      	strb	r3, [r7, #15]
    break;
 8006d16:	e087      	b.n	8006e28 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	791b      	ldrb	r3, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f8ca 	bl	8006eba <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2208      	movs	r2, #8
 8006d36:	761a      	strb	r2, [r3, #24]

    break;
 8006d38:	e07b      	b.n	8006e32 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	791b      	ldrb	r3, [r3, #4]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f917 	bl	8007f74 <USBH_LL_GetURBState>
 8006d46:	4603      	mov	r3, r0
 8006d48:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d105      	bne.n	8006d5c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	220d      	movs	r2, #13
 8006d54:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d5a:	e067      	b.n	8006e2c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d103      	bne.n	8006d6a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	220b      	movs	r2, #11
 8006d66:	761a      	strb	r2, [r3, #24]
    break;
 8006d68:	e060      	b.n	8006e2c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b05      	cmp	r3, #5
 8006d6e:	d15d      	bne.n	8006e2c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006d70:	2303      	movs	r3, #3
 8006d72:	73fb      	strb	r3, [r7, #15]
    break;
 8006d74:	e05a      	b.n	8006e2c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	795a      	ldrb	r2, [r3, #5]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	2200      	movs	r2, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f873 	bl	8006e70 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	220a      	movs	r2, #10
 8006d9a:	761a      	strb	r2, [r3, #24]
    break;
 8006d9c:	e049      	b.n	8006e32 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	795b      	ldrb	r3, [r3, #5]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f8e5 	bl	8007f74 <USBH_LL_GetURBState>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	220d      	movs	r2, #13
 8006dbc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006dbe:	e037      	b.n	8006e30 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d103      	bne.n	8006dce <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2209      	movs	r2, #9
 8006dca:	761a      	strb	r2, [r3, #24]
    break;
 8006dcc:	e030      	b.n	8006e30 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d12d      	bne.n	8006e30 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	220b      	movs	r2, #11
 8006dd8:	761a      	strb	r2, [r3, #24]
    break;
 8006dda:	e029      	b.n	8006e30 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7e5b      	ldrb	r3, [r3, #25]
 8006de0:	3301      	adds	r3, #1
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	765a      	strb	r2, [r3, #25]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7e5b      	ldrb	r3, [r3, #25]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d809      	bhi.n	8006e04 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 ffd2 	bl	8007d9a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006e02:	e016      	b.n	8006e32 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e0a:	2106      	movs	r1, #6
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	73fb      	strb	r3, [r7, #15]
    break;
 8006e1a:	e00a      	b.n	8006e32 <USBH_HandleControl+0x2ca>

  default:
    break;
 8006e1c:	bf00      	nop
 8006e1e:	e008      	b.n	8006e32 <USBH_HandleControl+0x2ca>
    break;
 8006e20:	bf00      	nop
 8006e22:	e006      	b.n	8006e32 <USBH_HandleControl+0x2ca>
    break;
 8006e24:	bf00      	nop
 8006e26:	e004      	b.n	8006e32 <USBH_HandleControl+0x2ca>
    break;
 8006e28:	bf00      	nop
 8006e2a:	e002      	b.n	8006e32 <USBH_HandleControl+0x2ca>
    break;
 8006e2c:	bf00      	nop
 8006e2e:	e000      	b.n	8006e32 <USBH_HandleControl+0x2ca>
    break;
 8006e30:	bf00      	nop
  }
  return status;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af04      	add	r7, sp, #16
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e4a:	79f9      	ldrb	r1, [r7, #7]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	2308      	movs	r3, #8
 8006e52:	9302      	str	r3, [sp, #8]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2200      	movs	r2, #0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f001 f856 	bl	8007f12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af04      	add	r7, sp, #16
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	460b      	mov	r3, r1
 8006e80:	80fb      	strh	r3, [r7, #6]
 8006e82:	4613      	mov	r3, r2
 8006e84:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e94:	7979      	ldrb	r1, [r7, #5]
 8006e96:	7e3b      	ldrb	r3, [r7, #24]
 8006e98:	9303      	str	r3, [sp, #12]
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f001 f831 	bl	8007f12 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b088      	sub	sp, #32
 8006ebe:	af04      	add	r7, sp, #16
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	460b      	mov	r3, r1
 8006eca:	80fb      	strh	r3, [r7, #6]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ed0:	7979      	ldrb	r1, [r7, #5]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	9303      	str	r3, [sp, #12]
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f001 f813 	bl	8007f12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006eec:	2300      	movs	r3, #0

}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af04      	add	r7, sp, #16
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	4611      	mov	r1, r2
 8006f02:	461a      	mov	r2, r3
 8006f04:	460b      	mov	r3, r1
 8006f06:	80fb      	strh	r3, [r7, #6]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f1a:	7979      	ldrb	r1, [r7, #5]
 8006f1c:	7e3b      	ldrb	r3, [r7, #24]
 8006f1e:	9303      	str	r3, [sp, #12]
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	9302      	str	r3, [sp, #8]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	2301      	movs	r3, #1
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 ffee 	bl	8007f12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af04      	add	r7, sp, #16
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	460b      	mov	r3, r1
 8006f50:	80fb      	strh	r3, [r7, #6]
 8006f52:	4613      	mov	r3, r2
 8006f54:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f56:	7979      	ldrb	r1, [r7, #5]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9303      	str	r3, [sp, #12]
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	2301      	movs	r3, #1
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 ffd0 	bl	8007f12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af04      	add	r7, sp, #16
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	70fb      	strb	r3, [r7, #3]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70bb      	strb	r3, [r7, #2]
 8006f92:	4613      	mov	r3, r2
 8006f94:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006f96:	7878      	ldrb	r0, [r7, #1]
 8006f98:	78ba      	ldrb	r2, [r7, #2]
 8006f9a:	78f9      	ldrb	r1, [r7, #3]
 8006f9c:	8b3b      	ldrh	r3, [r7, #24]
 8006f9e:	9302      	str	r3, [sp, #8]
 8006fa0:	7d3b      	ldrb	r3, [r7, #20]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	7c3b      	ldrb	r3, [r7, #16]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 ff63 	bl	8007e76 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006fb0:	2300      	movs	r3, #0

}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 ff82 	bl	8007ed4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006fd0:	2300      	movs	r3, #0

}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f831 	bl	800704e <USBH_GetFreePipe>
 8006fec:	4603      	mov	r3, r0
 8006fee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	89fa      	ldrh	r2, [r7, #14]
 8006ffe:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	32e0      	adds	r2, #224	; 0xe0
 8007006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800700a:	89fb      	ldrh	r3, [r7, #14]
 800700c:	b2db      	uxtb	r3, r3
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	2b0a      	cmp	r3, #10
 8007026:	d80b      	bhi.n	8007040 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007028:	78fa      	ldrb	r2, [r7, #3]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	32e0      	adds	r2, #224	; 0xe0
 800702e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007032:	78fa      	ldrb	r2, [r7, #3]
 8007034:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	32e0      	adds	r2, #224	; 0xe0
 800703c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
 800705e:	e00e      	b.n	800707e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007060:	7bfa      	ldrb	r2, [r7, #15]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	32e0      	adds	r2, #224	; 0xe0
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	b29b      	uxth	r3, r3
 8007076:	e007      	b.n	8007088 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	3301      	adds	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b0a      	cmp	r3, #10
 8007082:	d9ed      	bls.n	8007060 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007084:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
//  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);

  switch(TIM4->ARR){
 800709e:	4b13      	ldr	r3, [pc, #76]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	f240 52db 	movw	r2, #1499	; 0x5db
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d104      	bne.n	80070b4 <HAL_GPIO_EXTI_Callback+0x20>
  case 1499:
	  TIM4->ARR = 299;
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070ac:	f240 122b 	movw	r2, #299	; 0x12b
 80070b0:	62da      	str	r2, [r3, #44]	; 0x2c
	  break;
 80070b2:	e004      	b.n	80070be <HAL_GPIO_EXTI_Callback+0x2a>
  default:
	  TIM4->ARR = 1499;
 80070b4:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070b6:	f240 52db 	movw	r2, #1499	; 0x5db
 80070ba:	62da      	str	r2, [r3, #44]	; 0x2c
	  break;
 80070bc:	bf00      	nop
  }

  TIM4->CNT = 0;
 80070be:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CCR1 = TIM4->ARR / 2;
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4a08      	ldr	r2, [pc, #32]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	6353      	str	r3, [r2, #52]	; 0x34
  TIM4->CCR3 = TIM4->ARR / 2;
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	4a06      	ldr	r2, [pc, #24]	; (80070ec <HAL_GPIO_EXTI_Callback+0x58>)
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	63d3      	str	r3, [r2, #60]	; 0x3c
  HAL_Delay(100);
 80070d8:	2064      	movs	r0, #100	; 0x64
 80070da:	f7f9 fa67 	bl	80005ac <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070de:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80070e0:	88fb      	ldrh	r3, [r7, #6]
 80070e2:	6153      	str	r3, [r2, #20]


}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40013c00 	.word	0x40013c00

080070f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80070f8:	f7f9 f9e6 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070fc:	f000 f81a 	bl	8007134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007100:	f000 f9b2 	bl	8007468 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007104:	f000 f898 	bl	8007238 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007108:	f000 f8c4 	bl	8007294 <MX_I2S3_Init>
  MX_SPI1_Init();
 800710c:	f000 f8f2 	bl	80072f4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8007110:	f000 fcd8 	bl	8007ac4 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8007114:	f000 f924 	bl	8007360 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8007118:	2100      	movs	r1, #0
 800711a:	4805      	ldr	r0, [pc, #20]	; (8007130 <main+0x3c>)
 800711c:	f7fc fd94 	bl	8003c48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8007120:	2108      	movs	r1, #8
 8007122:	4803      	ldr	r0, [pc, #12]	; (8007130 <main+0x3c>)
 8007124:	f7fc fd90 	bl	8003c48 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007128:	f000 fcf2 	bl	8007b10 <MX_USB_HOST_Process>
 800712c:	e7fc      	b.n	8007128 <main+0x34>
 800712e:	bf00      	nop
 8007130:	200000c4 	.word	0x200000c4

08007134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b098      	sub	sp, #96	; 0x60
 8007138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800713a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800713e:	2230      	movs	r2, #48	; 0x30
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f001 f82a 	bl	800819c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007148:	f107 031c 	add.w	r3, r7, #28
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007158:	f107 030c 	add.w	r3, r7, #12
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
 8007164:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007166:	2300      	movs	r3, #0
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	4b31      	ldr	r3, [pc, #196]	; (8007230 <SystemClock_Config+0xfc>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	4a30      	ldr	r2, [pc, #192]	; (8007230 <SystemClock_Config+0xfc>)
 8007170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007174:	6413      	str	r3, [r2, #64]	; 0x40
 8007176:	4b2e      	ldr	r3, [pc, #184]	; (8007230 <SystemClock_Config+0xfc>)
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800717e:	60bb      	str	r3, [r7, #8]
 8007180:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007182:	2300      	movs	r3, #0
 8007184:	607b      	str	r3, [r7, #4]
 8007186:	4b2b      	ldr	r3, [pc, #172]	; (8007234 <SystemClock_Config+0x100>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a2a      	ldr	r2, [pc, #168]	; (8007234 <SystemClock_Config+0x100>)
 800718c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	4b28      	ldr	r3, [pc, #160]	; (8007234 <SystemClock_Config+0x100>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719a:	607b      	str	r3, [r7, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800719e:	2301      	movs	r3, #1
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80071a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071a8:	2302      	movs	r3, #2
 80071aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80071b2:	2308      	movs	r3, #8
 80071b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80071b6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80071ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80071bc:	2302      	movs	r3, #2
 80071be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80071c0:	2307      	movs	r3, #7
 80071c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fb ff1f 	bl	800300c <HAL_RCC_OscConfig>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80071d4:	f000 fa50 	bl	8007678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071d8:	230f      	movs	r3, #15
 80071da:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071dc:	2302      	movs	r3, #2
 80071de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071e0:	2300      	movs	r3, #0
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80071e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80071ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80071f0:	f107 031c 	add.w	r3, r7, #28
 80071f4:	2105      	movs	r1, #5
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fc f94a 	bl	8003490 <HAL_RCC_ClockConfig>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007202:	f000 fa39 	bl	8007678 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007206:	2301      	movs	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800720a:	23c0      	movs	r3, #192	; 0xc0
 800720c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800720e:	2302      	movs	r3, #2
 8007210:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007212:	f107 030c 	add.w	r3, r7, #12
 8007216:	4618      	mov	r0, r3
 8007218:	f7fc fb14 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007222:	f000 fa29 	bl	8007678 <Error_Handler>
  }
}
 8007226:	bf00      	nop
 8007228:	3760      	adds	r7, #96	; 0x60
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40023800 	.word	0x40023800
 8007234:	40007000 	.word	0x40007000

08007238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <MX_I2C1_Init+0x50>)
 800723e:	4a13      	ldr	r2, [pc, #76]	; (800728c <MX_I2C1_Init+0x54>)
 8007240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <MX_I2C1_Init+0x50>)
 8007244:	4a12      	ldr	r2, [pc, #72]	; (8007290 <MX_I2C1_Init+0x58>)
 8007246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007248:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <MX_I2C1_Init+0x50>)
 800724a:	2200      	movs	r2, #0
 800724c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800724e:	4b0e      	ldr	r3, [pc, #56]	; (8007288 <MX_I2C1_Init+0x50>)
 8007250:	2200      	movs	r2, #0
 8007252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007254:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <MX_I2C1_Init+0x50>)
 8007256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800725a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <MX_I2C1_Init+0x50>)
 800725e:	2200      	movs	r2, #0
 8007260:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <MX_I2C1_Init+0x50>)
 8007264:	2200      	movs	r2, #0
 8007266:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007268:	4b07      	ldr	r3, [pc, #28]	; (8007288 <MX_I2C1_Init+0x50>)
 800726a:	2200      	movs	r2, #0
 800726c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <MX_I2C1_Init+0x50>)
 8007270:	2200      	movs	r2, #0
 8007272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007274:	4804      	ldr	r0, [pc, #16]	; (8007288 <MX_I2C1_Init+0x50>)
 8007276:	f7fb f901 	bl	800247c <HAL_I2C_Init>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007280:	f000 f9fa 	bl	8007678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007284:	bf00      	nop
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000104 	.word	0x20000104
 800728c:	40005400 	.word	0x40005400
 8007290:	000186a0 	.word	0x000186a0

08007294 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <MX_I2S3_Init+0x54>)
 800729a:	4a14      	ldr	r2, [pc, #80]	; (80072ec <MX_I2S3_Init+0x58>)
 800729c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800729e:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80072ac:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072bc:	4a0c      	ldr	r2, [pc, #48]	; (80072f0 <MX_I2S3_Init+0x5c>)
 80072be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80072d2:	4805      	ldr	r0, [pc, #20]	; (80072e8 <MX_I2S3_Init+0x54>)
 80072d4:	f7fb f9fa 	bl	80026cc <HAL_I2S_Init>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80072de:	f000 f9cb 	bl	8007678 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80072e2:	bf00      	nop
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	200001b0 	.word	0x200001b0
 80072ec:	40003c00 	.word	0x40003c00
 80072f0:	00017700 	.word	0x00017700

080072f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80072f8:	4b17      	ldr	r3, [pc, #92]	; (8007358 <MX_SPI1_Init+0x64>)
 80072fa:	4a18      	ldr	r2, [pc, #96]	; (800735c <MX_SPI1_Init+0x68>)
 80072fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80072fe:	4b16      	ldr	r3, [pc, #88]	; (8007358 <MX_SPI1_Init+0x64>)
 8007300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <MX_SPI1_Init+0x64>)
 8007308:	2200      	movs	r2, #0
 800730a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <MX_SPI1_Init+0x64>)
 800730e:	2200      	movs	r2, #0
 8007310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007312:	4b11      	ldr	r3, [pc, #68]	; (8007358 <MX_SPI1_Init+0x64>)
 8007314:	2200      	movs	r2, #0
 8007316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007318:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <MX_SPI1_Init+0x64>)
 800731a:	2200      	movs	r2, #0
 800731c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800731e:	4b0e      	ldr	r3, [pc, #56]	; (8007358 <MX_SPI1_Init+0x64>)
 8007320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007326:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <MX_SPI1_Init+0x64>)
 8007328:	2200      	movs	r2, #0
 800732a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800732c:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <MX_SPI1_Init+0x64>)
 800732e:	2200      	movs	r2, #0
 8007330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <MX_SPI1_Init+0x64>)
 8007334:	2200      	movs	r2, #0
 8007336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <MX_SPI1_Init+0x64>)
 800733a:	2200      	movs	r2, #0
 800733c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800733e:	4b06      	ldr	r3, [pc, #24]	; (8007358 <MX_SPI1_Init+0x64>)
 8007340:	220a      	movs	r2, #10
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007344:	4804      	ldr	r0, [pc, #16]	; (8007358 <MX_SPI1_Init+0x64>)
 8007346:	f7fc fbbb 	bl	8003ac0 <HAL_SPI_Init>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007350:	f000 f992 	bl	8007678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007354:	bf00      	nop
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20000158 	.word	0x20000158
 800735c:	40013000 	.word	0x40013000

08007360 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08e      	sub	sp, #56	; 0x38
 8007364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	605a      	str	r2, [r3, #4]
 8007370:	609a      	str	r2, [r3, #8]
 8007372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007374:	f107 0320 	add.w	r3, r7, #32
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800737e:	1d3b      	adds	r3, r7, #4
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	60da      	str	r2, [r3, #12]
 800738a:	611a      	str	r2, [r3, #16]
 800738c:	615a      	str	r2, [r3, #20]
 800738e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007390:	4b33      	ldr	r3, [pc, #204]	; (8007460 <MX_TIM4_Init+0x100>)
 8007392:	4a34      	ldr	r2, [pc, #208]	; (8007464 <MX_TIM4_Init+0x104>)
 8007394:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8007396:	4b32      	ldr	r3, [pc, #200]	; (8007460 <MX_TIM4_Init+0x100>)
 8007398:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800739c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800739e:	4b30      	ldr	r3, [pc, #192]	; (8007460 <MX_TIM4_Init+0x100>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1499;
 80073a4:	4b2e      	ldr	r3, [pc, #184]	; (8007460 <MX_TIM4_Init+0x100>)
 80073a6:	f240 52db 	movw	r2, #1499	; 0x5db
 80073aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073ac:	4b2c      	ldr	r3, [pc, #176]	; (8007460 <MX_TIM4_Init+0x100>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80073b2:	4b2b      	ldr	r3, [pc, #172]	; (8007460 <MX_TIM4_Init+0x100>)
 80073b4:	2280      	movs	r2, #128	; 0x80
 80073b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80073b8:	4829      	ldr	r0, [pc, #164]	; (8007460 <MX_TIM4_Init+0x100>)
 80073ba:	f7fc fbe5 	bl	8003b88 <HAL_TIM_Base_Init>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80073c4:	f000 f958 	bl	8007678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80073ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073d2:	4619      	mov	r1, r3
 80073d4:	4822      	ldr	r0, [pc, #136]	; (8007460 <MX_TIM4_Init+0x100>)
 80073d6:	f7fc fd3b 	bl	8003e50 <HAL_TIM_ConfigClockSource>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80073e0:	f000 f94a 	bl	8007678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80073e4:	481e      	ldr	r0, [pc, #120]	; (8007460 <MX_TIM4_Init+0x100>)
 80073e6:	f7fc fbfa 	bl	8003bde <HAL_TIM_PWM_Init>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80073f0:	f000 f942 	bl	8007678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073f4:	2300      	movs	r3, #0
 80073f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073f8:	2300      	movs	r3, #0
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80073fc:	f107 0320 	add.w	r3, r7, #32
 8007400:	4619      	mov	r1, r3
 8007402:	4817      	ldr	r0, [pc, #92]	; (8007460 <MX_TIM4_Init+0x100>)
 8007404:	f7fd f8eb 	bl	80045de <HAL_TIMEx_MasterConfigSynchronization>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800740e:	f000 f933 	bl	8007678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007412:	2360      	movs	r3, #96	; 0x60
 8007414:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750;
 8007416:	f240 23ee 	movw	r3, #750	; 0x2ee
 800741a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	2200      	movs	r2, #0
 8007428:	4619      	mov	r1, r3
 800742a:	480d      	ldr	r0, [pc, #52]	; (8007460 <MX_TIM4_Init+0x100>)
 800742c:	f7fc fc4a 	bl	8003cc4 <HAL_TIM_PWM_ConfigChannel>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8007436:	f000 f91f 	bl	8007678 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	2208      	movs	r2, #8
 800743e:	4619      	mov	r1, r3
 8007440:	4807      	ldr	r0, [pc, #28]	; (8007460 <MX_TIM4_Init+0x100>)
 8007442:	f7fc fc3f 	bl	8003cc4 <HAL_TIM_PWM_ConfigChannel>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800744c:	f000 f914 	bl	8007678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007450:	4803      	ldr	r0, [pc, #12]	; (8007460 <MX_TIM4_Init+0x100>)
 8007452:	f000 fa5b 	bl	800790c <HAL_TIM_MspPostInit>

}
 8007456:	bf00      	nop
 8007458:	3738      	adds	r7, #56	; 0x38
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	200000c4 	.word	0x200000c4
 8007464:	40000800 	.word	0x40000800

08007468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08c      	sub	sp, #48	; 0x30
 800746c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800746e:	f107 031c 	add.w	r3, r7, #28
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	605a      	str	r2, [r3, #4]
 8007478:	609a      	str	r2, [r3, #8]
 800747a:	60da      	str	r2, [r3, #12]
 800747c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	4b75      	ldr	r3, [pc, #468]	; (8007658 <MX_GPIO_Init+0x1f0>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	4a74      	ldr	r2, [pc, #464]	; (8007658 <MX_GPIO_Init+0x1f0>)
 8007488:	f043 0310 	orr.w	r3, r3, #16
 800748c:	6313      	str	r3, [r2, #48]	; 0x30
 800748e:	4b72      	ldr	r3, [pc, #456]	; (8007658 <MX_GPIO_Init+0x1f0>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	4b6e      	ldr	r3, [pc, #440]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	4a6d      	ldr	r2, [pc, #436]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074a4:	f043 0304 	orr.w	r3, r3, #4
 80074a8:	6313      	str	r3, [r2, #48]	; 0x30
 80074aa:	4b6b      	ldr	r3, [pc, #428]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	4b67      	ldr	r3, [pc, #412]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	4a66      	ldr	r2, [pc, #408]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	6313      	str	r3, [r2, #48]	; 0x30
 80074c6:	4b64      	ldr	r3, [pc, #400]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	4b60      	ldr	r3, [pc, #384]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	4a5f      	ldr	r2, [pc, #380]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	6313      	str	r3, [r2, #48]	; 0x30
 80074e2:	4b5d      	ldr	r3, [pc, #372]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]
 80074f2:	4b59      	ldr	r3, [pc, #356]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	4a58      	ldr	r2, [pc, #352]	; (8007658 <MX_GPIO_Init+0x1f0>)
 80074f8:	f043 0302 	orr.w	r3, r3, #2
 80074fc:	6313      	str	r3, [r2, #48]	; 0x30
 80074fe:	4b56      	ldr	r3, [pc, #344]	; (8007658 <MX_GPIO_Init+0x1f0>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	60bb      	str	r3, [r7, #8]
 8007508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800750a:	2300      	movs	r3, #0
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	4b52      	ldr	r3, [pc, #328]	; (8007658 <MX_GPIO_Init+0x1f0>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	4a51      	ldr	r2, [pc, #324]	; (8007658 <MX_GPIO_Init+0x1f0>)
 8007514:	f043 0308 	orr.w	r3, r3, #8
 8007518:	6313      	str	r3, [r2, #48]	; 0x30
 800751a:	4b4f      	ldr	r3, [pc, #316]	; (8007658 <MX_GPIO_Init+0x1f0>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	607b      	str	r3, [r7, #4]
 8007524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007526:	2200      	movs	r2, #0
 8007528:	2108      	movs	r1, #8
 800752a:	484c      	ldr	r0, [pc, #304]	; (800765c <MX_GPIO_Init+0x1f4>)
 800752c:	f7f9 fb0c 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007530:	2201      	movs	r2, #1
 8007532:	2101      	movs	r1, #1
 8007534:	484a      	ldr	r0, [pc, #296]	; (8007660 <MX_GPIO_Init+0x1f8>)
 8007536:	f7f9 fb07 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800753a:	2200      	movs	r2, #0
 800753c:	f24a 0110 	movw	r1, #40976	; 0xa010
 8007540:	4848      	ldr	r0, [pc, #288]	; (8007664 <MX_GPIO_Init+0x1fc>)
 8007542:	f7f9 fb01 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007546:	2308      	movs	r3, #8
 8007548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800754a:	2301      	movs	r3, #1
 800754c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754e:	2300      	movs	r3, #0
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	2300      	movs	r3, #0
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007556:	f107 031c 	add.w	r3, r7, #28
 800755a:	4619      	mov	r1, r3
 800755c:	483f      	ldr	r0, [pc, #252]	; (800765c <MX_GPIO_Init+0x1f4>)
 800755e:	f7f9 f959 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007562:	2301      	movs	r3, #1
 8007564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007566:	2301      	movs	r3, #1
 8007568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	2300      	movs	r3, #0
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800756e:	2300      	movs	r3, #0
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007572:	f107 031c 	add.w	r3, r7, #28
 8007576:	4619      	mov	r1, r3
 8007578:	4839      	ldr	r0, [pc, #228]	; (8007660 <MX_GPIO_Init+0x1f8>)
 800757a:	f7f9 f94b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800757e:	2308      	movs	r3, #8
 8007580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007582:	2302      	movs	r3, #2
 8007584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007586:	2300      	movs	r3, #0
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800758a:	2300      	movs	r3, #0
 800758c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800758e:	2305      	movs	r3, #5
 8007590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007592:	f107 031c 	add.w	r3, r7, #28
 8007596:	4619      	mov	r1, r3
 8007598:	4831      	ldr	r0, [pc, #196]	; (8007660 <MX_GPIO_Init+0x1f8>)
 800759a:	f7f9 f93b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800759e:	2301      	movs	r3, #1
 80075a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80075a2:	4b31      	ldr	r3, [pc, #196]	; (8007668 <MX_GPIO_Init+0x200>)
 80075a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075aa:	f107 031c 	add.w	r3, r7, #28
 80075ae:	4619      	mov	r1, r3
 80075b0:	482e      	ldr	r0, [pc, #184]	; (800766c <MX_GPIO_Init+0x204>)
 80075b2:	f7f9 f92f 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80075b6:	2304      	movs	r3, #4
 80075b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075ba:	2300      	movs	r3, #0
 80075bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80075c2:	f107 031c 	add.w	r3, r7, #28
 80075c6:	4619      	mov	r1, r3
 80075c8:	4829      	ldr	r0, [pc, #164]	; (8007670 <MX_GPIO_Init+0x208>)
 80075ca:	f7f9 f923 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80075ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d4:	2302      	movs	r3, #2
 80075d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075dc:	2300      	movs	r3, #0
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80075e0:	2305      	movs	r3, #5
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80075e4:	f107 031c 	add.w	r3, r7, #28
 80075e8:	4619      	mov	r1, r3
 80075ea:	4821      	ldr	r0, [pc, #132]	; (8007670 <MX_GPIO_Init+0x208>)
 80075ec:	f7f9 f912 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD6_Pin|Audio_RST_Pin;
 80075f0:	f24a 0310 	movw	r3, #40976	; 0xa010
 80075f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075f6:	2301      	movs	r3, #1
 80075f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075fe:	2300      	movs	r3, #0
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007602:	f107 031c 	add.w	r3, r7, #28
 8007606:	4619      	mov	r1, r3
 8007608:	4816      	ldr	r0, [pc, #88]	; (8007664 <MX_GPIO_Init+0x1fc>)
 800760a:	f7f9 f903 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800760e:	2320      	movs	r3, #32
 8007610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007612:	2300      	movs	r3, #0
 8007614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007616:	2300      	movs	r3, #0
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800761a:	f107 031c 	add.w	r3, r7, #28
 800761e:	4619      	mov	r1, r3
 8007620:	4810      	ldr	r0, [pc, #64]	; (8007664 <MX_GPIO_Init+0x1fc>)
 8007622:	f7f9 f8f7 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007626:	2302      	movs	r3, #2
 8007628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <MX_GPIO_Init+0x20c>)
 800762c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007632:	f107 031c 	add.w	r3, r7, #28
 8007636:	4619      	mov	r1, r3
 8007638:	4808      	ldr	r0, [pc, #32]	; (800765c <MX_GPIO_Init+0x1f4>)
 800763a:	f7f9 f8eb 	bl	8000814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800763e:	2200      	movs	r2, #0
 8007640:	2101      	movs	r1, #1
 8007642:	2006      	movs	r0, #6
 8007644:	f7f9 f8af 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007648:	2006      	movs	r0, #6
 800764a:	f7f9 f8c8 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 800764e:	bf00      	nop
 8007650:	3730      	adds	r7, #48	; 0x30
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40023800 	.word	0x40023800
 800765c:	40021000 	.word	0x40021000
 8007660:	40020800 	.word	0x40020800
 8007664:	40020c00 	.word	0x40020c00
 8007668:	10110000 	.word	0x10110000
 800766c:	40020000 	.word	0x40020000
 8007670:	40020400 	.word	0x40020400
 8007674:	10120000 	.word	0x10120000

08007678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800767c:	bf00      	nop
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800768e:	2300      	movs	r3, #0
 8007690:	607b      	str	r3, [r7, #4]
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <HAL_MspInit+0x4c>)
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	4a0f      	ldr	r2, [pc, #60]	; (80076d4 <HAL_MspInit+0x4c>)
 8007698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800769c:	6453      	str	r3, [r2, #68]	; 0x44
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <HAL_MspInit+0x4c>)
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a6:	607b      	str	r3, [r7, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <HAL_MspInit+0x4c>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <HAL_MspInit+0x4c>)
 80076b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b8:	6413      	str	r3, [r2, #64]	; 0x40
 80076ba:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <HAL_MspInit+0x4c>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80076c6:	2006      	movs	r0, #6
 80076c8:	f7f9 f862 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	40023800 	.word	0x40023800

080076d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08a      	sub	sp, #40	; 0x28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076e0:	f107 0314 	add.w	r3, r7, #20
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	609a      	str	r2, [r3, #8]
 80076ec:	60da      	str	r2, [r3, #12]
 80076ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a19      	ldr	r2, [pc, #100]	; (800775c <HAL_I2C_MspInit+0x84>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d12c      	bne.n	8007754 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076fa:	2300      	movs	r3, #0
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	4b18      	ldr	r3, [pc, #96]	; (8007760 <HAL_I2C_MspInit+0x88>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	4a17      	ldr	r2, [pc, #92]	; (8007760 <HAL_I2C_MspInit+0x88>)
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	6313      	str	r3, [r2, #48]	; 0x30
 800770a:	4b15      	ldr	r3, [pc, #84]	; (8007760 <HAL_I2C_MspInit+0x88>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007716:	f44f 7310 	mov.w	r3, #576	; 0x240
 800771a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800771c:	2312      	movs	r3, #18
 800771e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007720:	2301      	movs	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007724:	2300      	movs	r3, #0
 8007726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007728:	2304      	movs	r3, #4
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	4619      	mov	r1, r3
 8007732:	480c      	ldr	r0, [pc, #48]	; (8007764 <HAL_I2C_MspInit+0x8c>)
 8007734:	f7f9 f86e 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	4b08      	ldr	r3, [pc, #32]	; (8007760 <HAL_I2C_MspInit+0x88>)
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	4a07      	ldr	r2, [pc, #28]	; (8007760 <HAL_I2C_MspInit+0x88>)
 8007742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007746:	6413      	str	r3, [r2, #64]	; 0x40
 8007748:	4b05      	ldr	r3, [pc, #20]	; (8007760 <HAL_I2C_MspInit+0x88>)
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007754:	bf00      	nop
 8007756:	3728      	adds	r7, #40	; 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40005400 	.word	0x40005400
 8007760:	40023800 	.word	0x40023800
 8007764:	40020400 	.word	0x40020400

08007768 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007770:	f107 0314 	add.w	r3, r7, #20
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	609a      	str	r2, [r3, #8]
 800777c:	60da      	str	r2, [r3, #12]
 800777e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a28      	ldr	r2, [pc, #160]	; (8007828 <HAL_I2S_MspInit+0xc0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d14a      	bne.n	8007820 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	4b27      	ldr	r3, [pc, #156]	; (800782c <HAL_I2S_MspInit+0xc4>)
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	4a26      	ldr	r2, [pc, #152]	; (800782c <HAL_I2S_MspInit+0xc4>)
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	6413      	str	r3, [r2, #64]	; 0x40
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <HAL_I2S_MspInit+0xc4>)
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	4b20      	ldr	r3, [pc, #128]	; (800782c <HAL_I2S_MspInit+0xc4>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	4a1f      	ldr	r2, [pc, #124]	; (800782c <HAL_I2S_MspInit+0xc4>)
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	6313      	str	r3, [r2, #48]	; 0x30
 80077b6:	4b1d      	ldr	r3, [pc, #116]	; (800782c <HAL_I2S_MspInit+0xc4>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	4b19      	ldr	r3, [pc, #100]	; (800782c <HAL_I2S_MspInit+0xc4>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	4a18      	ldr	r2, [pc, #96]	; (800782c <HAL_I2S_MspInit+0xc4>)
 80077cc:	f043 0304 	orr.w	r3, r3, #4
 80077d0:	6313      	str	r3, [r2, #48]	; 0x30
 80077d2:	4b16      	ldr	r3, [pc, #88]	; (800782c <HAL_I2S_MspInit+0xc4>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	60bb      	str	r3, [r7, #8]
 80077dc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80077de:	2310      	movs	r3, #16
 80077e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e2:	2302      	movs	r3, #2
 80077e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077ea:	2300      	movs	r3, #0
 80077ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80077ee:	2306      	movs	r3, #6
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80077f2:	f107 0314 	add.w	r3, r7, #20
 80077f6:	4619      	mov	r1, r3
 80077f8:	480d      	ldr	r0, [pc, #52]	; (8007830 <HAL_I2S_MspInit+0xc8>)
 80077fa:	f7f9 f80b 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80077fe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007804:	2302      	movs	r3, #2
 8007806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007808:	2300      	movs	r3, #0
 800780a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800780c:	2300      	movs	r3, #0
 800780e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007810:	2306      	movs	r3, #6
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	4619      	mov	r1, r3
 800781a:	4806      	ldr	r0, [pc, #24]	; (8007834 <HAL_I2S_MspInit+0xcc>)
 800781c:	f7f8 fffa 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007820:	bf00      	nop
 8007822:	3728      	adds	r7, #40	; 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40003c00 	.word	0x40003c00
 800782c:	40023800 	.word	0x40023800
 8007830:	40020000 	.word	0x40020000
 8007834:	40020800 	.word	0x40020800

08007838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007840:	f107 0314 	add.w	r3, r7, #20
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	605a      	str	r2, [r3, #4]
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a19      	ldr	r2, [pc, #100]	; (80078bc <HAL_SPI_MspInit+0x84>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d12b      	bne.n	80078b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <HAL_SPI_MspInit+0x88>)
 8007860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007862:	4a17      	ldr	r2, [pc, #92]	; (80078c0 <HAL_SPI_MspInit+0x88>)
 8007864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007868:	6453      	str	r3, [r2, #68]	; 0x44
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <HAL_SPI_MspInit+0x88>)
 800786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <HAL_SPI_MspInit+0x88>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	4a10      	ldr	r2, [pc, #64]	; (80078c0 <HAL_SPI_MspInit+0x88>)
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	6313      	str	r3, [r2, #48]	; 0x30
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <HAL_SPI_MspInit+0x88>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007892:	23e0      	movs	r3, #224	; 0xe0
 8007894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007896:	2302      	movs	r3, #2
 8007898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800789e:	2300      	movs	r3, #0
 80078a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80078a2:	2305      	movs	r3, #5
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4619      	mov	r1, r3
 80078ac:	4805      	ldr	r0, [pc, #20]	; (80078c4 <HAL_SPI_MspInit+0x8c>)
 80078ae:	f7f8 ffb1 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80078b2:	bf00      	nop
 80078b4:	3728      	adds	r7, #40	; 0x28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40013000 	.word	0x40013000
 80078c0:	40023800 	.word	0x40023800
 80078c4:	40020000 	.word	0x40020000

080078c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <HAL_TIM_Base_MspInit+0x3c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d10d      	bne.n	80078f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <HAL_TIM_Base_MspInit+0x40>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <HAL_TIM_Base_MspInit+0x40>)
 80078e4:	f043 0304 	orr.w	r3, r3, #4
 80078e8:	6413      	str	r3, [r2, #64]	; 0x40
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <HAL_TIM_Base_MspInit+0x40>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40000800 	.word	0x40000800
 8007908:	40023800 	.word	0x40023800

0800790c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	609a      	str	r2, [r3, #8]
 8007920:	60da      	str	r2, [r3, #12]
 8007922:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a12      	ldr	r2, [pc, #72]	; (8007974 <HAL_TIM_MspPostInit+0x68>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d11e      	bne.n	800796c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	4b11      	ldr	r3, [pc, #68]	; (8007978 <HAL_TIM_MspPostInit+0x6c>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	4a10      	ldr	r2, [pc, #64]	; (8007978 <HAL_TIM_MspPostInit+0x6c>)
 8007938:	f043 0308 	orr.w	r3, r3, #8
 800793c:	6313      	str	r3, [r2, #48]	; 0x30
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <HAL_TIM_MspPostInit+0x6c>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800794a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800794e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007950:	2302      	movs	r3, #2
 8007952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007958:	2300      	movs	r3, #0
 800795a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800795c:	2302      	movs	r3, #2
 800795e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007960:	f107 030c 	add.w	r3, r7, #12
 8007964:	4619      	mov	r1, r3
 8007966:	4805      	ldr	r0, [pc, #20]	; (800797c <HAL_TIM_MspPostInit+0x70>)
 8007968:	f7f8 ff54 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800796c:	bf00      	nop
 800796e:	3720      	adds	r7, #32
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40000800 	.word	0x40000800
 8007978:	40023800 	.word	0x40023800
 800797c:	40020c00 	.word	0x40020c00

08007980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800798e:	b480      	push	{r7}
 8007990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007992:	e7fe      	b.n	8007992 <HardFault_Handler+0x4>

08007994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007998:	e7fe      	b.n	8007998 <MemManage_Handler+0x4>

0800799a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800799a:	b480      	push	{r7}
 800799c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800799e:	e7fe      	b.n	800799e <BusFault_Handler+0x4>

080079a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079a4:	e7fe      	b.n	80079a4 <UsageFault_Handler+0x4>

080079a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079a6:	b480      	push	{r7}
 80079a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079aa:	bf00      	nop
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079b8:	bf00      	nop
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079d4:	f7f8 fdca 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079d8:	bf00      	nop
 80079da:	bd80      	pop	{r7, pc}

080079dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80079e0:	2001      	movs	r0, #1
 80079e2:	f7f9 f8cb 	bl	8000b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80079f0:	4802      	ldr	r0, [pc, #8]	; (80079fc <OTG_FS_IRQHandler+0x10>)
 80079f2:	f7f9 fb61 	bl	80010b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80079f6:	bf00      	nop
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200005c4 	.word	0x200005c4

08007a00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a08:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <_sbrk+0x50>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <_sbrk+0x16>
		heap_end = &end;
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <_sbrk+0x50>)
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <_sbrk+0x54>)
 8007a14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a16:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <_sbrk+0x50>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <_sbrk+0x50>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4413      	add	r3, r2
 8007a24:	466a      	mov	r2, sp
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d907      	bls.n	8007a3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a2a:	f000 fb7d 	bl	8008128 <__errno>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	230c      	movs	r3, #12
 8007a32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a34:	f04f 33ff 	mov.w	r3, #4294967295
 8007a38:	e006      	b.n	8007a48 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <_sbrk+0x50>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4413      	add	r3, r2
 8007a42:	4a03      	ldr	r2, [pc, #12]	; (8007a50 <_sbrk+0x50>)
 8007a44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	200000b0 	.word	0x200000b0
 8007a54:	20000890 	.word	0x20000890

08007a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <SystemInit+0x60>)
 8007a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a62:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <SystemInit+0x60>)
 8007a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007a6c:	4b13      	ldr	r3, [pc, #76]	; (8007abc <SystemInit+0x64>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a12      	ldr	r2, [pc, #72]	; (8007abc <SystemInit+0x64>)
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007a78:	4b10      	ldr	r3, [pc, #64]	; (8007abc <SystemInit+0x64>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <SystemInit+0x64>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a0e      	ldr	r2, [pc, #56]	; (8007abc <SystemInit+0x64>)
 8007a84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <SystemInit+0x64>)
 8007a90:	4a0b      	ldr	r2, [pc, #44]	; (8007ac0 <SystemInit+0x68>)
 8007a92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <SystemInit+0x64>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a08      	ldr	r2, [pc, #32]	; (8007abc <SystemInit+0x64>)
 8007a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007aa0:	4b06      	ldr	r3, [pc, #24]	; (8007abc <SystemInit+0x64>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007aa6:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <SystemInit+0x60>)
 8007aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007aac:	609a      	str	r2, [r3, #8]
#endif
}
 8007aae:	bf00      	nop
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	e000ed00 	.word	0xe000ed00
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	24003010 	.word	0x24003010

08007ac4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	490e      	ldr	r1, [pc, #56]	; (8007b04 <MX_USB_HOST_Init+0x40>)
 8007acc:	480e      	ldr	r0, [pc, #56]	; (8007b08 <MX_USB_HOST_Init+0x44>)
 8007ace:	f7fe f8a3 	bl	8005c18 <USBH_Init>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ad8:	f7ff fdce 	bl	8007678 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007adc:	490b      	ldr	r1, [pc, #44]	; (8007b0c <MX_USB_HOST_Init+0x48>)
 8007ade:	480a      	ldr	r0, [pc, #40]	; (8007b08 <MX_USB_HOST_Init+0x44>)
 8007ae0:	f7fe f90d 	bl	8005cfe <USBH_RegisterClass>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007aea:	f7ff fdc5 	bl	8007678 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007aee:	4806      	ldr	r0, [pc, #24]	; (8007b08 <MX_USB_HOST_Init+0x44>)
 8007af0:	f7fe f992 	bl	8005e18 <USBH_Start>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007afa:	f7ff fdbd 	bl	8007678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007afe:	bf00      	nop
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	08007b25 	.word	0x08007b25
 8007b08:	200001f8 	.word	0x200001f8
 8007b0c:	20000008 	.word	0x20000008

08007b10 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007b14:	4802      	ldr	r0, [pc, #8]	; (8007b20 <MX_USB_HOST_Process+0x10>)
 8007b16:	f7fe f98f 	bl	8005e38 <USBH_Process>
}
 8007b1a:	bf00      	nop
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	200001f8 	.word	0x200001f8

08007b24 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d819      	bhi.n	8007b6c <USBH_UserProcess+0x48>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBH_UserProcess+0x1c>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	08007b5d 	.word	0x08007b5d
 8007b48:	08007b6d 	.word	0x08007b6d
 8007b4c:	08007b65 	.word	0x08007b65
 8007b50:	08007b55 	.word	0x08007b55
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007b54:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <USBH_UserProcess+0x58>)
 8007b56:	2203      	movs	r2, #3
 8007b58:	701a      	strb	r2, [r3, #0]
  break;
 8007b5a:	e008      	b.n	8007b6e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b5c:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <USBH_UserProcess+0x58>)
 8007b5e:	2202      	movs	r2, #2
 8007b60:	701a      	strb	r2, [r3, #0]
  break;
 8007b62:	e004      	b.n	8007b6e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b64:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <USBH_UserProcess+0x58>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	701a      	strb	r2, [r3, #0]
  break;
 8007b6a:	e000      	b.n	8007b6e <USBH_UserProcess+0x4a>

  default:
  break;
 8007b6c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	200000b4 	.word	0x200000b4

08007b80 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	; 0x28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	609a      	str	r2, [r3, #8]
 8007b94:	60da      	str	r2, [r3, #12]
 8007b96:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba0:	d147      	bne.n	8007c32 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	4a24      	ldr	r2, [pc, #144]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007bac:	f043 0301 	orr.w	r3, r3, #1
 8007bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007bb2:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	481b      	ldr	r0, [pc, #108]	; (8007c40 <HAL_HCD_MspInit+0xc0>)
 8007bd4:	f7f8 fe1e 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007bd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bde:	2302      	movs	r3, #2
 8007be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be6:	2300      	movs	r3, #0
 8007be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bea:	230a      	movs	r3, #10
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bee:	f107 0314 	add.w	r3, r7, #20
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4812      	ldr	r0, [pc, #72]	; (8007c40 <HAL_HCD_MspInit+0xc0>)
 8007bf6:	f7f8 fe0d 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfe:	4a0f      	ldr	r2, [pc, #60]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	6353      	str	r3, [r2, #52]	; 0x34
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0e:	4a0b      	ldr	r2, [pc, #44]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c14:	6453      	str	r3, [r2, #68]	; 0x44
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <HAL_HCD_MspInit+0xbc>)
 8007c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c22:	2200      	movs	r2, #0
 8007c24:	2100      	movs	r1, #0
 8007c26:	2043      	movs	r0, #67	; 0x43
 8007c28:	f7f8 fdbd 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c2c:	2043      	movs	r0, #67	; 0x43
 8007c2e:	f7f8 fdd6 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c32:	bf00      	nop
 8007c34:	3728      	adds	r7, #40	; 0x28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	40020000 	.word	0x40020000

08007c44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fba1 	bl	800639a <USBH_LL_IncTimer>
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fbe6 	bl	8006440 <USBH_LL_Connect>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fbfe 	bl	800648c <USBH_LL_Disconnect>
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe fb93 	bl	80063ee <USBH_LL_PortEnabled>
} 
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fb93 	bl	800640a <USBH_LL_PortDisabled>
} 
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d12a      	bne.n	8007d54 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007cfe:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a15      	ldr	r2, [pc, #84]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d0a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d0e:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d14:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007d16:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d18:	2208      	movs	r2, #8
 8007d1a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007d1c:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d1e:	2201      	movs	r2, #1
 8007d20:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007d34:	480a      	ldr	r0, [pc, #40]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d36:	f7f8 ff39 	bl	8000bac <HAL_HCD_Init>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007d40:	f7ff fc9a 	bl	8007678 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007d44:	4806      	ldr	r0, [pc, #24]	; (8007d60 <USBH_LL_Init+0x74>)
 8007d46:	f7f9 fb35 	bl	80013b4 <HAL_HCD_GetCurrentFrame>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fe fb14 	bl	800637c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	200005c4 	.word	0x200005c4

08007d64 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f9 faa2 	bl	80012c4 <HAL_HCD_Start>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f95c 	bl	8008044 <USBH_Get_USB_Status>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7f9 faaa 	bl	800130a <HAL_HCD_Stop>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f941 	bl	8008044 <USBH_Get_USB_Status>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7f9 faf4 	bl	80013d0 <HAL_HCD_GetCurrentSpeed>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d007      	beq.n	8007dfe <USBH_LL_GetSpeed+0x2e>
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d302      	bcc.n	8007df8 <USBH_LL_GetSpeed+0x28>
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d006      	beq.n	8007e04 <USBH_LL_GetSpeed+0x34>
 8007df6:	e008      	b.n	8007e0a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfc:	e008      	b.n	8007e10 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]
    break;
 8007e02:	e005      	b.n	8007e10 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007e04:	2302      	movs	r3, #2
 8007e06:	73fb      	strb	r3, [r7, #15]
    break;
 8007e08:	e002      	b.n	8007e10 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0e:	bf00      	nop
  }
  return  speed;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7f9 fa87 	bl	8001344 <HAL_HCD_ResetPort>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 f901 	bl	8008044 <USBH_Get_USB_Status>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7f9 fa8f 	bl	800138a <HAL_HCD_HC_GetXferCount>
 8007e6c:	4603      	mov	r3, r0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e76:	b590      	push	{r4, r7, lr}
 8007e78:	b089      	sub	sp, #36	; 0x24
 8007e7a:	af04      	add	r7, sp, #16
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	4608      	mov	r0, r1
 8007e80:	4611      	mov	r1, r2
 8007e82:	461a      	mov	r2, r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	70fb      	strb	r3, [r7, #3]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70bb      	strb	r3, [r7, #2]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007e9e:	787c      	ldrb	r4, [r7, #1]
 8007ea0:	78ba      	ldrb	r2, [r7, #2]
 8007ea2:	78f9      	ldrb	r1, [r7, #3]
 8007ea4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ea6:	9302      	str	r3, [sp, #8]
 8007ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	f7f8 fedb 	bl	8000c70 <HAL_HCD_HC_Init>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 f8bf 	bl	8008044 <USBH_Get_USB_Status>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd90      	pop	{r4, r7, pc}

08007ed4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7f8 ff54 	bl	8000da0 <HAL_HCD_HC_Halt>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f8a0 	bl	8008044 <USBH_Get_USB_Status>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007f12:	b590      	push	{r4, r7, lr}
 8007f14:	b089      	sub	sp, #36	; 0x24
 8007f16:	af04      	add	r7, sp, #16
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4603      	mov	r3, r0
 8007f22:	70fb      	strb	r3, [r7, #3]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70bb      	strb	r3, [r7, #2]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007f3a:	787c      	ldrb	r4, [r7, #1]
 8007f3c:	78ba      	ldrb	r2, [r7, #2]
 8007f3e:	78f9      	ldrb	r1, [r7, #3]
 8007f40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f44:	9303      	str	r3, [sp, #12]
 8007f46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f48:	9302      	str	r3, [sp, #8]
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	4623      	mov	r3, r4
 8007f56:	f7f8 ff47 	bl	8000de8 <HAL_HCD_HC_SubmitRequest>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f86f 	bl	8008044 <USBH_Get_USB_Status>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd90      	pop	{r4, r7, pc}

08007f74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7f9 f9e8 	bl	8001360 <HAL_HCD_HC_GetURBState>
 8007f90:	4603      	mov	r3, r0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d103      	bne.n	8007fb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f872 	bl	800809c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007fb8:	20c8      	movs	r0, #200	; 0xc8
 8007fba:	f7f8 faf7 	bl	80005ac <HAL_Delay>
  return USBH_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	440b      	add	r3, r1
 8007fee:	333b      	adds	r3, #59	; 0x3b
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	68f9      	ldr	r1, [r7, #12]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	440b      	add	r3, r1
 8008004:	3350      	adds	r3, #80	; 0x50
 8008006:	78ba      	ldrb	r2, [r7, #2]
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e009      	b.n	8008020 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800800c:	78fa      	ldrb	r2, [r7, #3]
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	440b      	add	r3, r1
 800801a:	3351      	adds	r3, #81	; 0x51
 800801c:	78ba      	ldrb	r2, [r7, #2]
 800801e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f8 fab8 	bl	80005ac <HAL_Delay>
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d817      	bhi.n	8008088 <USBH_Get_USB_Status+0x44>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <USBH_Get_USB_Status+0x1c>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008071 	.word	0x08008071
 8008064:	08008077 	.word	0x08008077
 8008068:	0800807d 	.word	0x0800807d
 800806c:	08008083 	.word	0x08008083
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e00b      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e008      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	e005      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008082:	2302      	movs	r3, #2
 8008084:	73fb      	strb	r3, [r7, #15]
    break;
 8008086:	e002      	b.n	800808e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	73fb      	strb	r3, [r7, #15]
    break;
 800808c:	bf00      	nop
  }
  return usb_status;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
 80080b4:	e001      	b.n	80080ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	461a      	mov	r2, r3
 80080be:	2101      	movs	r1, #1
 80080c0:	4803      	ldr	r0, [pc, #12]	; (80080d0 <MX_DriverVbusFS+0x34>)
 80080c2:	f7f8 fd41 	bl	8000b48 <HAL_GPIO_WritePin>
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40020800 	.word	0x40020800

080080d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80080d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800810c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80080d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80080da:	e003      	b.n	80080e4 <LoopCopyDataInit>

080080dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80080de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80080e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80080e2:	3104      	adds	r1, #4

080080e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80080e4:	480b      	ldr	r0, [pc, #44]	; (8008114 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80080e6:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80080e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80080ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80080ec:	d3f6      	bcc.n	80080dc <CopyDataInit>
  ldr  r2, =_sbss
 80080ee:	4a0b      	ldr	r2, [pc, #44]	; (800811c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80080f0:	e002      	b.n	80080f8 <LoopFillZerobss>

080080f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80080f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80080f4:	f842 3b04 	str.w	r3, [r2], #4

080080f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80080f8:	4b09      	ldr	r3, [pc, #36]	; (8008120 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80080fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80080fc:	d3f9      	bcc.n	80080f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80080fe:	f7ff fcab 	bl	8007a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008102:	f000 f817 	bl	8008134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008106:	f7fe fff5 	bl	80070f4 <main>
  bx  lr    
 800810a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800810c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008110:	08008364 	.word	0x08008364
  ldr  r0, =_sdata
 8008114:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008118:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800811c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008120:	2000088c 	.word	0x2000088c

08008124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008124:	e7fe      	b.n	8008124 <ADC_IRQHandler>
	...

08008128 <__errno>:
 8008128:	4b01      	ldr	r3, [pc, #4]	; (8008130 <__errno+0x8>)
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	2000002c 	.word	0x2000002c

08008134 <__libc_init_array>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4e0d      	ldr	r6, [pc, #52]	; (800816c <__libc_init_array+0x38>)
 8008138:	4c0d      	ldr	r4, [pc, #52]	; (8008170 <__libc_init_array+0x3c>)
 800813a:	1ba4      	subs	r4, r4, r6
 800813c:	10a4      	asrs	r4, r4, #2
 800813e:	2500      	movs	r5, #0
 8008140:	42a5      	cmp	r5, r4
 8008142:	d109      	bne.n	8008158 <__libc_init_array+0x24>
 8008144:	4e0b      	ldr	r6, [pc, #44]	; (8008174 <__libc_init_array+0x40>)
 8008146:	4c0c      	ldr	r4, [pc, #48]	; (8008178 <__libc_init_array+0x44>)
 8008148:	f000 f8ea 	bl	8008320 <_init>
 800814c:	1ba4      	subs	r4, r4, r6
 800814e:	10a4      	asrs	r4, r4, #2
 8008150:	2500      	movs	r5, #0
 8008152:	42a5      	cmp	r5, r4
 8008154:	d105      	bne.n	8008162 <__libc_init_array+0x2e>
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800815c:	4798      	blx	r3
 800815e:	3501      	adds	r5, #1
 8008160:	e7ee      	b.n	8008140 <__libc_init_array+0xc>
 8008162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008166:	4798      	blx	r3
 8008168:	3501      	adds	r5, #1
 800816a:	e7f2      	b.n	8008152 <__libc_init_array+0x1e>
 800816c:	0800835c 	.word	0x0800835c
 8008170:	0800835c 	.word	0x0800835c
 8008174:	0800835c 	.word	0x0800835c
 8008178:	08008360 	.word	0x08008360

0800817c <malloc>:
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <malloc+0xc>)
 800817e:	4601      	mov	r1, r0
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	f000 b861 	b.w	8008248 <_malloc_r>
 8008186:	bf00      	nop
 8008188:	2000002c 	.word	0x2000002c

0800818c <free>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <free+0xc>)
 800818e:	4601      	mov	r1, r0
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	f000 b80b 	b.w	80081ac <_free_r>
 8008196:	bf00      	nop
 8008198:	2000002c 	.word	0x2000002c

0800819c <memset>:
 800819c:	4402      	add	r2, r0
 800819e:	4603      	mov	r3, r0
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d100      	bne.n	80081a6 <memset+0xa>
 80081a4:	4770      	bx	lr
 80081a6:	f803 1b01 	strb.w	r1, [r3], #1
 80081aa:	e7f9      	b.n	80081a0 <memset+0x4>

080081ac <_free_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4605      	mov	r5, r0
 80081b0:	2900      	cmp	r1, #0
 80081b2:	d045      	beq.n	8008240 <_free_r+0x94>
 80081b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b8:	1f0c      	subs	r4, r1, #4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bfb8      	it	lt
 80081be:	18e4      	addlt	r4, r4, r3
 80081c0:	f000 f8ac 	bl	800831c <__malloc_lock>
 80081c4:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <_free_r+0x98>)
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	4610      	mov	r0, r2
 80081ca:	b933      	cbnz	r3, 80081da <_free_r+0x2e>
 80081cc:	6063      	str	r3, [r4, #4]
 80081ce:	6014      	str	r4, [r2, #0]
 80081d0:	4628      	mov	r0, r5
 80081d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081d6:	f000 b8a2 	b.w	800831e <__malloc_unlock>
 80081da:	42a3      	cmp	r3, r4
 80081dc:	d90c      	bls.n	80081f8 <_free_r+0x4c>
 80081de:	6821      	ldr	r1, [r4, #0]
 80081e0:	1862      	adds	r2, r4, r1
 80081e2:	4293      	cmp	r3, r2
 80081e4:	bf04      	itt	eq
 80081e6:	681a      	ldreq	r2, [r3, #0]
 80081e8:	685b      	ldreq	r3, [r3, #4]
 80081ea:	6063      	str	r3, [r4, #4]
 80081ec:	bf04      	itt	eq
 80081ee:	1852      	addeq	r2, r2, r1
 80081f0:	6022      	streq	r2, [r4, #0]
 80081f2:	6004      	str	r4, [r0, #0]
 80081f4:	e7ec      	b.n	80081d0 <_free_r+0x24>
 80081f6:	4613      	mov	r3, r2
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	b10a      	cbz	r2, 8008200 <_free_r+0x54>
 80081fc:	42a2      	cmp	r2, r4
 80081fe:	d9fa      	bls.n	80081f6 <_free_r+0x4a>
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	1858      	adds	r0, r3, r1
 8008204:	42a0      	cmp	r0, r4
 8008206:	d10b      	bne.n	8008220 <_free_r+0x74>
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	4401      	add	r1, r0
 800820c:	1858      	adds	r0, r3, r1
 800820e:	4282      	cmp	r2, r0
 8008210:	6019      	str	r1, [r3, #0]
 8008212:	d1dd      	bne.n	80081d0 <_free_r+0x24>
 8008214:	6810      	ldr	r0, [r2, #0]
 8008216:	6852      	ldr	r2, [r2, #4]
 8008218:	605a      	str	r2, [r3, #4]
 800821a:	4401      	add	r1, r0
 800821c:	6019      	str	r1, [r3, #0]
 800821e:	e7d7      	b.n	80081d0 <_free_r+0x24>
 8008220:	d902      	bls.n	8008228 <_free_r+0x7c>
 8008222:	230c      	movs	r3, #12
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	e7d3      	b.n	80081d0 <_free_r+0x24>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	1821      	adds	r1, r4, r0
 800822c:	428a      	cmp	r2, r1
 800822e:	bf04      	itt	eq
 8008230:	6811      	ldreq	r1, [r2, #0]
 8008232:	6852      	ldreq	r2, [r2, #4]
 8008234:	6062      	str	r2, [r4, #4]
 8008236:	bf04      	itt	eq
 8008238:	1809      	addeq	r1, r1, r0
 800823a:	6021      	streq	r1, [r4, #0]
 800823c:	605c      	str	r4, [r3, #4]
 800823e:	e7c7      	b.n	80081d0 <_free_r+0x24>
 8008240:	bd38      	pop	{r3, r4, r5, pc}
 8008242:	bf00      	nop
 8008244:	200000b8 	.word	0x200000b8

08008248 <_malloc_r>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	1ccd      	adds	r5, r1, #3
 800824c:	f025 0503 	bic.w	r5, r5, #3
 8008250:	3508      	adds	r5, #8
 8008252:	2d0c      	cmp	r5, #12
 8008254:	bf38      	it	cc
 8008256:	250c      	movcc	r5, #12
 8008258:	2d00      	cmp	r5, #0
 800825a:	4606      	mov	r6, r0
 800825c:	db01      	blt.n	8008262 <_malloc_r+0x1a>
 800825e:	42a9      	cmp	r1, r5
 8008260:	d903      	bls.n	800826a <_malloc_r+0x22>
 8008262:	230c      	movs	r3, #12
 8008264:	6033      	str	r3, [r6, #0]
 8008266:	2000      	movs	r0, #0
 8008268:	bd70      	pop	{r4, r5, r6, pc}
 800826a:	f000 f857 	bl	800831c <__malloc_lock>
 800826e:	4a21      	ldr	r2, [pc, #132]	; (80082f4 <_malloc_r+0xac>)
 8008270:	6814      	ldr	r4, [r2, #0]
 8008272:	4621      	mov	r1, r4
 8008274:	b991      	cbnz	r1, 800829c <_malloc_r+0x54>
 8008276:	4c20      	ldr	r4, [pc, #128]	; (80082f8 <_malloc_r+0xb0>)
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	b91b      	cbnz	r3, 8008284 <_malloc_r+0x3c>
 800827c:	4630      	mov	r0, r6
 800827e:	f000 f83d 	bl	80082fc <_sbrk_r>
 8008282:	6020      	str	r0, [r4, #0]
 8008284:	4629      	mov	r1, r5
 8008286:	4630      	mov	r0, r6
 8008288:	f000 f838 	bl	80082fc <_sbrk_r>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d124      	bne.n	80082da <_malloc_r+0x92>
 8008290:	230c      	movs	r3, #12
 8008292:	6033      	str	r3, [r6, #0]
 8008294:	4630      	mov	r0, r6
 8008296:	f000 f842 	bl	800831e <__malloc_unlock>
 800829a:	e7e4      	b.n	8008266 <_malloc_r+0x1e>
 800829c:	680b      	ldr	r3, [r1, #0]
 800829e:	1b5b      	subs	r3, r3, r5
 80082a0:	d418      	bmi.n	80082d4 <_malloc_r+0x8c>
 80082a2:	2b0b      	cmp	r3, #11
 80082a4:	d90f      	bls.n	80082c6 <_malloc_r+0x7e>
 80082a6:	600b      	str	r3, [r1, #0]
 80082a8:	50cd      	str	r5, [r1, r3]
 80082aa:	18cc      	adds	r4, r1, r3
 80082ac:	4630      	mov	r0, r6
 80082ae:	f000 f836 	bl	800831e <__malloc_unlock>
 80082b2:	f104 000b 	add.w	r0, r4, #11
 80082b6:	1d23      	adds	r3, r4, #4
 80082b8:	f020 0007 	bic.w	r0, r0, #7
 80082bc:	1ac3      	subs	r3, r0, r3
 80082be:	d0d3      	beq.n	8008268 <_malloc_r+0x20>
 80082c0:	425a      	negs	r2, r3
 80082c2:	50e2      	str	r2, [r4, r3]
 80082c4:	e7d0      	b.n	8008268 <_malloc_r+0x20>
 80082c6:	428c      	cmp	r4, r1
 80082c8:	684b      	ldr	r3, [r1, #4]
 80082ca:	bf16      	itet	ne
 80082cc:	6063      	strne	r3, [r4, #4]
 80082ce:	6013      	streq	r3, [r2, #0]
 80082d0:	460c      	movne	r4, r1
 80082d2:	e7eb      	b.n	80082ac <_malloc_r+0x64>
 80082d4:	460c      	mov	r4, r1
 80082d6:	6849      	ldr	r1, [r1, #4]
 80082d8:	e7cc      	b.n	8008274 <_malloc_r+0x2c>
 80082da:	1cc4      	adds	r4, r0, #3
 80082dc:	f024 0403 	bic.w	r4, r4, #3
 80082e0:	42a0      	cmp	r0, r4
 80082e2:	d005      	beq.n	80082f0 <_malloc_r+0xa8>
 80082e4:	1a21      	subs	r1, r4, r0
 80082e6:	4630      	mov	r0, r6
 80082e8:	f000 f808 	bl	80082fc <_sbrk_r>
 80082ec:	3001      	adds	r0, #1
 80082ee:	d0cf      	beq.n	8008290 <_malloc_r+0x48>
 80082f0:	6025      	str	r5, [r4, #0]
 80082f2:	e7db      	b.n	80082ac <_malloc_r+0x64>
 80082f4:	200000b8 	.word	0x200000b8
 80082f8:	200000bc 	.word	0x200000bc

080082fc <_sbrk_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4c06      	ldr	r4, [pc, #24]	; (8008318 <_sbrk_r+0x1c>)
 8008300:	2300      	movs	r3, #0
 8008302:	4605      	mov	r5, r0
 8008304:	4608      	mov	r0, r1
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	f7ff fb7a 	bl	8007a00 <_sbrk>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_sbrk_r+0x1a>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	b103      	cbz	r3, 8008316 <_sbrk_r+0x1a>
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	20000888 	.word	0x20000888

0800831c <__malloc_lock>:
 800831c:	4770      	bx	lr

0800831e <__malloc_unlock>:
 800831e:	4770      	bx	lr

08008320 <_init>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr

0800832c <_fini>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr
